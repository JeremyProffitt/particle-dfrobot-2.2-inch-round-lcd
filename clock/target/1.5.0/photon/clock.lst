
c:/dev/particle-round-lcd/DFRobot_ST7687S/examples/clock/clock/target/1.5.0/photon/clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006310  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a6330  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  20000000  080a6334  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000610  20000074  20000074  00040074  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a63a8  080a63a8  000363a8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a63d0  080a63d0  000363d0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000c7664  00000000  00000000  000363d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00012b23  00000000  00000000  000fda38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00013453  00000000  00000000  0011055b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002150  00000000  00000000  001239ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000031a0  00000000  00000000  00125afe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002d571  00000000  00000000  00128c9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002e4c6  00000000  00000000  0015620f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a84e0  00000000  00000000  001846d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000be78  00000000  00000000  0022cbb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f005 fd0b 	bl	80a5a4c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f005 fd10 	bl	80a5a62 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a6334 	.word	0x080a6334
 80a0050:	20000074 	.word	0x20000074
 80a0054:	20000074 	.word	0x20000074
 80a0058:	20000684 	.word	0x20000684
 80a005c:	20000684 	.word	0x20000684

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f002 fe81 	bl	80a2d68 <module_user_init_hook>
 80a0066:	4b07      	ldr	r3, [pc, #28]	; (80a0084 <module_user_init+0x24>)
 80a0068:	4c07      	ldr	r4, [pc, #28]	; (80a0088 <module_user_init+0x28>)
 80a006a:	461e      	mov	r6, r3
 80a006c:	1ae4      	subs	r4, r4, r3
 80a006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0070:	2500      	movs	r5, #0
 80a0072:	42a5      	cmp	r5, r4
 80a0074:	d004      	beq.n	80a0080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f8      	b.n	80a0072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0080:	bd70      	pop	{r4, r5, r6, pc}
 80a0082:	bf00      	nop
 80a0084:	080a62e4 	.word	0x080a62e4
 80a0088:	080a632c 	.word	0x080a632c

080a008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a008c:	f000 b944 	b.w	80a0318 <setup>

080a0090 <module_user_loop>:
}

void module_user_loop() {
 80a0090:	b508      	push	{r3, lr}
    loop();
 80a0092:	f000 f987 	bl	80a03a4 <loop>
    _post_loop();
}
 80a0096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a009a:	f002 be27 	b.w	80a2cec <_post_loop>

080a009e <_ZdlPv>:
 80a009e:	f002 bcd3 	b.w	80a2a48 <free>
	...

080a00a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
 80a00a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00a6:	4a03      	ldr	r2, [pc, #12]	; (80a00b4 <__cxa_pure_virtual+0x10>)
 80a00a8:	2100      	movs	r1, #0
 80a00aa:	200c      	movs	r0, #12
 80a00ac:	f002 fc40 	bl	80a2930 <panic_>
 80a00b0:	e7fe      	b.n	80a00b0 <__cxa_pure_virtual+0xc>
 80a00b2:	bf00      	nop
 80a00b4:	080a275d 	.word	0x080a275d

080a00b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00b8:	7800      	ldrb	r0, [r0, #0]
 80a00ba:	fab0 f080 	clz	r0, r0
 80a00be:	0940      	lsrs	r0, r0, #5
 80a00c0:	4770      	bx	lr

080a00c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00c2:	2301      	movs	r3, #1
 80a00c4:	7003      	strb	r3, [r0, #0]
 80a00c6:	4770      	bx	lr

080a00c8 <DFRobot_Character_getCharacter>:
0x02,0x01,0x02,0x04,0x02,0x00,//~
0x00,0x00,0x00,0x00,0x00,0x00
};

int16_t DFRobot_Character_getCharacter(uint8_t *pCh, uint8_t* pBuf, uint8_t* pWidth, uint8_t* pHeight)
{
 80a00c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t        var1 = 0;
  if(*pCh < 0x20) {
 80a00ca:	7804      	ldrb	r4, [r0, #0]
 80a00cc:	2c1f      	cmp	r4, #31
 80a00ce:	d808      	bhi.n	80a00e2 <DFRobot_Character_getCharacter+0x1a>
    if(*pCh > 0x06 && *pCh < 0x0e) {
 80a00d0:	3c07      	subs	r4, #7
 80a00d2:	2c06      	cmp	r4, #6
 80a00d4:	d814      	bhi.n	80a0100 <DFRobot_Character_getCharacter+0x38>
      *pWidth = 6; *pHeight = 8;
 80a00d6:	2106      	movs	r1, #6
 80a00d8:	7011      	strb	r1, [r2, #0]
 80a00da:	2208      	movs	r2, #8
 80a00dc:	701a      	strb	r2, [r3, #0]
      return 1;
 80a00de:	2001      	movs	r0, #1
 80a00e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else {
      return DISPLAY_ERR_PARAM;
    }
  //utf-8 code
  } else if(*pCh < 0x80) {
 80a00e2:	0624      	lsls	r4, r4, #24
 80a00e4:	d40c      	bmi.n	80a0100 <DFRobot_Character_getCharacter+0x38>
	  for(var1 = 0; var1 < 6; var1 ++) {
#ifdef __AVR__
      pBuf[var1] = pgm_read_byte(&table_character_6_8[*pCh - 0x20][var1]);
#else
      pBuf[var1] = table_character_6_8[*pCh - 0x20][var1];
 80a00e6:	4e08      	ldr	r6, [pc, #32]	; (80a0108 <DFRobot_Character_getCharacter+0x40>)
 80a00e8:	2400      	movs	r4, #0
 80a00ea:	2706      	movs	r7, #6
 80a00ec:	7805      	ldrb	r5, [r0, #0]
 80a00ee:	3d20      	subs	r5, #32
 80a00f0:	fb07 6505 	mla	r5, r7, r5, r6
 80a00f4:	5d2d      	ldrb	r5, [r5, r4]
 80a00f6:	550d      	strb	r5, [r1, r4]
 80a00f8:	3401      	adds	r4, #1
    } else {
      return DISPLAY_ERR_PARAM;
    }
  //utf-8 code
  } else if(*pCh < 0x80) {
	  for(var1 = 0; var1 < 6; var1 ++) {
 80a00fa:	2c06      	cmp	r4, #6
 80a00fc:	d1f6      	bne.n	80a00ec <DFRobot_Character_getCharacter+0x24>
 80a00fe:	e7ea      	b.n	80a00d6 <DFRobot_Character_getCharacter+0xe>
  if(*pCh < 0x20) {
    if(*pCh > 0x06 && *pCh < 0x0e) {
      *pWidth = 6; *pHeight = 8;
      return 1;
    } else {
      return DISPLAY_ERR_PARAM;
 80a0100:	f06f 0001 	mvn.w	r0, #1
	  *pWidth = 6; *pHeight = 8;
	  return 1;
  } else {
    return DISPLAY_ERR_PARAM;
  }
}
 80a0104:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0106:	bf00      	nop
 80a0108:	080a5ae8 	.word	0x080a5ae8

080a010c <HC595_begin>:
#include "HC595.h"


void HC595_begin(sHC595_t* psHC595)
{
  psHC595->pWriteRCK(0);
 80a010c:	6843      	ldr	r3, [r0, #4]
 80a010e:	2000      	movs	r0, #0
 80a0110:	4718      	bx	r3

080a0112 <HC595_writeReg>:
}


void HC595_writeReg(sHC595_t* psHC595, uint8_t dat, uint8_t action)
{
 80a0112:	b570      	push	{r4, r5, r6, lr}
 80a0114:	4615      	mov	r5, r2
 80a0116:	4604      	mov	r4, r0
  psHC595->pWrite(dat);
 80a0118:	6803      	ldr	r3, [r0, #0]
 80a011a:	4608      	mov	r0, r1
 80a011c:	4798      	blx	r3
  if(action) {
 80a011e:	b14d      	cbz	r5, 80a0134 <HC595_writeReg+0x22>
    psHC595->pWriteRCK(1);
 80a0120:	6863      	ldr	r3, [r4, #4]
 80a0122:	2001      	movs	r0, #1
 80a0124:	4798      	blx	r3
    psHC595->pDelay();
 80a0126:	68a3      	ldr	r3, [r4, #8]
 80a0128:	4798      	blx	r3
    psHC595->pWriteRCK(0);
 80a012a:	6863      	ldr	r3, [r4, #4]
 80a012c:	2000      	movs	r0, #0
  }
}
 80a012e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
  psHC595->pWrite(dat);
  if(action) {
    psHC595->pWriteRCK(1);
    psHC595->pDelay();
    psHC595->pWriteRCK(0);
 80a0132:	4718      	bx	r3
 80a0134:	bd70      	pop	{r4, r5, r6, pc}

080a0136 <_ZN15DFRobot_ST7687S10writeToRamEv>:

    void        fillScreen(uint16_t color);    
    void        setCursorAddr(int16_t x0, int16_t y0, int16_t x1, int16_t y1);
    void        drawHLine(int16_t x, int16_t y, int16_t width, uint16_t color);
    void        drawVLine(int16_t x, int16_t y, int16_t height, uint16_t color);
    void        writeToRam(void) {writeCmd(0x2c);}
 80a0136:	6803      	ldr	r3, [r0, #0]
 80a0138:	212c      	movs	r1, #44	; 0x2c
 80a013a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a013c:	4718      	bx	r3
	...

080a0140 <_ZN15DFRobot_ST7687SC1Ev>:
#include "DFRobot_ST7687S.h"


DFRobot_ST7687S::DFRobot_ST7687S(void) :
 80a0140:	b510      	push	{r4, lr}
 80a0142:	4604      	mov	r4, r0
                 DFRobot_Display(128, 128)
 80a0144:	2280      	movs	r2, #128	; 0x80
 80a0146:	4611      	mov	r1, r2
 80a0148:	f001 fd86 	bl	80a1c58 <_ZN15DFRobot_DisplayC1Ett>
 80a014c:	4b08      	ldr	r3, [pc, #32]	; (80a0170 <_ZN15DFRobot_ST7687SC1Ev+0x30>)
{
  setDisplayShape(eSHAPE_CIRCLE);
 80a014e:	4620      	mov	r0, r4
#include "DFRobot_ST7687S.h"


DFRobot_ST7687S::DFRobot_ST7687S(void) :
                 DFRobot_Display(128, 128)
 80a0150:	6023      	str	r3, [r4, #0]
{
  setDisplayShape(eSHAPE_CIRCLE);
 80a0152:	2101      	movs	r1, #1
 80a0154:	f002 fa8c 	bl	80a2670 <_ZN15DFRobot_Display15setDisplayShapeE6eSHAPE>
  setOrign(64, 64);
 80a0158:	2240      	movs	r2, #64	; 0x40
 80a015a:	4611      	mov	r1, r2
 80a015c:	4620      	mov	r0, r4
 80a015e:	f002 fa9d 	bl	80a269c <_ZN15DFRobot_Display8setOrignEss>
  setCursor(64, 64);
 80a0162:	2240      	movs	r2, #64	; 0x40
 80a0164:	4620      	mov	r0, r4
 80a0166:	4611      	mov	r1, r2
 80a0168:	f002 fa8b 	bl	80a2682 <_ZN15DFRobot_Display9setCursorEss>
}
 80a016c:	4620      	mov	r0, r4
 80a016e:	bd10      	pop	{r4, pc}
 80a0170:	080a5d30 	.word	0x080a5d30

080a0174 <_ZN15DFRobot_ST7687S13setCursorAddrEssss>:


void DFRobot_ST7687S::setCursorAddr(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 80a0174:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0176:	4604      	mov	r4, r0
 80a0178:	4615      	mov	r5, r2
  uint8_t addrBuf[2] = {(uint16_t)x0 , (uint16_t)x1};
 80a017a:	f88d 3005 	strb.w	r3, [sp, #5]
  writeCmd(0x2a);
 80a017e:	6803      	ldr	r3, [r0, #0]
}


void DFRobot_ST7687S::setCursorAddr(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
  uint8_t addrBuf[2] = {(uint16_t)x0 , (uint16_t)x1};
 80a0180:	f88d 1004 	strb.w	r1, [sp, #4]
  writeCmd(0x2a);
 80a0184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0186:	212a      	movs	r1, #42	; 0x2a
 80a0188:	4798      	blx	r3
  writeDatBytes(addrBuf, 2);
 80a018a:	6823      	ldr	r3, [r4, #0]
 80a018c:	2202      	movs	r2, #2
 80a018e:	a901      	add	r1, sp, #4
 80a0190:	4620      	mov	r0, r4
 80a0192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a0194:	4798      	blx	r3
  addrBuf[0] = (uint16_t)y0; addrBuf[1] = (uint16_t)y1;
 80a0196:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
  writeCmd(0x2b);
 80a019a:	4620      	mov	r0, r4
void DFRobot_ST7687S::setCursorAddr(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
  uint8_t addrBuf[2] = {(uint16_t)x0 , (uint16_t)x1};
  writeCmd(0x2a);
  writeDatBytes(addrBuf, 2);
  addrBuf[0] = (uint16_t)y0; addrBuf[1] = (uint16_t)y1;
 80a019c:	f88d 3005 	strb.w	r3, [sp, #5]
  writeCmd(0x2b);
 80a01a0:	6823      	ldr	r3, [r4, #0]
void DFRobot_ST7687S::setCursorAddr(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
  uint8_t addrBuf[2] = {(uint16_t)x0 , (uint16_t)x1};
  writeCmd(0x2a);
  writeDatBytes(addrBuf, 2);
  addrBuf[0] = (uint16_t)y0; addrBuf[1] = (uint16_t)y1;
 80a01a2:	f88d 5004 	strb.w	r5, [sp, #4]
  writeCmd(0x2b);
 80a01a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a01a8:	212b      	movs	r1, #43	; 0x2b
 80a01aa:	4798      	blx	r3
  writeDatBytes(addrBuf, 2);
 80a01ac:	6823      	ldr	r3, [r4, #0]
 80a01ae:	2202      	movs	r2, #2
 80a01b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a01b2:	a901      	add	r1, sp, #4
 80a01b4:	4620      	mov	r0, r4
 80a01b6:	4798      	blx	r3
}
 80a01b8:	b003      	add	sp, #12
 80a01ba:	bd30      	pop	{r4, r5, pc}

080a01bc <_ZN15DFRobot_ST7687S10fillScreenEt>:


void DFRobot_ST7687S::fillScreen(uint16_t color)
{
 80a01bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a01be:	4604      	mov	r4, r0
 80a01c0:	460f      	mov	r7, r1
  uint8_t i, j;
  _DEBUG_PRINT("\nfill screen");
  setCursorAddr(0, 0, 128, 128);
 80a01c2:	2580      	movs	r5, #128	; 0x80
 80a01c4:	2200      	movs	r2, #0
 80a01c6:	462b      	mov	r3, r5
 80a01c8:	4611      	mov	r1, r2
 80a01ca:	9500      	str	r5, [sp, #0]
 80a01cc:	f7ff ffd2 	bl	80a0174 <_ZN15DFRobot_ST7687S13setCursorAddrEssss>
  writeToRam();
 80a01d0:	4620      	mov	r0, r4
 80a01d2:	f7ff ffb0 	bl	80a0136 <_ZN15DFRobot_ST7687S10writeToRamEv>
  writeRepeatPixel(color, 128, 128);
 80a01d6:	6823      	ldr	r3, [r4, #0]
 80a01d8:	462a      	mov	r2, r5
 80a01da:	6e1e      	ldr	r6, [r3, #96]	; 0x60
 80a01dc:	4639      	mov	r1, r7
 80a01de:	462b      	mov	r3, r5
 80a01e0:	4620      	mov	r0, r4
 80a01e2:	46b4      	mov	ip, r6
}
 80a01e4:	b003      	add	sp, #12
 80a01e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
{
  uint8_t i, j;
  _DEBUG_PRINT("\nfill screen");
  setCursorAddr(0, 0, 128, 128);
  writeToRam();
  writeRepeatPixel(color, 128, 128);
 80a01ea:	4760      	bx	ip

080a01ec <_ZN15DFRobot_ST7687S9drawVLineEssst>:
}


void DFRobot_ST7687S::drawVLine(int16_t x, int16_t y, int16_t height_, uint16_t color)
{
 80a01ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a01ee:	4605      	mov	r5, r0
    int16_t      printfX, printfY;

    int16_t limitVLine(int16_t &x, int16_t &y, int16_t &h)
    {
      int16_t h_ = h,x_=x,y_=y,y0_,y1_;
      if(h < 0){
 80a01f0:	1e18      	subs	r0, r3, #0
 80a01f2:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 80a01f6:	da05      	bge.n	80a0204 <_ZN15DFRobot_ST7687S9drawVLineEssst+0x18>
        h_ = -h;
 80a01f8:	b284      	uxth	r4, r0
      y_ = y- h_ + 1;
 80a01fa:	3201      	adds	r2, #1

    int16_t limitVLine(int16_t &x, int16_t &y, int16_t &h)
    {
      int16_t h_ = h,x_=x,y_=y,y0_,y1_;
      if(h < 0){
        h_ = -h;
 80a01fc:	4260      	negs	r0, r4
      y_ = y- h_ + 1;
 80a01fe:	4422      	add	r2, r4

    int16_t limitVLine(int16_t &x, int16_t &y, int16_t &h)
    {
      int16_t h_ = h,x_=x,y_=y,y0_,y1_;
      if(h < 0){
        h_ = -h;
 80a0200:	b200      	sxth	r0, r0
      y_ = y- h_ + 1;
 80a0202:	b212      	sxth	r2, r2
      }
      x_ = x + cursorX;
      y0_ = y_ + cursorY;
 80a0204:	8b6c      	ldrh	r4, [r5, #26]
      int16_t h_ = h,x_=x,y_=y,y0_,y1_;
      if(h < 0){
        h_ = -h;
      y_ = y- h_ + 1;
      }
      x_ = x + cursorX;
 80a0206:	8b2b      	ldrh	r3, [r5, #24]
      y0_ = y_ + cursorY;
 80a0208:	4422      	add	r2, r4
      int16_t h_ = h,x_=x,y_=y,y0_,y1_;
      if(h < 0){
        h_ = -h;
      y_ = y- h_ + 1;
      }
      x_ = x + cursorX;
 80a020a:	440b      	add	r3, r1
      y0_ = y_ + cursorY;
 80a020c:	b294      	uxth	r4, r2
      int16_t h_ = h,x_=x,y_=y,y0_,y1_;
      if(h < 0){
        h_ = -h;
      y_ = y- h_ + 1;
      }
      x_ = x + cursorX;
 80a020e:	b21b      	sxth	r3, r3
      y0_ = y_ + cursorY;
      y1_ = y0_+h_-1;
 80a0210:	3801      	subs	r0, #1
 80a0212:	4420      	add	r0, r4
      
      if((x_ < 0) || (x_ > width) ||  (y0_ > height) || (y1_ < 0)) {
 80a0214:	2b00      	cmp	r3, #0
      if(h < 0){
        h_ = -h;
      y_ = y- h_ + 1;
      }
      x_ = x + cursorX;
      y0_ = y_ + cursorY;
 80a0216:	b222      	sxth	r2, r4
      y1_ = y0_+h_-1;
 80a0218:	b200      	sxth	r0, r0
      
      if((x_ < 0) || (x_ > width) ||  (y0_ > height) || (y1_ < 0)) {
 80a021a:	db2a      	blt.n	80a0272 <_ZN15DFRobot_ST7687S9drawVLineEssst+0x86>
 80a021c:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80a0220:	4299      	cmp	r1, r3
 80a0222:	db26      	blt.n	80a0272 <_ZN15DFRobot_ST7687S9drawVLineEssst+0x86>
 80a0224:	f9b5 400a 	ldrsh.w	r4, [r5, #10]
 80a0228:	42a2      	cmp	r2, r4
 80a022a:	dc22      	bgt.n	80a0272 <_ZN15DFRobot_ST7687S9drawVLineEssst+0x86>
 80a022c:	2800      	cmp	r0, #0
 80a022e:	db20      	blt.n	80a0272 <_ZN15DFRobot_ST7687S9drawVLineEssst+0x86>
 80a0230:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
      }
      if(y0_ < 0) y0_ = 0;
      if(y1_ > height) y1_ = height;
      x = x_;
      y = y0_;
      h = y1_-y0_+1;
 80a0234:	b297      	uxth	r7, r2
 80a0236:	42a0      	cmp	r0, r4
 80a0238:	bfd4      	ite	le
 80a023a:	ebc7 0400 	rsble	r4, r7, r0
 80a023e:	ebc7 0404 	rsbgt	r4, r7, r4
 80a0242:	3401      	adds	r4, #1
 80a0244:	b2a4      	uxth	r4, r4
  _DEBUG_PRINTVAR(y, DEC);
  _DEBUG_PRINT(" ");
  _DEBUG_PRINTVAR(width, DEC);
  
  if(limitVLine(x, y, height_) < 0) {return;}
  setCursorAddr(x, y, x, y + height_ - 1);
 80a0246:	3f01      	subs	r7, #1
 80a0248:	4427      	add	r7, r4
 80a024a:	b23f      	sxth	r7, r7
 80a024c:	4619      	mov	r1, r3
 80a024e:	9700      	str	r7, [sp, #0]
 80a0250:	4628      	mov	r0, r5
 80a0252:	f7ff ff8f 	bl	80a0174 <_ZN15DFRobot_ST7687S13setCursorAddrEssss>
  writeToRam();
 80a0256:	4628      	mov	r0, r5
 80a0258:	f7ff ff6d 	bl	80a0136 <_ZN15DFRobot_ST7687S10writeToRamEv>
  writeRepeatPixel(color, height_, 1);
 80a025c:	682b      	ldr	r3, [r5, #0]
 80a025e:	4622      	mov	r2, r4
 80a0260:	6e1f      	ldr	r7, [r3, #96]	; 0x60
 80a0262:	4631      	mov	r1, r6
 80a0264:	4628      	mov	r0, r5
 80a0266:	46bc      	mov	ip, r7
 80a0268:	2301      	movs	r3, #1
}
 80a026a:	b003      	add	sp, #12
 80a026c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  _DEBUG_PRINTVAR(width, DEC);
  
  if(limitVLine(x, y, height_) < 0) {return;}
  setCursorAddr(x, y, x, y + height_ - 1);
  writeToRam();
  writeRepeatPixel(color, height_, 1);
 80a0270:	4760      	bx	ip
}
 80a0272:	b003      	add	sp, #12
 80a0274:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080a0278 <_ZN15DFRobot_ST7687S9drawHLineEssst>:


void DFRobot_ST7687S::drawHLine(int16_t x, int16_t y, int16_t width_, uint16_t color)
{
 80a0278:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    }

    int16_t limitHLine(int16_t & x, int16_t & y, int16_t &w)
    {
      int16_t w_=w,x_=x,y_=y,x0_,x1_;
      if(w < 0){
 80a027a:	2b00      	cmp	r3, #0
 80a027c:	4605      	mov	r5, r0
 80a027e:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 80a0282:	da05      	bge.n	80a0290 <_ZN15DFRobot_ST7687S9drawHLineEssst+0x18>
        w_ = -w;
 80a0284:	b298      	uxth	r0, r3
        x_ = x- w_ + 1;
 80a0286:	3101      	adds	r1, #1

    int16_t limitHLine(int16_t & x, int16_t & y, int16_t &w)
    {
      int16_t w_=w,x_=x,y_=y,x0_,x1_;
      if(w < 0){
        w_ = -w;
 80a0288:	4243      	negs	r3, r0
        x_ = x- w_ + 1;
 80a028a:	4401      	add	r1, r0

    int16_t limitHLine(int16_t & x, int16_t & y, int16_t &w)
    {
      int16_t w_=w,x_=x,y_=y,x0_,x1_;
      if(w < 0){
        w_ = -w;
 80a028c:	b21b      	sxth	r3, r3
        x_ = x- w_ + 1;
 80a028e:	b209      	sxth	r1, r1
      }
      y_ = y + cursorY;
      x0_ = x_ + cursorX;
 80a0290:	8b2c      	ldrh	r4, [r5, #24]
      int16_t w_=w,x_=x,y_=y,x0_,x1_;
      if(w < 0){
        w_ = -w;
        x_ = x- w_ + 1;
      }
      y_ = y + cursorY;
 80a0292:	8b68      	ldrh	r0, [r5, #26]
      x0_ = x_ + cursorX;
 80a0294:	4421      	add	r1, r4
      int16_t w_=w,x_=x,y_=y,x0_,x1_;
      if(w < 0){
        w_ = -w;
        x_ = x- w_ + 1;
      }
      y_ = y + cursorY;
 80a0296:	4402      	add	r2, r0
      x0_ = x_ + cursorX;
 80a0298:	b28c      	uxth	r4, r1
      int16_t w_=w,x_=x,y_=y,x0_,x1_;
      if(w < 0){
        w_ = -w;
        x_ = x- w_ + 1;
      }
      y_ = y + cursorY;
 80a029a:	b212      	sxth	r2, r2
      x0_ = x_ + cursorX;
      x1_ = x0_+w_-1;
 80a029c:	3b01      	subs	r3, #1
 80a029e:	4423      	add	r3, r4
      if((y_ < 0) || (y_ > height) ||  (x0_ > width) || (x1_ < 0)) {
 80a02a0:	2a00      	cmp	r2, #0
      if(w < 0){
        w_ = -w;
        x_ = x- w_ + 1;
      }
      y_ = y + cursorY;
      x0_ = x_ + cursorX;
 80a02a2:	b221      	sxth	r1, r4
      x1_ = x0_+w_-1;
 80a02a4:	b21b      	sxth	r3, r3
      if((y_ < 0) || (y_ > height) ||  (x0_ > width) || (x1_ < 0)) {
 80a02a6:	db29      	blt.n	80a02fc <_ZN15DFRobot_ST7687S9drawHLineEssst+0x84>
 80a02a8:	f9b5 000a 	ldrsh.w	r0, [r5, #10]
 80a02ac:	4290      	cmp	r0, r2
 80a02ae:	db25      	blt.n	80a02fc <_ZN15DFRobot_ST7687S9drawHLineEssst+0x84>
 80a02b0:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
 80a02b4:	42a1      	cmp	r1, r4
 80a02b6:	dc21      	bgt.n	80a02fc <_ZN15DFRobot_ST7687S9drawHLineEssst+0x84>
 80a02b8:	2b00      	cmp	r3, #0
 80a02ba:	db1f      	blt.n	80a02fc <_ZN15DFRobot_ST7687S9drawHLineEssst+0x84>
 80a02bc:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
      }
      if(x0_ < 0) x0_ = 0;
      if(x1_ > width) x1_ = width;
      x = x0_;
      y = y_;
      w = x1_-x0_+1;
 80a02c0:	b288      	uxth	r0, r1
 80a02c2:	42a3      	cmp	r3, r4
 80a02c4:	bfd4      	ite	le
 80a02c6:	ebc0 0403 	rsble	r4, r0, r3
 80a02ca:	ebc0 0404 	rsbgt	r4, r0, r4
 80a02ce:	3401      	adds	r4, #1
 80a02d0:	b2a4      	uxth	r4, r4
  _DEBUG_PRINTVAR(y, DEC);
  _DEBUG_PRINT(" ");
  _DEBUG_PRINTVAR(width_, DEC);
  
  if(limitHLine(x, y, width_) < 0) {Serial.print("drawHLine error \n");return;}
  setCursorAddr(x, y, x + width_ - 1, y);
 80a02d2:	1e43      	subs	r3, r0, #1
 80a02d4:	4423      	add	r3, r4
 80a02d6:	9200      	str	r2, [sp, #0]
 80a02d8:	b21b      	sxth	r3, r3
 80a02da:	4628      	mov	r0, r5
 80a02dc:	f7ff ff4a 	bl	80a0174 <_ZN15DFRobot_ST7687S13setCursorAddrEssss>
  writeToRam();
 80a02e0:	4628      	mov	r0, r5
 80a02e2:	f7ff ff28 	bl	80a0136 <_ZN15DFRobot_ST7687S10writeToRamEv>
  writeRepeatPixel(color, width_, 1);
 80a02e6:	682b      	ldr	r3, [r5, #0]
 80a02e8:	4622      	mov	r2, r4
 80a02ea:	6e1f      	ldr	r7, [r3, #96]	; 0x60
 80a02ec:	4631      	mov	r1, r6
 80a02ee:	4628      	mov	r0, r5
 80a02f0:	46bc      	mov	ip, r7
 80a02f2:	2301      	movs	r3, #1
}
 80a02f4:	b003      	add	sp, #12
 80a02f6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  _DEBUG_PRINTVAR(width_, DEC);
  
  if(limitHLine(x, y, width_) < 0) {Serial.print("drawHLine error \n");return;}
  setCursorAddr(x, y, x + width_ - 1, y);
  writeToRam();
  writeRepeatPixel(color, width_, 1);
 80a02fa:	4760      	bx	ip
  _DEBUG_PRINT(" ");
  _DEBUG_PRINTVAR(y, DEC);
  _DEBUG_PRINT(" ");
  _DEBUG_PRINTVAR(width_, DEC);
  
  if(limitHLine(x, y, width_) < 0) {Serial.print("drawHLine error \n");return;}
 80a02fc:	f002 fe34 	bl	80a2f68 <_Z16_fetch_usbserialv>
 80a0300:	4902      	ldr	r1, [pc, #8]	; (80a030c <_ZN15DFRobot_ST7687S9drawHLineEssst+0x94>)
  setCursorAddr(x, y, x + width_ - 1, y);
  writeToRam();
  writeRepeatPixel(color, width_, 1);
}
 80a0302:	b003      	add	sp, #12
 80a0304:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  _DEBUG_PRINT(" ");
  _DEBUG_PRINTVAR(y, DEC);
  _DEBUG_PRINT(" ");
  _DEBUG_PRINTVAR(width_, DEC);
  
  if(limitHLine(x, y, width_) < 0) {Serial.print("drawHLine error \n");return;}
 80a0308:	f002 bc60 	b.w	80a2bcc <_ZN5Print5printEPKc>
 80a030c:	080a5d94 	.word	0x080a5d94

080a0310 <_GLOBAL__sub_I__ZN15DFRobot_ST7687SC2Ev>:
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0310:	f002 b9d4 	b.w	80a26bc <HAL_Pin_Map>

080a0314 <_ZN21DFRobot_ST7687S_LatchD1Ev>:
  #define ST7687S_SPIEND()          SPI.endTransaction()
#endif



class DFRobot_ST7687S_Latch : public DFRobot_ST7687S
 80a0314:	4770      	bx	lr
	...

080a0318 <setup>:

DFRobot_ST7687S_Latch tft(pin_cs, pin_rs, pin_wr, pin_lck);
DFRobot_Display_Clock clk(&tft);

void setup(void)
{
 80a0318:	b513      	push	{r0, r1, r4, lr}
  Serial.begin(115200);
 80a031a:	f002 fe25 	bl	80a2f68 <_Z16_fetch_usbserialv>
 80a031e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80a0322:	f002 fe07 	bl	80a2f34 <_ZN9USBSerial5beginEl>
  setTime(18,0,0,19,4,2018);
 80a0326:	f240 73e2 	movw	r3, #2018	; 0x7e2
 80a032a:	2204      	movs	r2, #4
 80a032c:	e88d 000c 	stmia.w	sp, {r2, r3}
  tft.begin();
 80a0330:	4c1a      	ldr	r4, [pc, #104]	; (80a039c <setup+0x84>)
DFRobot_Display_Clock clk(&tft);

void setup(void)
{
  Serial.begin(115200);
  setTime(18,0,0,19,4,2018);
 80a0332:	2200      	movs	r2, #0
 80a0334:	4611      	mov	r1, r2
 80a0336:	2313      	movs	r3, #19
 80a0338:	2012      	movs	r0, #18
 80a033a:	f000 f9f1 	bl	80a0720 <_Z7setTimeiiiiii>
  tft.begin();
 80a033e:	4620      	mov	r0, r4
 80a0340:	f000 fa31 	bl	80a07a6 <_ZN21DFRobot_ST7687S_Latch5beginEv>
  tft.fillScreen(DISPLAY_BLACK);
 80a0344:	4620      	mov	r0, r4
  clk.setPointerLength(32, 40, 48);  //pointer length: hour, minute, second
 80a0346:	4c16      	ldr	r4, [pc, #88]	; (80a03a0 <setup+0x88>)
void setup(void)
{
  Serial.begin(115200);
  setTime(18,0,0,19,4,2018);
  tft.begin();
  tft.fillScreen(DISPLAY_BLACK);
 80a0348:	2100      	movs	r1, #0
 80a034a:	f7ff ff37 	bl	80a01bc <_ZN15DFRobot_ST7687S10fillScreenEt>
  clk.setPointerLength(32, 40, 48);  //pointer length: hour, minute, second
 80a034e:	4620      	mov	r0, r4
 80a0350:	2330      	movs	r3, #48	; 0x30
 80a0352:	2228      	movs	r2, #40	; 0x28
 80a0354:	2120      	movs	r1, #32
 80a0356:	f000 fd8f 	bl	80a0e78 <_ZN21DFRobot_Display_Clock16setPointerLengthEttt>
  clk.setPointerWidth(3, 2, 2);  //pointer width: hour, minute, second
 80a035a:	2302      	movs	r3, #2
 80a035c:	461a      	mov	r2, r3
 80a035e:	4620      	mov	r0, r4
 80a0360:	2103      	movs	r1, #3
 80a0362:	f000 fd90 	bl	80a0e86 <_ZN21DFRobot_Display_Clock15setPointerWidthEttt>
  clk.setPointerColor(DISPLAY_RED, DISPLAY_GREEN, DISPLAY_BLUE);  //pointer color: hour, min, second
 80a0366:	4620      	mov	r0, r4
 80a0368:	231f      	movs	r3, #31
 80a036a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80a036e:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 80a0372:	f000 fd7d 	bl	80a0e70 <_ZN21DFRobot_Display_Clock15setPointerColorEttt>
  clk.setClockDial(0, 0, 60);  //clock position x, y, clock radius
 80a0376:	2200      	movs	r2, #0
 80a0378:	233c      	movs	r3, #60	; 0x3c
 80a037a:	4611      	mov	r1, r2
 80a037c:	4620      	mov	r0, r4
 80a037e:	f000 fd73 	bl	80a0e68 <_ZN21DFRobot_Display_Clock12setClockDialEsst>
  clk.setDialColor(DISPLAY_WHITE, DISPLAY_BLACK);  //clock border volor, background
 80a0382:	4620      	mov	r0, r4
 80a0384:	2200      	movs	r2, #0
 80a0386:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a038a:	f000 fd79 	bl	80a0e80 <_ZN21DFRobot_Display_Clock12setDialColorEtt>
  clk.showDial();  //draw dial
 80a038e:	4620      	mov	r0, r4
}
 80a0390:	b002      	add	sp, #8
 80a0392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  clk.setPointerLength(32, 40, 48);  //pointer length: hour, minute, second
  clk.setPointerWidth(3, 2, 2);  //pointer width: hour, minute, second
  clk.setPointerColor(DISPLAY_RED, DISPLAY_GREEN, DISPLAY_BLUE);  //pointer color: hour, min, second
  clk.setClockDial(0, 0, 60);  //clock position x, y, clock radius
  clk.setDialColor(DISPLAY_WHITE, DISPLAY_BLACK);  //clock border volor, background
  clk.showDial();  //draw dial
 80a0396:	f000 bd7a 	b.w	80a0e8e <_ZN21DFRobot_Display_Clock8showDialEv>
 80a039a:	bf00      	nop
 80a039c:	200000a4 	.word	0x200000a4
 80a03a0:	20000078 	.word	0x20000078

080a03a4 <loop>:
}

void loop(void)
{
 80a03a4:	b570      	push	{r4, r5, r6, lr}
  clk.updateClock(hour(), minute(), second());
 80a03a6:	f000 f99d 	bl	80a06e4 <_Z4hourv>
 80a03aa:	4604      	mov	r4, r0
 80a03ac:	f000 f9a4 	bl	80a06f8 <_Z6minutev>
 80a03b0:	4605      	mov	r5, r0
 80a03b2:	f000 f9ab 	bl	80a070c <_Z6secondv>
 80a03b6:	b2ea      	uxtb	r2, r5
 80a03b8:	b2c3      	uxtb	r3, r0
 80a03ba:	b2e1      	uxtb	r1, r4
 80a03bc:	4802      	ldr	r0, [pc, #8]	; (80a03c8 <loop+0x24>)
}
 80a03be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  clk.showDial();  //draw dial
}

void loop(void)
{
  clk.updateClock(hour(), minute(), second());
 80a03c2:	f000 bedd 	b.w	80a1180 <_ZN21DFRobot_Display_Clock11updateClockEhhh>
 80a03c6:	bf00      	nop
 80a03c8:	20000078 	.word	0x20000078

080a03cc <_ZN21DFRobot_ST7687S_LatchD0Ev>:
 80a03cc:	b510      	push	{r4, lr}
 80a03ce:	4604      	mov	r4, r0
 80a03d0:	212c      	movs	r1, #44	; 0x2c
 80a03d2:	f003 f881 	bl	80a34d8 <_ZdlPvj>
 80a03d6:	4620      	mov	r0, r4
 80a03d8:	bd10      	pop	{r4, pc}
	...

080a03dc <_GLOBAL__sub_I_pin_cs>:
}
 80a03dc:	b513      	push	{r0, r1, r4, lr}
 80a03de:	f002 f96d 	bl	80a26bc <HAL_Pin_Map>
uint8_t pin_cs = 3, pin_rs = 5, pin_wr = 6, pin_lck = 7;
#else
uint8_t pin_cs = D3, pin_rs = D5, pin_wr = D6, pin_lck = D7;
#endif

DFRobot_ST7687S_Latch tft(pin_cs, pin_rs, pin_wr, pin_lck);
 80a03e2:	480c      	ldr	r0, [pc, #48]	; (80a0414 <_GLOBAL__sub_I_pin_cs+0x38>)
 80a03e4:	4c0c      	ldr	r4, [pc, #48]	; (80a0418 <_GLOBAL__sub_I_pin_cs+0x3c>)
 80a03e6:	7800      	ldrb	r0, [r0, #0]
 80a03e8:	4b0c      	ldr	r3, [pc, #48]	; (80a041c <_GLOBAL__sub_I_pin_cs+0x40>)
 80a03ea:	4a0d      	ldr	r2, [pc, #52]	; (80a0420 <_GLOBAL__sub_I_pin_cs+0x44>)
 80a03ec:	490d      	ldr	r1, [pc, #52]	; (80a0424 <_GLOBAL__sub_I_pin_cs+0x48>)
 80a03ee:	781b      	ldrb	r3, [r3, #0]
 80a03f0:	7812      	ldrb	r2, [r2, #0]
 80a03f2:	7809      	ldrb	r1, [r1, #0]
 80a03f4:	9000      	str	r0, [sp, #0]
 80a03f6:	4620      	mov	r0, r4
 80a03f8:	f000 fc24 	bl	80a0c44 <_ZN21DFRobot_ST7687S_LatchC1Ehhhh>
 80a03fc:	4a0a      	ldr	r2, [pc, #40]	; (80a0428 <_GLOBAL__sub_I_pin_cs+0x4c>)
 80a03fe:	490b      	ldr	r1, [pc, #44]	; (80a042c <_GLOBAL__sub_I_pin_cs+0x50>)
 80a0400:	4620      	mov	r0, r4
 80a0402:	f003 f85b 	bl	80a34bc <__aeabi_atexit>
DFRobot_Display_Clock clk(&tft);
 80a0406:	4621      	mov	r1, r4
 80a0408:	4809      	ldr	r0, [pc, #36]	; (80a0430 <_GLOBAL__sub_I_pin_cs+0x54>)
}

void loop(void)
{
  clk.updateClock(hour(), minute(), second());
}
 80a040a:	b002      	add	sp, #8
 80a040c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#else
uint8_t pin_cs = D3, pin_rs = D5, pin_wr = D6, pin_lck = D7;
#endif

DFRobot_ST7687S_Latch tft(pin_cs, pin_rs, pin_wr, pin_lck);
DFRobot_Display_Clock clk(&tft);
 80a0410:	f000 bd24 	b.w	80a0e5c <_ZN21DFRobot_Display_ClockC1EP15DFRobot_Display>
 80a0414:	20000002 	.word	0x20000002
 80a0418:	200000a4 	.word	0x200000a4
 80a041c:	20000003 	.word	0x20000003
 80a0420:	20000000 	.word	0x20000000
 80a0424:	20000001 	.word	0x20000001
 80a0428:	20000074 	.word	0x20000074
 80a042c:	080a0315 	.word	0x080a0315
 80a0430:	20000078 	.word	0x20000078

080a0434 <_GLOBAL__sub_I__Z18GT30L_getCharacterPhS_S_S_>:
 80a0434:	f002 b942 	b.w	80a26bc <HAL_Pin_Map>

080a0438 <_Z9breakTimelR12tmElements_t>:
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
 80a0438:	233c      	movs	r3, #60	; 0x3c
// leap year calulator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+Y)>0) && !((1970+Y)%4) && ( ((1970+Y)%100) || !((1970+Y)%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
void breakTime(time_t timeInput, tmElements_t &tm){
 80a043a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
 80a043e:	fbb0 f4f3 	udiv	r4, r0, r3
 80a0442:	fb03 0214 	mls	r2, r3, r4, r0
 80a0446:	700a      	strb	r2, [r1, #0]
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
 80a0448:	fbb4 f2f3 	udiv	r2, r4, r3
 80a044c:	fb03 4312 	mls	r3, r3, r2, r4
 80a0450:	704b      	strb	r3, [r1, #1]
  time /= 60; // now it is hours
  tm.Hour = time % 24;
 80a0452:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a0456:	fbb0 f3f3 	udiv	r3, r0, r3
 80a045a:	2418      	movs	r4, #24
 80a045c:	fbb3 f2f4 	udiv	r2, r3, r4
 80a0460:	fb04 3312 	mls	r3, r4, r2, r3
 80a0464:	708b      	strb	r3, [r1, #2]
  time /= 24; // now it is days
 80a0466:	4b3d      	ldr	r3, [pc, #244]	; (80a055c <_Z9breakTimelR12tmElements_t+0x124>)
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
 80a0468:	2207      	movs	r2, #7
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
 80a046a:	fbb0 f0f3 	udiv	r0, r0, r3
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
 80a046e:	1d03      	adds	r3, r0, #4
 80a0470:	fbb3 f2f2 	udiv	r2, r3, r2
 80a0474:	2400      	movs	r4, #0
 80a0476:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a047a:	1a9b      	subs	r3, r3, r2
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 80a047c:	f240 186d 	movw	r8, #365	; 0x16d
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
 80a0480:	4622      	mov	r2, r4
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
 80a0482:	3301      	adds	r3, #1
 80a0484:	70cb      	strb	r3, [r1, #3]
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 80a0486:	f04f 0e64 	mov.w	lr, #100	; 0x64
 80a048a:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 80a048e:	b2e6      	uxtb	r6, r4
 80a0490:	f206 73b2 	addw	r3, r6, #1970	; 0x7b2
 80a0494:	f013 0703 	ands.w	r7, r3, #3
 80a0498:	d10e      	bne.n	80a04b8 <_Z9breakTimelR12tmElements_t+0x80>
 80a049a:	fb93 f5fe 	sdiv	r5, r3, lr
 80a049e:	fb0e 3515 	mls	r5, lr, r5, r3
 80a04a2:	b965      	cbnz	r5, 80a04be <_Z9breakTimelR12tmElements_t+0x86>
 80a04a4:	fb93 f5fc 	sdiv	r5, r3, ip
 80a04a8:	fb0c 3515 	mls	r5, ip, r5, r3
 80a04ac:	2d00      	cmp	r5, #0
 80a04ae:	bf14      	ite	ne
 80a04b0:	4645      	movne	r5, r8
 80a04b2:	f44f 75b7 	moveq.w	r5, #366	; 0x16e
 80a04b6:	e004      	b.n	80a04c2 <_Z9breakTimelR12tmElements_t+0x8a>
 80a04b8:	f240 156d 	movw	r5, #365	; 0x16d
 80a04bc:	e001      	b.n	80a04c2 <_Z9breakTimelR12tmElements_t+0x8a>
 80a04be:	f44f 75b7 	mov.w	r5, #366	; 0x16e
 80a04c2:	442a      	add	r2, r5
 80a04c4:	4290      	cmp	r0, r2
 80a04c6:	f104 0401 	add.w	r4, r4, #1
 80a04ca:	d2e0      	bcs.n	80a048e <_Z9breakTimelR12tmElements_t+0x56>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
 80a04cc:	718e      	strb	r6, [r1, #6]
  
  days -= LEAP_YEAR(year) ? 366 : 365;
 80a04ce:	b997      	cbnz	r7, 80a04f6 <_Z9breakTimelR12tmElements_t+0xbe>
 80a04d0:	2564      	movs	r5, #100	; 0x64
 80a04d2:	fb93 f4f5 	sdiv	r4, r3, r5
 80a04d6:	fb05 3414 	mls	r4, r5, r4, r3
 80a04da:	b97c      	cbnz	r4, 80a04fc <_Z9breakTimelR12tmElements_t+0xc4>
 80a04dc:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80a04e0:	fb93 f4f5 	sdiv	r4, r3, r5
 80a04e4:	fb05 3414 	mls	r4, r5, r4, r3
 80a04e8:	2c00      	cmp	r4, #0
 80a04ea:	f240 146d 	movw	r4, #365	; 0x16d
 80a04ee:	bf08      	it	eq
 80a04f0:	f44f 74b7 	moveq.w	r4, #366	; 0x16e
 80a04f4:	e004      	b.n	80a0500 <_Z9breakTimelR12tmElements_t+0xc8>
 80a04f6:	f240 146d 	movw	r4, #365	; 0x16d
 80a04fa:	e001      	b.n	80a0500 <_Z9breakTimelR12tmElements_t+0xc8>
 80a04fc:	f44f 74b7 	mov.w	r4, #366	; 0x16e
  time  -= days; // now it is days in this year, starting at 0
 80a0500:	1b12      	subs	r2, r2, r4
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
 80a0502:	2664      	movs	r6, #100	; 0x64
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
 80a0504:	1a80      	subs	r0, r0, r2
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
 80a0506:	fb93 f2f6 	sdiv	r2, r3, r6
 80a050a:	f44f 74c8 	mov.w	r4, #400	; 0x190
 80a050e:	fb06 3612 	mls	r6, r6, r2, r3
 80a0512:	fb93 f2f4 	sdiv	r2, r3, r4
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
 80a0516:	f8df e048 	ldr.w	lr, [pc, #72]	; 80a0560 <_Z9breakTimelR12tmElements_t+0x128>
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
 80a051a:	fb04 3312 	mls	r3, r4, r2, r3
 80a051e:	2200      	movs	r2, #0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
 80a0520:	2a01      	cmp	r2, #1
 80a0522:	b2d5      	uxtb	r5, r2
 80a0524:	d106      	bne.n	80a0534 <_Z9breakTimelR12tmElements_t+0xfc>
      if (LEAP_YEAR(year)) {
 80a0526:	b947      	cbnz	r7, 80a053a <_Z9breakTimelR12tmElements_t+0x102>
 80a0528:	b94e      	cbnz	r6, 80a053e <_Z9breakTimelR12tmElements_t+0x106>
        monthLength=29;
 80a052a:	2b00      	cmp	r3, #0
 80a052c:	bf14      	ite	ne
 80a052e:	241c      	movne	r4, #28
 80a0530:	241d      	moveq	r4, #29
 80a0532:	e005      	b.n	80a0540 <_Z9breakTimelR12tmElements_t+0x108>
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
 80a0534:	f812 400e 	ldrb.w	r4, [r2, lr]
 80a0538:	e002      	b.n	80a0540 <_Z9breakTimelR12tmElements_t+0x108>
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
        monthLength=29;
      } else {
        monthLength=28;
 80a053a:	241c      	movs	r4, #28
 80a053c:	e000      	b.n	80a0540 <_Z9breakTimelR12tmElements_t+0x108>
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
        monthLength=29;
 80a053e:	241d      	movs	r4, #29
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
 80a0540:	4284      	cmp	r4, r0
 80a0542:	d805      	bhi.n	80a0550 <_Z9breakTimelR12tmElements_t+0x118>
 80a0544:	3201      	adds	r2, #1
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
 80a0546:	2a0c      	cmp	r2, #12
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
      time -= monthLength;
 80a0548:	eba0 0004 	sub.w	r0, r0, r4
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
 80a054c:	d1e8      	bne.n	80a0520 <_Z9breakTimelR12tmElements_t+0xe8>
 80a054e:	4615      	mov	r5, r2
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
 80a0550:	3501      	adds	r5, #1
  tm.Day = time + 1;     // day of month
 80a0552:	3001      	adds	r0, #1
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
 80a0554:	714d      	strb	r5, [r1, #5]
  tm.Day = time + 1;     // day of month
 80a0556:	7108      	strb	r0, [r1, #4]
 80a0558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a055c:	00015180 	.word	0x00015180
 80a0560:	080a5da6 	.word	0x080a5da6

080a0564 <_Z12refreshCachel>:

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
 80a0564:	b538      	push	{r3, r4, r5, lr}
  if (t != cacheTime) {
 80a0566:	4c05      	ldr	r4, [pc, #20]	; (80a057c <_Z12refreshCachel+0x18>)

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
 80a0568:	4605      	mov	r5, r0
  if (t != cacheTime) {
 80a056a:	6823      	ldr	r3, [r4, #0]
 80a056c:	4283      	cmp	r3, r0
 80a056e:	d003      	beq.n	80a0578 <_Z12refreshCachel+0x14>
    breakTime(t, tm); 
 80a0570:	4903      	ldr	r1, [pc, #12]	; (80a0580 <_Z12refreshCachel+0x1c>)
 80a0572:	f7ff ff61 	bl	80a0438 <_Z9breakTimelR12tmElements_t>
    cacheTime = t; 
 80a0576:	6025      	str	r5, [r4, #0]
 80a0578:	bd38      	pop	{r3, r4, r5, pc}
 80a057a:	bf00      	nop
 80a057c:	200000d0 	.word	0x200000d0
 80a0580:	200000d4 	.word	0x200000d4

080a0584 <_Z8makeTimeR12tmElements_t>:
  
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
 80a0584:	f240 71b2 	movw	r1, #1970	; 0x7b2
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
}

time_t makeTime(tmElements_t &tm){   
 80a0588:	b5f0      	push	{r4, r5, r6, r7, lr}
  
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
 80a058a:	4b2a      	ldr	r3, [pc, #168]	; (80a0634 <_Z8makeTimeR12tmElements_t+0xb0>)
 80a058c:	7982      	ldrb	r2, [r0, #6]
  for (i = 0; i < tm.Year; i++) {
    if (LEAP_YEAR(i)) {
 80a058e:	2564      	movs	r5, #100	; 0x64
  
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
 80a0590:	4353      	muls	r3, r2
  for (i = 0; i < tm.Year; i++) {
    if (LEAP_YEAR(i)) {
 80a0592:	f44f 76c8 	mov.w	r6, #400	; 0x190
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
  for (i = 0; i < tm.Year; i++) {
 80a0596:	f2a1 74b2 	subw	r4, r1, #1970	; 0x7b2
 80a059a:	42a2      	cmp	r2, r4
 80a059c:	dd11      	ble.n	80a05c2 <_Z8makeTimeR12tmElements_t+0x3e>
    if (LEAP_YEAR(i)) {
 80a059e:	078c      	lsls	r4, r1, #30
 80a05a0:	d10d      	bne.n	80a05be <_Z8makeTimeR12tmElements_t+0x3a>
 80a05a2:	fb91 f4f5 	sdiv	r4, r1, r5
 80a05a6:	fb05 1414 	mls	r4, r5, r4, r1
 80a05aa:	b924      	cbnz	r4, 80a05b6 <_Z8makeTimeR12tmElements_t+0x32>
 80a05ac:	fb91 f4f6 	sdiv	r4, r1, r6
 80a05b0:	fb06 1414 	mls	r4, r6, r4, r1
 80a05b4:	b91c      	cbnz	r4, 80a05be <_Z8makeTimeR12tmElements_t+0x3a>
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
 80a05b6:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80a05ba:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80a05be:	3101      	adds	r1, #1
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
  for (i = 0; i < tm.Year; i++) {
 80a05c0:	e7e9      	b.n	80a0596 <_Z8makeTimeR12tmElements_t+0x12>
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
 80a05c2:	f202 72b2 	addw	r2, r2, #1970	; 0x7b2
 80a05c6:	2464      	movs	r4, #100	; 0x64
 80a05c8:	fb92 f1f4 	sdiv	r1, r2, r4
 80a05cc:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80a05d0:	fb04 2411 	mls	r4, r4, r1, r2
 80a05d4:	fb92 f1f5 	sdiv	r1, r2, r5
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
 80a05d8:	7946      	ldrb	r6, [r0, #5]
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 80a05da:	4f17      	ldr	r7, [pc, #92]	; (80a0638 <_Z8makeTimeR12tmElements_t+0xb4>)
 80a05dc:	f8df e05c 	ldr.w	lr, [pc, #92]	; 80a063c <_Z8makeTimeR12tmElements_t+0xb8>
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
 80a05e0:	fb05 2511 	mls	r5, r5, r1, r2
 80a05e4:	2101      	movs	r1, #1
 80a05e6:	f002 0203 	and.w	r2, r2, #3
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
 80a05ea:	42b1      	cmp	r1, r6
 80a05ec:	da11      	bge.n	80a0612 <_Z8makeTimeR12tmElements_t+0x8e>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
 80a05ee:	2902      	cmp	r1, #2
 80a05f0:	d107      	bne.n	80a0602 <_Z8makeTimeR12tmElements_t+0x7e>
 80a05f2:	b932      	cbnz	r2, 80a0602 <_Z8makeTimeR12tmElements_t+0x7e>
 80a05f4:	b904      	cbnz	r4, 80a05f8 <_Z8makeTimeR12tmElements_t+0x74>
 80a05f6:	b925      	cbnz	r5, 80a0602 <_Z8makeTimeR12tmElements_t+0x7e>
      seconds += SECS_PER_DAY * 29;
 80a05f8:	f503 1318 	add.w	r3, r3, #2490368	; 0x260000
 80a05fc:	f503 536e 	add.w	r3, r3, #15232	; 0x3b80
 80a0600:	e005      	b.n	80a060e <_Z8makeTimeR12tmElements_t+0x8a>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 80a0602:	eb07 0c01 	add.w	ip, r7, r1
 80a0606:	f81c cc01 	ldrb.w	ip, [ip, #-1]
 80a060a:	fb0e 330c 	mla	r3, lr, ip, r3
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
 80a060e:	3101      	adds	r1, #1
 80a0610:	e7eb      	b.n	80a05ea <_Z8makeTimeR12tmElements_t+0x66>
  }
  seconds+= (tm.Day-1) * SECS_PER_DAY;
  seconds+= tm.Hour * SECS_PER_HOUR;
  seconds+= tm.Minute * SECS_PER_MIN;
  seconds+= tm.Second;
  return (time_t)seconds; 
 80a0612:	7844      	ldrb	r4, [r0, #1]
 80a0614:	213c      	movs	r1, #60	; 0x3c
 80a0616:	4361      	muls	r1, r4
 80a0618:	7882      	ldrb	r2, [r0, #2]
 80a061a:	f44f 6461 	mov.w	r4, #3600	; 0xe10
 80a061e:	fb04 1102 	mla	r1, r4, r2, r1
 80a0622:	7802      	ldrb	r2, [r0, #0]
 80a0624:	4411      	add	r1, r2
 80a0626:	7902      	ldrb	r2, [r0, #4]
 80a0628:	4804      	ldr	r0, [pc, #16]	; (80a063c <_Z8makeTimeR12tmElements_t+0xb8>)
 80a062a:	3a01      	subs	r2, #1
 80a062c:	fb00 1002 	mla	r0, r0, r2, r1
}
 80a0630:	4418      	add	r0, r3
 80a0632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0634:	01e13380 	.word	0x01e13380
 80a0638:	080a5da6 	.word	0x080a5da6
 80a063c:	00015180 	.word	0x00015180

080a0640 <_Z7setTimel>:
    }
  }  
  return (time_t)sysTime;
}

void setTime(time_t t) { 
 80a0640:	b508      	push	{r3, lr}
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
 80a0642:	4b07      	ldr	r3, [pc, #28]	; (80a0660 <_Z7setTimel+0x20>)
  nextSyncTime = (uint32_t)t + syncInterval;
  Status = timeSet;
 80a0644:	2202      	movs	r2, #2
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
 80a0646:	6018      	str	r0, [r3, #0]
  nextSyncTime = (uint32_t)t + syncInterval;
 80a0648:	4b06      	ldr	r3, [pc, #24]	; (80a0664 <_Z7setTimel+0x24>)
 80a064a:	681b      	ldr	r3, [r3, #0]
 80a064c:	4418      	add	r0, r3
 80a064e:	4b06      	ldr	r3, [pc, #24]	; (80a0668 <_Z7setTimel+0x28>)
 80a0650:	6018      	str	r0, [r3, #0]
  Status = timeSet;
 80a0652:	4b06      	ldr	r3, [pc, #24]	; (80a066c <_Z7setTimel+0x2c>)
 80a0654:	701a      	strb	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0656:	f002 f889 	bl	80a276c <HAL_Timer_Get_Milli_Seconds>
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
 80a065a:	4b05      	ldr	r3, [pc, #20]	; (80a0670 <_Z7setTimel+0x30>)
 80a065c:	6018      	str	r0, [r3, #0]
 80a065e:	bd08      	pop	{r3, pc}
 80a0660:	200000dc 	.word	0x200000dc
 80a0664:	20000004 	.word	0x20000004
 80a0668:	200000ec 	.word	0x200000ec
 80a066c:	200000e0 	.word	0x200000e0
 80a0670:	200000e8 	.word	0x200000e8

080a0674 <_Z3nowv>:
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
 80a0674:	b570      	push	{r4, r5, r6, lr}
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
 80a0676:	4d15      	ldr	r5, [pc, #84]	; (80a06cc <_Z3nowv+0x58>)
 80a0678:	4e15      	ldr	r6, [pc, #84]	; (80a06d0 <_Z3nowv+0x5c>)
 80a067a:	f002 f877 	bl	80a276c <HAL_Timer_Get_Milli_Seconds>
 80a067e:	682b      	ldr	r3, [r5, #0]
 80a0680:	4c13      	ldr	r4, [pc, #76]	; (80a06d0 <_Z3nowv+0x5c>)
 80a0682:	1ac0      	subs	r0, r0, r3
 80a0684:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80a0688:	d306      	bcc.n	80a0698 <_Z3nowv+0x24>
		// millis() and prevMillis are both unsigned ints thus the subtraction will always be the absolute value of the difference
    sysTime++;
 80a068a:	6832      	ldr	r2, [r6, #0]
    prevMillis += 1000;	
 80a068c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8

time_t now() {
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
		// millis() and prevMillis are both unsigned ints thus the subtraction will always be the absolute value of the difference
    sysTime++;
 80a0690:	3201      	adds	r2, #1
 80a0692:	6032      	str	r2, [r6, #0]
    prevMillis += 1000;	
 80a0694:	602b      	str	r3, [r5, #0]
#endif


time_t now() {
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
 80a0696:	e7f0      	b.n	80a067a <_Z3nowv+0x6>
    prevMillis += 1000;	
#ifdef TIME_DRIFT_INFO
    sysUnsyncedTime++; // this can be compared to the synced time to measure long term drift     
#endif
  }
  if (nextSyncTime <= sysTime) {
 80a0698:	4d0e      	ldr	r5, [pc, #56]	; (80a06d4 <_Z3nowv+0x60>)
 80a069a:	6823      	ldr	r3, [r4, #0]
 80a069c:	682a      	ldr	r2, [r5, #0]
 80a069e:	429a      	cmp	r2, r3
 80a06a0:	d812      	bhi.n	80a06c8 <_Z3nowv+0x54>
    if (getTimePtr != 0) {
 80a06a2:	4b0d      	ldr	r3, [pc, #52]	; (80a06d8 <_Z3nowv+0x64>)
 80a06a4:	681b      	ldr	r3, [r3, #0]
 80a06a6:	b17b      	cbz	r3, 80a06c8 <_Z3nowv+0x54>
      time_t t = getTimePtr();
 80a06a8:	4798      	blx	r3
      if (t != 0) {
 80a06aa:	b110      	cbz	r0, 80a06b2 <_Z3nowv+0x3e>
        setTime(t);
 80a06ac:	f7ff ffc8 	bl	80a0640 <_Z7setTimel>
 80a06b0:	e00a      	b.n	80a06c8 <_Z3nowv+0x54>
      } else {
        nextSyncTime = sysTime + syncInterval;
 80a06b2:	4b0a      	ldr	r3, [pc, #40]	; (80a06dc <_Z3nowv+0x68>)
 80a06b4:	6822      	ldr	r2, [r4, #0]
 80a06b6:	681b      	ldr	r3, [r3, #0]
 80a06b8:	4413      	add	r3, r2
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
 80a06ba:	4a09      	ldr	r2, [pc, #36]	; (80a06e0 <_Z3nowv+0x6c>)
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
 80a06bc:	602b      	str	r3, [r5, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
 80a06be:	7813      	ldrb	r3, [r2, #0]
 80a06c0:	3300      	adds	r3, #0
 80a06c2:	bf18      	it	ne
 80a06c4:	2301      	movne	r3, #1
 80a06c6:	7013      	strb	r3, [r2, #0]
      }
    }
  }  
  return (time_t)sysTime;
}
 80a06c8:	6820      	ldr	r0, [r4, #0]
 80a06ca:	bd70      	pop	{r4, r5, r6, pc}
 80a06cc:	200000e8 	.word	0x200000e8
 80a06d0:	200000dc 	.word	0x200000dc
 80a06d4:	200000ec 	.word	0x200000ec
 80a06d8:	200000e4 	.word	0x200000e4
 80a06dc:	20000004 	.word	0x20000004
 80a06e0:	200000e0 	.word	0x200000e0

080a06e4 <_Z4hourv>:
    breakTime(t, tm); 
    cacheTime = t; 
  }
}

int hour() { // the hour now 
 80a06e4:	b508      	push	{r3, lr}
  return hour(now()); 
 80a06e6:	f7ff ffc5 	bl	80a0674 <_Z3nowv>
}

int hour(time_t t) { // the hour for the given time
  refreshCache(t);
 80a06ea:	f7ff ff3b 	bl	80a0564 <_Z12refreshCachel>
  }
}

int hour() { // the hour now 
  return hour(now()); 
}
 80a06ee:	4b01      	ldr	r3, [pc, #4]	; (80a06f4 <_Z4hourv+0x10>)
 80a06f0:	7898      	ldrb	r0, [r3, #2]
 80a06f2:	bd08      	pop	{r3, pc}
 80a06f4:	200000d4 	.word	0x200000d4

080a06f8 <_Z6minutev>:

uint8_t isPM(time_t t) { // returns true if PM
  return (hour(t) >= 12); 
}

int minute() {
 80a06f8:	b508      	push	{r3, lr}
  return minute(now()); 
 80a06fa:	f7ff ffbb 	bl	80a0674 <_Z3nowv>
}

int minute(time_t t) { // the minute for the given time
  refreshCache(t);
 80a06fe:	f7ff ff31 	bl	80a0564 <_Z12refreshCachel>
  return (hour(t) >= 12); 
}

int minute() {
  return minute(now()); 
}
 80a0702:	4b01      	ldr	r3, [pc, #4]	; (80a0708 <_Z6minutev+0x10>)
 80a0704:	7858      	ldrb	r0, [r3, #1]
 80a0706:	bd08      	pop	{r3, pc}
 80a0708:	200000d4 	.word	0x200000d4

080a070c <_Z6secondv>:
int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
}

int second() {
 80a070c:	b508      	push	{r3, lr}
  return second(now()); 
 80a070e:	f7ff ffb1 	bl	80a0674 <_Z3nowv>
}

int second(time_t t) {  // the second for the given time
  refreshCache(t);
 80a0712:	f7ff ff27 	bl	80a0564 <_Z12refreshCachel>
  return tm.Minute;  
}

int second() {
  return second(now()); 
}
 80a0716:	4b01      	ldr	r3, [pc, #4]	; (80a071c <_Z6secondv+0x10>)
 80a0718:	7818      	ldrb	r0, [r3, #0]
 80a071a:	bd08      	pop	{r3, pc}
 80a071c:	200000d4 	.word	0x200000d4

080a0720 <_Z7setTimeiiiiii>:
  nextSyncTime = (uint32_t)t + syncInterval;
  Status = timeSet;
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
} 

void setTime(int hr,int min,int sec,int dy, int mnth, int yr){
 80a0720:	b570      	push	{r4, r5, r6, lr}
 80a0722:	4605      	mov	r5, r0
 80a0724:	9c05      	ldr	r4, [sp, #20]
 //it is converted to years since 1970
  if( yr > 99)
      yr = yr - 1970;
  else
      yr += 30;  
  tm.Year = yr;
 80a0726:	4809      	ldr	r0, [pc, #36]	; (80a074c <_Z7setTimeiiiiii+0x2c>)
} 

void setTime(int hr,int min,int sec,int dy, int mnth, int yr){
 // year can be given as full four digit year or two digts (2010 or 10 for 2010);  
 //it is converted to years since 1970
  if( yr > 99)
 80a0728:	2c63      	cmp	r4, #99	; 0x63
  nextSyncTime = (uint32_t)t + syncInterval;
  Status = timeSet;
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
} 

void setTime(int hr,int min,int sec,int dy, int mnth, int yr){
 80a072a:	9e04      	ldr	r6, [sp, #16]
 // year can be given as full four digit year or two digts (2010 or 10 for 2010);  
 //it is converted to years since 1970
  if( yr > 99)
      yr = yr - 1970;
 80a072c:	bfcc      	ite	gt
 80a072e:	f2a4 74b2 	subwgt	r4, r4, #1970	; 0x7b2
  else
      yr += 30;  
 80a0732:	341e      	addle	r4, #30
  tm.Year = yr;
 80a0734:	7184      	strb	r4, [r0, #6]
  tm.Month = mnth;
 80a0736:	7146      	strb	r6, [r0, #5]
  tm.Day = dy;
  tm.Hour = hr;
 80a0738:	7085      	strb	r5, [r0, #2]
      yr = yr - 1970;
  else
      yr += 30;  
  tm.Year = yr;
  tm.Month = mnth;
  tm.Day = dy;
 80a073a:	7103      	strb	r3, [r0, #4]
  tm.Hour = hr;
  tm.Minute = min;
 80a073c:	7041      	strb	r1, [r0, #1]
  tm.Second = sec;
 80a073e:	7002      	strb	r2, [r0, #0]
  setTime(makeTime(tm));
 80a0740:	f7ff ff20 	bl	80a0584 <_Z8makeTimeR12tmElements_t>
}
 80a0744:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  tm.Month = mnth;
  tm.Day = dy;
  tm.Hour = hr;
  tm.Minute = min;
  tm.Second = sec;
  setTime(makeTime(tm));
 80a0748:	f7ff bf7a 	b.w	80a0640 <_Z7setTimel>
 80a074c:	200000d4 	.word	0x200000d4

080a0750 <_GLOBAL__sub_I__Z12refreshCachel>:
 80a0750:	f001 bfb4 	b.w	80a26bc <HAL_Pin_Map>

080a0754 <_ZL13hc595_delayUSv>:

static uint8_t        HC595_pin_rck = 0;


static void hc595_delayUS(void)
{
 80a0754:	4770      	bx	lr

080a0756 <_ZN21DFRobot_ST7687S_Latch16writeRepeatPixelEttt>:
  ST7687S_SPIEND();
}


void DFRobot_ST7687S_Latch::writeRepeatPixel(uint16_t color, uint16_t count, uint16_t repeatCount)
{
 80a0756:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint8_t       colorBuf[2] = {color >> 8, color};
  uint32_t      i = 0;
  for(i = 0; i < repeatCount * count; i ++) {
 80a0758:	fb02 f703 	mul.w	r7, r2, r3
  ST7687S_SPIEND();
}


void DFRobot_ST7687S_Latch::writeRepeatPixel(uint16_t color, uint16_t count, uint16_t repeatCount)
{
 80a075c:	4605      	mov	r5, r0
  uint8_t       colorBuf[2] = {color >> 8, color};
 80a075e:	1208      	asrs	r0, r1, #8
 80a0760:	f88d 0004 	strb.w	r0, [sp, #4]
 80a0764:	f88d 1005 	strb.w	r1, [sp, #5]
  uint32_t      i = 0;
  for(i = 0; i < repeatCount * count; i ++) {
 80a0768:	2400      	movs	r4, #0
 80a076a:	42bc      	cmp	r4, r7
 80a076c:	d007      	beq.n	80a077e <_ZN21DFRobot_ST7687S_Latch16writeRepeatPixelEttt+0x28>
    writeDatBytes(colorBuf, 2);
 80a076e:	682a      	ldr	r2, [r5, #0]
 80a0770:	a901      	add	r1, sp, #4
 80a0772:	6dd6      	ldr	r6, [r2, #92]	; 0x5c
 80a0774:	4628      	mov	r0, r5
 80a0776:	2202      	movs	r2, #2
 80a0778:	47b0      	blx	r6

void DFRobot_ST7687S_Latch::writeRepeatPixel(uint16_t color, uint16_t count, uint16_t repeatCount)
{
  uint8_t       colorBuf[2] = {color >> 8, color};
  uint32_t      i = 0;
  for(i = 0; i < repeatCount * count; i ++) {
 80a077a:	3401      	adds	r4, #1
 80a077c:	e7f5      	b.n	80a076a <_ZN21DFRobot_ST7687S_Latch16writeRepeatPixelEttt+0x14>
    writeDatBytes(colorBuf, 2);
  }
}
 80a077e:	b003      	add	sp, #12
 80a0780:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080a0784 <_ZL14hc595_writeRCKh>:
}


static void hc595_writeRCK(uint8_t value)
{
  digitalWrite(HC595_pin_rck, value);
 80a0784:	4b02      	ldr	r3, [pc, #8]	; (80a0790 <_ZL14hc595_writeRCKh+0xc>)
 80a0786:	4601      	mov	r1, r0
 80a0788:	7818      	ldrb	r0, [r3, #0]
 80a078a:	f002 be06 	b.w	80a339a <digitalWrite>
 80a078e:	bf00      	nop
 80a0790:	200000f0 	.word	0x200000f0

080a0794 <_ZL14hc595_writeDath>:
  //delayMicroseconds(1);
}


static void hc595_writeDat(uint8_t dat)
{
 80a0794:	b510      	push	{r4, lr}
 80a0796:	4604      	mov	r4, r0
  SPI.transfer(dat);
 80a0798:	f002 fe18 	bl	80a33cc <_ZN8particle7globals11instanceSpiEv>
 80a079c:	4621      	mov	r1, r4
}
 80a079e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}


static void hc595_writeDat(uint8_t dat)
{
  SPI.transfer(dat);
 80a07a2:	f002 b9af 	b.w	80a2b04 <_ZN8SPIClass8transferEh>

080a07a6 <_ZN21DFRobot_ST7687S_Latch5beginEv>:
  digitalWrite(pin_wr, 1);
}


int16_t DFRobot_ST7687S_Latch::begin(void)
{
 80a07a6:	b510      	push	{r4, lr}
 80a07a8:	4604      	mov	r4, r0
  _DEBUG_PRINT("\nST7687S begin");
  delay(120);
 80a07aa:	2078      	movs	r0, #120	; 0x78
 80a07ac:	f002 fa4c 	bl	80a2c48 <delay>

  writeCmd(0xd7);
 80a07b0:	6823      	ldr	r3, [r4, #0]
 80a07b2:	4620      	mov	r0, r4
 80a07b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a07b6:	21d7      	movs	r1, #215	; 0xd7
 80a07b8:	4798      	blx	r3
  writeDat(0x9f);
 80a07ba:	6823      	ldr	r3, [r4, #0]
 80a07bc:	4620      	mov	r0, r4
 80a07be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a07c0:	219f      	movs	r1, #159	; 0x9f
 80a07c2:	4798      	blx	r3

  writeCmd(0xE0);
 80a07c4:	6823      	ldr	r3, [r4, #0]
 80a07c6:	4620      	mov	r0, r4
 80a07c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a07ca:	21e0      	movs	r1, #224	; 0xe0
 80a07cc:	4798      	blx	r3
  writeDat(0x00);
 80a07ce:	6823      	ldr	r3, [r4, #0]
 80a07d0:	2100      	movs	r1, #0
 80a07d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a07d4:	4620      	mov	r0, r4
 80a07d6:	4798      	blx	r3
  delay(10); 
 80a07d8:	200a      	movs	r0, #10
 80a07da:	f002 fa35 	bl	80a2c48 <delay>

  writeCmd(0xFA);
 80a07de:	6823      	ldr	r3, [r4, #0]
 80a07e0:	4620      	mov	r0, r4
 80a07e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a07e4:	21fa      	movs	r1, #250	; 0xfa
 80a07e6:	4798      	blx	r3
  writeDat(0x01);
 80a07e8:	6823      	ldr	r3, [r4, #0]
 80a07ea:	2101      	movs	r1, #1
 80a07ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a07ee:	4620      	mov	r0, r4
 80a07f0:	4798      	blx	r3
  delay(20); 
 80a07f2:	2014      	movs	r0, #20
 80a07f4:	f002 fa28 	bl	80a2c48 <delay>

  writeCmd(0xE3);
 80a07f8:	6823      	ldr	r3, [r4, #0]
 80a07fa:	21e3      	movs	r1, #227	; 0xe3
 80a07fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a07fe:	4620      	mov	r0, r4
 80a0800:	4798      	blx	r3
  delay(20);
 80a0802:	2014      	movs	r0, #20
 80a0804:	f002 fa20 	bl	80a2c48 <delay>
  writeCmd(0xE1);	
 80a0808:	6823      	ldr	r3, [r4, #0]
 80a080a:	4620      	mov	r0, r4
 80a080c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a080e:	21e1      	movs	r1, #225	; 0xe1
 80a0810:	4798      	blx	r3

  writeCmd(0x28);
 80a0812:	6823      	ldr	r3, [r4, #0]
 80a0814:	4620      	mov	r0, r4
 80a0816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0818:	2128      	movs	r1, #40	; 0x28
 80a081a:	4798      	blx	r3
  writeCmd(0x11);	
 80a081c:	6823      	ldr	r3, [r4, #0]
 80a081e:	2111      	movs	r1, #17
 80a0820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0822:	4620      	mov	r0, r4
 80a0824:	4798      	blx	r3
  delay(30);
 80a0826:	201e      	movs	r0, #30
 80a0828:	f002 fa0e 	bl	80a2c48 <delay>
  writeCmd(0xc0); 
 80a082c:	6823      	ldr	r3, [r4, #0]
 80a082e:	4620      	mov	r0, r4
 80a0830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0832:	21c0      	movs	r1, #192	; 0xc0
 80a0834:	4798      	blx	r3
  writeDat(0x17);  //ctrL=0x1b 080416 5PCS 0X1E; 8PCS 0X2A
 80a0836:	6823      	ldr	r3, [r4, #0]
 80a0838:	4620      	mov	r0, r4
 80a083a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a083c:	2117      	movs	r1, #23
 80a083e:	4798      	blx	r3
  writeDat(0x01);
 80a0840:	6823      	ldr	r3, [r4, #0]
 80a0842:	4620      	mov	r0, r4
 80a0844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0846:	2101      	movs	r1, #1
 80a0848:	4798      	blx	r3

  writeCmd(0x25);
 80a084a:	6823      	ldr	r3, [r4, #0]
 80a084c:	4620      	mov	r0, r4
 80a084e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0850:	2125      	movs	r1, #37	; 0x25
 80a0852:	4798      	blx	r3
  writeDat(0x1E);
 80a0854:	6823      	ldr	r3, [r4, #0]
 80a0856:	4620      	mov	r0, r4
 80a0858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a085a:	211e      	movs	r1, #30
 80a085c:	4798      	blx	r3
  writeCmd(0xC3);
 80a085e:	6823      	ldr	r3, [r4, #0]
 80a0860:	4620      	mov	r0, r4
 80a0862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0864:	21c3      	movs	r1, #195	; 0xc3
 80a0866:	4798      	blx	r3
  writeDat(0x03);
 80a0868:	6823      	ldr	r3, [r4, #0]
 80a086a:	4620      	mov	r0, r4
 80a086c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a086e:	2103      	movs	r1, #3
 80a0870:	4798      	blx	r3

  writeCmd(0xC4);
 80a0872:	6823      	ldr	r3, [r4, #0]
 80a0874:	4620      	mov	r0, r4
 80a0876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0878:	21c4      	movs	r1, #196	; 0xc4
 80a087a:	4798      	blx	r3
  writeDat(0x07);
 80a087c:	6823      	ldr	r3, [r4, #0]
 80a087e:	4620      	mov	r0, r4
 80a0880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0882:	2107      	movs	r1, #7
 80a0884:	4798      	blx	r3

  writeCmd(0xC5);
 80a0886:	6823      	ldr	r3, [r4, #0]
 80a0888:	4620      	mov	r0, r4
 80a088a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a088c:	21c5      	movs	r1, #197	; 0xc5
 80a088e:	4798      	blx	r3
  writeDat(0x01);
 80a0890:	6823      	ldr	r3, [r4, #0]
 80a0892:	4620      	mov	r0, r4
 80a0894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0896:	2101      	movs	r1, #1
 80a0898:	4798      	blx	r3

  writeCmd(0xCB);
 80a089a:	6823      	ldr	r3, [r4, #0]
 80a089c:	4620      	mov	r0, r4
 80a089e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a08a0:	21cb      	movs	r1, #203	; 0xcb
 80a08a2:	4798      	blx	r3
  writeDat(0x01);
 80a08a4:	6823      	ldr	r3, [r4, #0]
 80a08a6:	4620      	mov	r0, r4
 80a08a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a08aa:	2101      	movs	r1, #1
 80a08ac:	4798      	blx	r3

  writeCmd(0xB7);
 80a08ae:	6823      	ldr	r3, [r4, #0]
 80a08b0:	4620      	mov	r0, r4
 80a08b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a08b4:	21b7      	movs	r1, #183	; 0xb7
 80a08b6:	4798      	blx	r3
  writeDat(0x00);
 80a08b8:	6823      	ldr	r3, [r4, #0]
 80a08ba:	4620      	mov	r0, r4
 80a08bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a08be:	2100      	movs	r1, #0
 80a08c0:	4798      	blx	r3

  writeCmd(0xD0);
 80a08c2:	6823      	ldr	r3, [r4, #0]
 80a08c4:	4620      	mov	r0, r4
 80a08c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a08c8:	21d0      	movs	r1, #208	; 0xd0
 80a08ca:	4798      	blx	r3
  writeDat(0x1d);
 80a08cc:	6823      	ldr	r3, [r4, #0]
 80a08ce:	4620      	mov	r0, r4
 80a08d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a08d2:	211d      	movs	r1, #29
 80a08d4:	4798      	blx	r3
  writeCmd(0xB5);
 80a08d6:	6823      	ldr	r3, [r4, #0]
 80a08d8:	4620      	mov	r0, r4
 80a08da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a08dc:	21b5      	movs	r1, #181	; 0xb5
 80a08de:	4798      	blx	r3
  writeDat(0x89);
 80a08e0:	6823      	ldr	r3, [r4, #0]
 80a08e2:	4620      	mov	r0, r4
 80a08e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a08e6:	2189      	movs	r1, #137	; 0x89
 80a08e8:	4798      	blx	r3

  writeCmd(0xBD);
 80a08ea:	6823      	ldr	r3, [r4, #0]
 80a08ec:	4620      	mov	r0, r4
 80a08ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a08f0:	21bd      	movs	r1, #189	; 0xbd
 80a08f2:	4798      	blx	r3
  writeDat(0x02); 
 80a08f4:	6823      	ldr	r3, [r4, #0]
 80a08f6:	4620      	mov	r0, r4
 80a08f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a08fa:	2102      	movs	r1, #2
 80a08fc:	4798      	blx	r3

  writeCmd(0xF0);	
 80a08fe:	6823      	ldr	r3, [r4, #0]
 80a0900:	4620      	mov	r0, r4
 80a0902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0904:	21f0      	movs	r1, #240	; 0xf0
 80a0906:	4798      	blx	r3
  writeDat(0x07);
 80a0908:	6823      	ldr	r3, [r4, #0]
 80a090a:	4620      	mov	r0, r4
 80a090c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a090e:	2107      	movs	r1, #7
 80a0910:	4798      	blx	r3
  writeDat(0x0C);
 80a0912:	6823      	ldr	r3, [r4, #0]
 80a0914:	4620      	mov	r0, r4
 80a0916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0918:	210c      	movs	r1, #12
 80a091a:	4798      	blx	r3
  writeDat(0x0C);
 80a091c:	6823      	ldr	r3, [r4, #0]
 80a091e:	4620      	mov	r0, r4
 80a0920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0922:	210c      	movs	r1, #12
 80a0924:	4798      	blx	r3
  writeDat(0x12);
 80a0926:	6823      	ldr	r3, [r4, #0]
 80a0928:	4620      	mov	r0, r4
 80a092a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a092c:	2112      	movs	r1, #18
 80a092e:	4798      	blx	r3

  writeCmd(0xF4);	
 80a0930:	6823      	ldr	r3, [r4, #0]
 80a0932:	4620      	mov	r0, r4
 80a0934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0936:	21f4      	movs	r1, #244	; 0xf4
 80a0938:	4798      	blx	r3
  writeDat(0x33);
 80a093a:	6823      	ldr	r3, [r4, #0]
 80a093c:	4620      	mov	r0, r4
 80a093e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0940:	2133      	movs	r1, #51	; 0x33
 80a0942:	4798      	blx	r3
  writeDat(0x33);
 80a0944:	6823      	ldr	r3, [r4, #0]
 80a0946:	4620      	mov	r0, r4
 80a0948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a094a:	2133      	movs	r1, #51	; 0x33
 80a094c:	4798      	blx	r3
  writeDat(0x33);
 80a094e:	6823      	ldr	r3, [r4, #0]
 80a0950:	4620      	mov	r0, r4
 80a0952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0954:	2133      	movs	r1, #51	; 0x33
 80a0956:	4798      	blx	r3
  writeDat(0x00);
 80a0958:	6823      	ldr	r3, [r4, #0]
 80a095a:	4620      	mov	r0, r4
 80a095c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a095e:	2100      	movs	r1, #0
 80a0960:	4798      	blx	r3
  writeDat(0x33);
 80a0962:	6823      	ldr	r3, [r4, #0]
 80a0964:	4620      	mov	r0, r4
 80a0966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0968:	2133      	movs	r1, #51	; 0x33
 80a096a:	4798      	blx	r3
  writeDat(0x66);
 80a096c:	6823      	ldr	r3, [r4, #0]
 80a096e:	4620      	mov	r0, r4
 80a0970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0972:	2166      	movs	r1, #102	; 0x66
 80a0974:	4798      	blx	r3
  writeDat(0x66);
 80a0976:	6823      	ldr	r3, [r4, #0]
 80a0978:	4620      	mov	r0, r4
 80a097a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a097c:	2166      	movs	r1, #102	; 0x66
 80a097e:	4798      	blx	r3
  writeDat(0x66);
 80a0980:	6823      	ldr	r3, [r4, #0]
 80a0982:	4620      	mov	r0, r4
 80a0984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0986:	2166      	movs	r1, #102	; 0x66
 80a0988:	4798      	blx	r3

  writeCmd(0x20);
 80a098a:	6823      	ldr	r3, [r4, #0]
 80a098c:	4620      	mov	r0, r4
 80a098e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0990:	2120      	movs	r1, #32
 80a0992:	4798      	blx	r3
  writeCmd(0x2A);
 80a0994:	6823      	ldr	r3, [r4, #0]
 80a0996:	4620      	mov	r0, r4
 80a0998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a099a:	212a      	movs	r1, #42	; 0x2a
 80a099c:	4798      	blx	r3
  writeDat(0x00);
 80a099e:	6823      	ldr	r3, [r4, #0]
 80a09a0:	4620      	mov	r0, r4
 80a09a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a09a4:	2100      	movs	r1, #0
 80a09a6:	4798      	blx	r3
  writeDat(0x7F);
 80a09a8:	6823      	ldr	r3, [r4, #0]
 80a09aa:	4620      	mov	r0, r4
 80a09ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a09ae:	217f      	movs	r1, #127	; 0x7f
 80a09b0:	4798      	blx	r3

  writeCmd(0x2B);
 80a09b2:	6823      	ldr	r3, [r4, #0]
 80a09b4:	4620      	mov	r0, r4
 80a09b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a09b8:	212b      	movs	r1, #43	; 0x2b
 80a09ba:	4798      	blx	r3
  writeDat(0x00);
 80a09bc:	6823      	ldr	r3, [r4, #0]
 80a09be:	4620      	mov	r0, r4
 80a09c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a09c2:	2100      	movs	r1, #0
 80a09c4:	4798      	blx	r3
  writeDat(0x7f);
 80a09c6:	6823      	ldr	r3, [r4, #0]
 80a09c8:	4620      	mov	r0, r4
 80a09ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a09cc:	217f      	movs	r1, #127	; 0x7f
 80a09ce:	4798      	blx	r3

  writeCmd(0x3A);
 80a09d0:	6823      	ldr	r3, [r4, #0]
 80a09d2:	4620      	mov	r0, r4
 80a09d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a09d6:	213a      	movs	r1, #58	; 0x3a
 80a09d8:	4798      	blx	r3
  writeDat(0x05);
 80a09da:	6823      	ldr	r3, [r4, #0]
 80a09dc:	4620      	mov	r0, r4
 80a09de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a09e0:	2105      	movs	r1, #5
 80a09e2:	4798      	blx	r3

  writeCmd(0x36);
 80a09e4:	6823      	ldr	r3, [r4, #0]
 80a09e6:	4620      	mov	r0, r4
 80a09e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a09ea:	2136      	movs	r1, #54	; 0x36
 80a09ec:	4798      	blx	r3
  writeDat(0x80); //0xc8
 80a09ee:	6823      	ldr	r3, [r4, #0]
 80a09f0:	4620      	mov	r0, r4
 80a09f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a09f4:	2180      	movs	r1, #128	; 0x80
 80a09f6:	4798      	blx	r3

  writeCmd(0xB0);
 80a09f8:	6823      	ldr	r3, [r4, #0]
 80a09fa:	4620      	mov	r0, r4
 80a09fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a09fe:	21b0      	movs	r1, #176	; 0xb0
 80a0a00:	4798      	blx	r3
  writeDat(0x7F);
 80a0a02:	6823      	ldr	r3, [r4, #0]
 80a0a04:	4620      	mov	r0, r4
 80a0a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0a08:	217f      	movs	r1, #127	; 0x7f
 80a0a0a:	4798      	blx	r3

  writeCmd(0x29);
 80a0a0c:	6823      	ldr	r3, [r4, #0]
 80a0a0e:	4620      	mov	r0, r4
 80a0a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0a12:	2129      	movs	r1, #41	; 0x29
 80a0a14:	4798      	blx	r3
  ////////	
  writeCmd(0xF9);	
 80a0a16:	6823      	ldr	r3, [r4, #0]
 80a0a18:	4620      	mov	r0, r4
 80a0a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0a1c:	21f9      	movs	r1, #249	; 0xf9
 80a0a1e:	4798      	blx	r3
  writeDat(0x00);
 80a0a20:	6823      	ldr	r3, [r4, #0]
 80a0a22:	4620      	mov	r0, r4
 80a0a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0a26:	2100      	movs	r1, #0
 80a0a28:	4798      	blx	r3
  writeDat(0x02);
 80a0a2a:	6823      	ldr	r3, [r4, #0]
 80a0a2c:	4620      	mov	r0, r4
 80a0a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0a30:	2102      	movs	r1, #2
 80a0a32:	4798      	blx	r3
  writeDat(0x04);
 80a0a34:	6823      	ldr	r3, [r4, #0]
 80a0a36:	4620      	mov	r0, r4
 80a0a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0a3a:	2104      	movs	r1, #4
 80a0a3c:	4798      	blx	r3
  writeDat(0x06);
 80a0a3e:	6823      	ldr	r3, [r4, #0]
 80a0a40:	4620      	mov	r0, r4
 80a0a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0a44:	2106      	movs	r1, #6
 80a0a46:	4798      	blx	r3
  writeDat(0x08);
 80a0a48:	6823      	ldr	r3, [r4, #0]
 80a0a4a:	4620      	mov	r0, r4
 80a0a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0a4e:	2108      	movs	r1, #8
 80a0a50:	4798      	blx	r3
  writeDat(0x0a);
 80a0a52:	6823      	ldr	r3, [r4, #0]
 80a0a54:	4620      	mov	r0, r4
 80a0a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0a58:	210a      	movs	r1, #10
 80a0a5a:	4798      	blx	r3
  writeDat(0x0c);
 80a0a5c:	6823      	ldr	r3, [r4, #0]
 80a0a5e:	4620      	mov	r0, r4
 80a0a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0a62:	210c      	movs	r1, #12
 80a0a64:	4798      	blx	r3
  writeDat(0x0e);
 80a0a66:	6823      	ldr	r3, [r4, #0]
 80a0a68:	4620      	mov	r0, r4
 80a0a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0a6c:	210e      	movs	r1, #14
 80a0a6e:	4798      	blx	r3
  writeDat(0x10);
 80a0a70:	6823      	ldr	r3, [r4, #0]
 80a0a72:	4620      	mov	r0, r4
 80a0a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0a76:	2110      	movs	r1, #16
 80a0a78:	4798      	blx	r3
  writeDat(0x12);
 80a0a7a:	6823      	ldr	r3, [r4, #0]
 80a0a7c:	4620      	mov	r0, r4
 80a0a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0a80:	2112      	movs	r1, #18
 80a0a82:	4798      	blx	r3
  writeDat(0x14);
 80a0a84:	6823      	ldr	r3, [r4, #0]
 80a0a86:	4620      	mov	r0, r4
 80a0a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0a8a:	2114      	movs	r1, #20
 80a0a8c:	4798      	blx	r3
  writeDat(0x16);
 80a0a8e:	6823      	ldr	r3, [r4, #0]
 80a0a90:	4620      	mov	r0, r4
 80a0a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0a94:	2116      	movs	r1, #22
 80a0a96:	4798      	blx	r3
  writeDat(0x18);
 80a0a98:	6823      	ldr	r3, [r4, #0]
 80a0a9a:	4620      	mov	r0, r4
 80a0a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0a9e:	2118      	movs	r1, #24
 80a0aa0:	4798      	blx	r3
  writeDat(0x1A);
 80a0aa2:	6823      	ldr	r3, [r4, #0]
 80a0aa4:	4620      	mov	r0, r4
 80a0aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0aa8:	211a      	movs	r1, #26
 80a0aaa:	4798      	blx	r3
  writeDat(0x1C);
 80a0aac:	6823      	ldr	r3, [r4, #0]
 80a0aae:	4620      	mov	r0, r4
 80a0ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0ab2:	211c      	movs	r1, #28
 80a0ab4:	4798      	blx	r3
  writeDat(0x1E);
 80a0ab6:	6823      	ldr	r3, [r4, #0]
 80a0ab8:	4620      	mov	r0, r4
 80a0aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0abc:	211e      	movs	r1, #30
 80a0abe:	4798      	blx	r3

  writeCmd(0x29);
 80a0ac0:	6823      	ldr	r3, [r4, #0]
 80a0ac2:	4620      	mov	r0, r4
 80a0ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0ac6:	2129      	movs	r1, #41	; 0x29
 80a0ac8:	4798      	blx	r3
  return BEGIN_WAR_NOTEST;
}
 80a0aca:	2001      	movs	r0, #1
 80a0acc:	bd10      	pop	{r4, pc}

080a0ace <_ZN21DFRobot_ST7687S_Latch9drawPixelEsst>:


void DFRobot_ST7687S_Latch::drawPixel(int16_t x, int16_t y, uint16_t color)
{
 80a0ace:	b530      	push	{r4, r5, lr}
 80a0ad0:	b085      	sub	sp, #20
  uint8_t colorBuf[2] = {color >> 8, color};
 80a0ad2:	121d      	asrs	r5, r3, #8
 80a0ad4:	f88d 300d 	strb.w	r3, [sp, #13]
      return 0;
    }

    int16_t limitPixel(int16_t &x, int16_t &y)
    {
      x += cursorX;
 80a0ad8:	8b03      	ldrh	r3, [r0, #24]
 80a0ada:	f88d 500c 	strb.w	r5, [sp, #12]
 80a0ade:	4419      	add	r1, r3
      y += cursorY;
 80a0ae0:	8b45      	ldrh	r5, [r0, #26]
      return 0;
    }

    int16_t limitPixel(int16_t &x, int16_t &y)
    {
      x += cursorX;
 80a0ae2:	b20b      	sxth	r3, r1
      y += cursorY;
 80a0ae4:	442a      	add	r2, r5
      if((x < 0) || (y > height) ||  (x > width) || (y < 0)) {
 80a0ae6:	2b00      	cmp	r3, #0
  return BEGIN_WAR_NOTEST;
}


void DFRobot_ST7687S_Latch::drawPixel(int16_t x, int16_t y, uint16_t color)
{
 80a0ae8:	4604      	mov	r4, r0
    }

    int16_t limitPixel(int16_t &x, int16_t &y)
    {
      x += cursorX;
      y += cursorY;
 80a0aea:	b212      	sxth	r2, r2
      if((x < 0) || (y > height) ||  (x > width) || (y < 0)) {
 80a0aec:	db18      	blt.n	80a0b20 <_ZN21DFRobot_ST7687S_Latch9drawPixelEsst+0x52>
 80a0aee:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 80a0af2:	4291      	cmp	r1, r2
 80a0af4:	db14      	blt.n	80a0b20 <_ZN21DFRobot_ST7687S_Latch9drawPixelEsst+0x52>
 80a0af6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80a0afa:	4299      	cmp	r1, r3
 80a0afc:	db10      	blt.n	80a0b20 <_ZN21DFRobot_ST7687S_Latch9drawPixelEsst+0x52>
 80a0afe:	2a00      	cmp	r2, #0
 80a0b00:	db0e      	blt.n	80a0b20 <_ZN21DFRobot_ST7687S_Latch9drawPixelEsst+0x52>
  uint8_t colorBuf[2] = {color >> 8, color};
  if(limitPixel(x, y) < 0) {return;}
  setCursorAddr(x, y, x, y);
 80a0b02:	9200      	str	r2, [sp, #0]
 80a0b04:	4619      	mov	r1, r3
 80a0b06:	f7ff fb35 	bl	80a0174 <_ZN15DFRobot_ST7687S13setCursorAddrEssss>
 80a0b0a:	6823      	ldr	r3, [r4, #0]
 80a0b0c:	212c      	movs	r1, #44	; 0x2c
 80a0b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0b10:	4620      	mov	r0, r4
 80a0b12:	4798      	blx	r3
  writeToRam();
  writeDatBytes(colorBuf, 2);
 80a0b14:	6823      	ldr	r3, [r4, #0]
 80a0b16:	2202      	movs	r2, #2
 80a0b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a0b1a:	a903      	add	r1, sp, #12
 80a0b1c:	4620      	mov	r0, r4
 80a0b1e:	4798      	blx	r3
}
 80a0b20:	b005      	add	sp, #20
 80a0b22:	bd30      	pop	{r4, r5, pc}

080a0b24 <_ZN21DFRobot_ST7687S_Latch8writeCmdEh>:


void DFRobot_ST7687S_Latch::writeCmd(uint8_t cmd)
{
 80a0b24:	b538      	push	{r3, r4, r5, lr}
 80a0b26:	4604      	mov	r4, r0
 80a0b28:	460d      	mov	r5, r1
  ST7687S_SPIBEGIN(4000000);
 80a0b2a:	f002 fc4f 	bl	80a33cc <_ZN8particle7globals11instanceSpiEv>
 80a0b2e:	f001 ffcb 	bl	80a2ac8 <_ZN8SPIClass5beginEv>
  digitalWrite(pin_cd, 0);
 80a0b32:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
 80a0b36:	2100      	movs	r1, #0
 80a0b38:	f002 fc2f 	bl	80a339a <digitalWrite>
  digitalWrite(pin_cs, 0);
 80a0b3c:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 80a0b40:	2100      	movs	r1, #0
 80a0b42:	f002 fc2a 	bl	80a339a <digitalWrite>
  HC595_writeReg(&sHC595 ,cmd, 1);
 80a0b46:	2201      	movs	r2, #1
 80a0b48:	4629      	mov	r1, r5
 80a0b4a:	480c      	ldr	r0, [pc, #48]	; (80a0b7c <_ZN21DFRobot_ST7687S_Latch8writeCmdEh+0x58>)
 80a0b4c:	f7ff fae1 	bl	80a0112 <HC595_writeReg>
  digitalWrite(pin_wr, 0);
 80a0b50:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
 80a0b54:	2100      	movs	r1, #0
 80a0b56:	f002 fc20 	bl	80a339a <digitalWrite>
  hc595_delayUS();
  digitalWrite(pin_wr, 1);
 80a0b5a:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
 80a0b5e:	2101      	movs	r1, #1
 80a0b60:	f002 fc1b 	bl	80a339a <digitalWrite>
  digitalWrite(pin_cs, 1);
 80a0b64:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 80a0b68:	2101      	movs	r1, #1
 80a0b6a:	f002 fc16 	bl	80a339a <digitalWrite>
  ST7687S_SPIEND();
 80a0b6e:	f002 fc2d 	bl	80a33cc <_ZN8particle7globals11instanceSpiEv>
}
 80a0b72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HC595_writeReg(&sHC595 ,cmd, 1);
  digitalWrite(pin_wr, 0);
  hc595_delayUS();
  digitalWrite(pin_wr, 1);
  digitalWrite(pin_cs, 1);
  ST7687S_SPIEND();
 80a0b76:	f001 bfb7 	b.w	80a2ae8 <_ZN8SPIClass3endEv>
 80a0b7a:	bf00      	nop
 80a0b7c:	200000f4 	.word	0x200000f4

080a0b80 <_ZN21DFRobot_ST7687S_Latch8writeDatEh>:
}


void DFRobot_ST7687S_Latch::writeDat(uint8_t dat)
{
 80a0b80:	b538      	push	{r3, r4, r5, lr}
 80a0b82:	4604      	mov	r4, r0
 80a0b84:	460d      	mov	r5, r1
  ST7687S_SPIBEGIN(4000000);
 80a0b86:	f002 fc21 	bl	80a33cc <_ZN8particle7globals11instanceSpiEv>
 80a0b8a:	f001 ff9d 	bl	80a2ac8 <_ZN8SPIClass5beginEv>
  digitalWrite(pin_cd, 1);
 80a0b8e:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
 80a0b92:	2101      	movs	r1, #1
 80a0b94:	f002 fc01 	bl	80a339a <digitalWrite>
  digitalWrite(pin_cs, 0);
 80a0b98:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 80a0b9c:	2100      	movs	r1, #0
 80a0b9e:	f002 fbfc 	bl	80a339a <digitalWrite>
  HC595_writeReg(&sHC595, dat, 1);
 80a0ba2:	2201      	movs	r2, #1
 80a0ba4:	4629      	mov	r1, r5
 80a0ba6:	480c      	ldr	r0, [pc, #48]	; (80a0bd8 <_ZN21DFRobot_ST7687S_Latch8writeDatEh+0x58>)
 80a0ba8:	f7ff fab3 	bl	80a0112 <HC595_writeReg>
  digitalWrite(pin_wr, 0);
 80a0bac:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
 80a0bb0:	2100      	movs	r1, #0
 80a0bb2:	f002 fbf2 	bl	80a339a <digitalWrite>
  hc595_delayUS();
  digitalWrite(pin_wr, 1);
 80a0bb6:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
 80a0bba:	2101      	movs	r1, #1
 80a0bbc:	f002 fbed 	bl	80a339a <digitalWrite>
  digitalWrite(pin_cs, 1);
 80a0bc0:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 80a0bc4:	2101      	movs	r1, #1
 80a0bc6:	f002 fbe8 	bl	80a339a <digitalWrite>
  ST7687S_SPIEND();
 80a0bca:	f002 fbff 	bl	80a33cc <_ZN8particle7globals11instanceSpiEv>
}
 80a0bce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HC595_writeReg(&sHC595, dat, 1);
  digitalWrite(pin_wr, 0);
  hc595_delayUS();
  digitalWrite(pin_wr, 1);
  digitalWrite(pin_cs, 1);
  ST7687S_SPIEND();
 80a0bd2:	f001 bf89 	b.w	80a2ae8 <_ZN8SPIClass3endEv>
 80a0bd6:	bf00      	nop
 80a0bd8:	200000f4 	.word	0x200000f4

080a0bdc <_ZN21DFRobot_ST7687S_Latch13writeDatBytesEPht>:
}


void DFRobot_ST7687S_Latch::writeDatBytes(uint8_t* pDat, uint16_t count)
{
 80a0bdc:	b570      	push	{r4, r5, r6, lr}
 80a0bde:	4604      	mov	r4, r0
 80a0be0:	4616      	mov	r6, r2
 80a0be2:	460d      	mov	r5, r1
  ST7687S_SPIBEGIN(4000000);
 80a0be4:	f002 fbf2 	bl	80a33cc <_ZN8particle7globals11instanceSpiEv>
 80a0be8:	f001 ff6e 	bl	80a2ac8 <_ZN8SPIClass5beginEv>
  #ifdef __ets__
    ESP.wdtFeed();
  #endif
  digitalWrite(pin_cd, 1);
 80a0bec:	2101      	movs	r1, #1
 80a0bee:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
 80a0bf2:	f002 fbd2 	bl	80a339a <digitalWrite>
  digitalWrite(pin_cs, 0);
 80a0bf6:	2100      	movs	r1, #0
 80a0bf8:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 80a0bfc:	f002 fbcd 	bl	80a339a <digitalWrite>
 80a0c00:	442e      	add	r6, r5
  while(count --) {
 80a0c02:	42b5      	cmp	r5, r6
 80a0c04:	d010      	beq.n	80a0c28 <_ZN21DFRobot_ST7687S_Latch13writeDatBytesEPht+0x4c>
    HC595_writeReg(&sHC595, *pDat, 1);
 80a0c06:	2201      	movs	r2, #1
 80a0c08:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0c0c:	480c      	ldr	r0, [pc, #48]	; (80a0c40 <_ZN21DFRobot_ST7687S_Latch13writeDatBytesEPht+0x64>)
 80a0c0e:	f7ff fa80 	bl	80a0112 <HC595_writeReg>
    digitalWrite(pin_wr, 0);
 80a0c12:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
 80a0c16:	2100      	movs	r1, #0
 80a0c18:	f002 fbbf 	bl	80a339a <digitalWrite>
    hc595_delayUS();
    digitalWrite(pin_wr, 1);
 80a0c1c:	2101      	movs	r1, #1
 80a0c1e:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
 80a0c22:	f002 fbba 	bl	80a339a <digitalWrite>
  #ifdef __ets__
    ESP.wdtFeed();
  #endif
  digitalWrite(pin_cd, 1);
  digitalWrite(pin_cs, 0);
  while(count --) {
 80a0c26:	e7ec      	b.n	80a0c02 <_ZN21DFRobot_ST7687S_Latch13writeDatBytesEPht+0x26>
    digitalWrite(pin_wr, 0);
    hc595_delayUS();
    digitalWrite(pin_wr, 1);
    pDat ++;
  }
  digitalWrite(pin_cs, 1);
 80a0c28:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 80a0c2c:	2101      	movs	r1, #1
 80a0c2e:	f002 fbb4 	bl	80a339a <digitalWrite>
  ST7687S_SPIEND();
 80a0c32:	f002 fbcb 	bl	80a33cc <_ZN8particle7globals11instanceSpiEv>
}
 80a0c36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    hc595_delayUS();
    digitalWrite(pin_wr, 1);
    pDat ++;
  }
  digitalWrite(pin_cs, 1);
  ST7687S_SPIEND();
 80a0c3a:	f001 bf55 	b.w	80a2ae8 <_ZN8SPIClass3endEv>
 80a0c3e:	bf00      	nop
 80a0c40:	200000f4 	.word	0x200000f4

080a0c44 <_ZN21DFRobot_ST7687S_LatchC1Ehhhh>:
}


sHC595_t sHC595;

DFRobot_ST7687S_Latch::DFRobot_ST7687S_Latch(uint8_t pin_cs_, uint8_t pin_cd_,uint8_t pin_wr_, uint8_t pin_rck_)
 80a0c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0c48:	4604      	mov	r4, r0
 80a0c4a:	4617      	mov	r7, r2
 80a0c4c:	4688      	mov	r8, r1
 80a0c4e:	461e      	mov	r6, r3
 80a0c50:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a0c54:	f7ff fa74 	bl	80a0140 <_ZN15DFRobot_ST7687SC1Ev>
 80a0c58:	4b1f      	ldr	r3, [pc, #124]	; (80a0cd8 <_ZN21DFRobot_ST7687S_LatchC1Ehhhh+0x94>)
{
  pin_cs = pin_cs_;
  pin_cd = pin_cd_;
  pin_wr = pin_wr_;
  pin_rck = pin_rck_;
  sHC595.pDelay = hc595_delayUS;
 80a0c5a:	4820      	ldr	r0, [pc, #128]	; (80a0cdc <_ZN21DFRobot_ST7687S_LatchC1Ehhhh+0x98>)
}


sHC595_t sHC595;

DFRobot_ST7687S_Latch::DFRobot_ST7687S_Latch(uint8_t pin_cs_, uint8_t pin_cd_,uint8_t pin_wr_, uint8_t pin_rck_)
 80a0c5c:	6023      	str	r3, [r4, #0]
{
  pin_cs = pin_cs_;
  pin_cd = pin_cd_;
  pin_wr = pin_wr_;
  pin_rck = pin_rck_;
  sHC595.pDelay = hc595_delayUS;
 80a0c5e:	4b20      	ldr	r3, [pc, #128]	; (80a0ce0 <_ZN21DFRobot_ST7687S_LatchC1Ehhhh+0x9c>)

sHC595_t sHC595;

DFRobot_ST7687S_Latch::DFRobot_ST7687S_Latch(uint8_t pin_cs_, uint8_t pin_cd_,uint8_t pin_wr_, uint8_t pin_rck_)
{
  pin_cs = pin_cs_;
 80a0c60:	f884 8028 	strb.w	r8, [r4, #40]	; 0x28
  pin_cd = pin_cd_;
  pin_wr = pin_wr_;
  pin_rck = pin_rck_;
  sHC595.pDelay = hc595_delayUS;
 80a0c64:	6083      	str	r3, [r0, #8]
  sHC595.pWriteRCK = hc595_writeRCK;
 80a0c66:	4b1f      	ldr	r3, [pc, #124]	; (80a0ce4 <_ZN21DFRobot_ST7687S_LatchC1Ehhhh+0xa0>)
sHC595_t sHC595;

DFRobot_ST7687S_Latch::DFRobot_ST7687S_Latch(uint8_t pin_cs_, uint8_t pin_cd_,uint8_t pin_wr_, uint8_t pin_rck_)
{
  pin_cs = pin_cs_;
  pin_cd = pin_cd_;
 80a0c68:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
  pin_wr = pin_wr_;
  pin_rck = pin_rck_;
  sHC595.pDelay = hc595_delayUS;
  sHC595.pWriteRCK = hc595_writeRCK;
 80a0c6c:	6043      	str	r3, [r0, #4]
  sHC595.pWrite = hc595_writeDat;
 80a0c6e:	4b1e      	ldr	r3, [pc, #120]	; (80a0ce8 <_ZN21DFRobot_ST7687S_LatchC1Ehhhh+0xa4>)

DFRobot_ST7687S_Latch::DFRobot_ST7687S_Latch(uint8_t pin_cs_, uint8_t pin_cd_,uint8_t pin_wr_, uint8_t pin_rck_)
{
  pin_cs = pin_cs_;
  pin_cd = pin_cd_;
  pin_wr = pin_wr_;
 80a0c70:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
  pin_rck = pin_rck_;
  sHC595.pDelay = hc595_delayUS;
  sHC595.pWriteRCK = hc595_writeRCK;
  sHC595.pWrite = hc595_writeDat;
 80a0c74:	6003      	str	r3, [r0, #0]
  HC595_pin_rck = pin_rck;
 80a0c76:	4b1d      	ldr	r3, [pc, #116]	; (80a0cec <_ZN21DFRobot_ST7687S_LatchC1Ehhhh+0xa8>)
DFRobot_ST7687S_Latch::DFRobot_ST7687S_Latch(uint8_t pin_cs_, uint8_t pin_cd_,uint8_t pin_wr_, uint8_t pin_rck_)
{
  pin_cs = pin_cs_;
  pin_cd = pin_cd_;
  pin_wr = pin_wr_;
  pin_rck = pin_rck_;
 80a0c78:	f884 502b 	strb.w	r5, [r4, #43]	; 0x2b
  sHC595.pDelay = hc595_delayUS;
  sHC595.pWriteRCK = hc595_writeRCK;
  sHC595.pWrite = hc595_writeDat;
  HC595_pin_rck = pin_rck;
 80a0c7c:	701d      	strb	r5, [r3, #0]
  HC595_begin(&sHC595);
 80a0c7e:	f7ff fa45 	bl	80a010c <HC595_begin>
  pinMode(pin_cs, OUTPUT);
 80a0c82:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 80a0c86:	2101      	movs	r1, #1
 80a0c88:	f002 fb76 	bl	80a3378 <pinMode>
  digitalWrite(pin_cs, 1);
 80a0c8c:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 80a0c90:	2101      	movs	r1, #1
 80a0c92:	f002 fb82 	bl	80a339a <digitalWrite>
  pinMode(pin_cd, OUTPUT);
 80a0c96:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
 80a0c9a:	2101      	movs	r1, #1
 80a0c9c:	f002 fb6c 	bl	80a3378 <pinMode>
  digitalWrite(pin_cd, 1);
 80a0ca0:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
 80a0ca4:	2101      	movs	r1, #1
 80a0ca6:	f002 fb78 	bl	80a339a <digitalWrite>
  pinMode(pin_rck, OUTPUT);
 80a0caa:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
 80a0cae:	2101      	movs	r1, #1
 80a0cb0:	f002 fb62 	bl	80a3378 <pinMode>
  digitalWrite(pin_rck, 1);
 80a0cb4:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
 80a0cb8:	2101      	movs	r1, #1
 80a0cba:	f002 fb6e 	bl	80a339a <digitalWrite>
  pinMode(pin_wr, OUTPUT);
 80a0cbe:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
 80a0cc2:	2101      	movs	r1, #1
 80a0cc4:	f002 fb58 	bl	80a3378 <pinMode>
  digitalWrite(pin_wr, 1);
 80a0cc8:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
 80a0ccc:	2101      	movs	r1, #1
 80a0cce:	f002 fb64 	bl	80a339a <digitalWrite>
}
 80a0cd2:	4620      	mov	r0, r4
 80a0cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0cd8:	080a5dbc 	.word	0x080a5dbc
 80a0cdc:	200000f4 	.word	0x200000f4
 80a0ce0:	080a0755 	.word	0x080a0755
 80a0ce4:	080a0785 	.word	0x080a0785
 80a0ce8:	080a0795 	.word	0x080a0795
 80a0cec:	200000f0 	.word	0x200000f0

080a0cf0 <_GLOBAL__sub_I_sHC595>:
 80a0cf0:	f001 bce4 	b.w	80a26bc <HAL_Pin_Map>
 80a0cf4:	0000      	movs	r0, r0
	...

080a0cf8 <_ZN21DFRobot_Display_Clock19calcPointerPositionEhtPsS0_>:
    uint16_t                _hourWidth, _minWidth, _secWidth;
    uint16_t                _hourColor, _minColor, _secColor;
    int16_t                 _lastHourX, _lastHourY, _lastMinX, _lastMinY, _lastSecX, _lastSecY;
    uint16_t                _background, _borderColor;

    void calcPointerPosition(uint8_t t, uint16_t len, int16_t* pX, int16_t* pY)
 80a0cf8:	293b      	cmp	r1, #59	; 0x3b
 80a0cfa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0cfe:	bf28      	it	cs
 80a0d00:	213b      	movcs	r1, #59	; 0x3b
    {
      if(t > 59)
        t = 59;
      double        angle = (t % 15) / 15.0f * 90.0f;
      double        nearLine = cos(ANG2DEG(angle)) * (double)len;
 80a0d02:	f04f 0b0f 	mov.w	fp, #15
 80a0d06:	fbb1 fbfb 	udiv	fp, r1, fp
    uint16_t                _hourWidth, _minWidth, _secWidth;
    uint16_t                _hourColor, _minColor, _secColor;
    int16_t                 _lastHourX, _lastHourY, _lastMinX, _lastMinY, _lastSecX, _lastSecY;
    uint16_t                _background, _borderColor;

    void calcPointerPosition(uint8_t t, uint16_t len, int16_t* pX, int16_t* pY)
 80a0d0a:	4604      	mov	r4, r0
    {
      if(t > 59)
        t = 59;
      double        angle = (t % 15) / 15.0f * 90.0f;
      double        nearLine = cos(ANG2DEG(angle)) * (double)len;
 80a0d0c:	ebcb 100b 	rsb	r0, fp, fp, lsl #4
 80a0d10:	1a08      	subs	r0, r1, r0
 80a0d12:	b2c0      	uxtb	r0, r0
    uint16_t                _hourWidth, _minWidth, _secWidth;
    uint16_t                _hourColor, _minColor, _secColor;
    int16_t                 _lastHourX, _lastHourY, _lastMinX, _lastMinY, _lastSecX, _lastSecY;
    uint16_t                _background, _borderColor;

    void calcPointerPosition(uint8_t t, uint16_t len, int16_t* pX, int16_t* pY)
 80a0d14:	4692      	mov	sl, r2
 80a0d16:	461e      	mov	r6, r3
 80a0d18:	460f      	mov	r7, r1
    {
      if(t > 59)
        t = 59;
      double        angle = (t % 15) / 15.0f * 90.0f;
      double        nearLine = cos(ANG2DEG(angle)) * (double)len;
 80a0d1a:	f004 fce5 	bl	80a56e8 <__aeabi_i2f>
 80a0d1e:	494c      	ldr	r1, [pc, #304]	; (80a0e50 <_ZN21DFRobot_Display_Clock19calcPointerPositionEhtPsS0_+0x158>)
 80a0d20:	f004 fdea 	bl	80a58f8 <__aeabi_fdiv>
 80a0d24:	494b      	ldr	r1, [pc, #300]	; (80a0e54 <_ZN21DFRobot_Display_Clock19calcPointerPositionEhtPsS0_+0x15c>)
 80a0d26:	f004 fd33 	bl	80a5790 <__aeabi_fmul>
 80a0d2a:	f004 f8f7 	bl	80a4f1c <__aeabi_f2d>
 80a0d2e:	2200      	movs	r2, #0
 80a0d30:	4b49      	ldr	r3, [pc, #292]	; (80a0e58 <_ZN21DFRobot_Display_Clock19calcPointerPositionEhtPsS0_+0x160>)
 80a0d32:	f004 fa71 	bl	80a5218 <__aeabi_ddiv>
 80a0d36:	a344      	add	r3, pc, #272	; (adr r3, 80a0e48 <_ZN21DFRobot_Display_Clock19calcPointerPositionEhtPsS0_+0x150>)
 80a0d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0d3c:	f004 f942 	bl	80a4fc4 <__aeabi_dmul>
 80a0d40:	f002 fd26 	bl	80a3790 <cos>
 80a0d44:	e9cd 0100 	strd	r0, r1, [sp]
 80a0d48:	4650      	mov	r0, sl
 80a0d4a:	f004 f8c5 	bl	80a4ed8 <__aeabi_ui2d>
 80a0d4e:	4680      	mov	r8, r0
 80a0d50:	4689      	mov	r9, r1
 80a0d52:	4602      	mov	r2, r0
 80a0d54:	460b      	mov	r3, r1
 80a0d56:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a0d5a:	f004 f933 	bl	80a4fc4 <__aeabi_dmul>
      double        opLine = sqrt(((double)len * (double)len) - (nearLine * nearLine));
 80a0d5e:	4642      	mov	r2, r8
    void calcPointerPosition(uint8_t t, uint16_t len, int16_t* pX, int16_t* pY)
    {
      if(t > 59)
        t = 59;
      double        angle = (t % 15) / 15.0f * 90.0f;
      double        nearLine = cos(ANG2DEG(angle)) * (double)len;
 80a0d60:	e9cd 0100 	strd	r0, r1, [sp]
      double        opLine = sqrt(((double)len * (double)len) - (nearLine * nearLine));
 80a0d64:	464b      	mov	r3, r9
 80a0d66:	4640      	mov	r0, r8
 80a0d68:	4649      	mov	r1, r9
 80a0d6a:	f004 f92b 	bl	80a4fc4 <__aeabi_dmul>
 80a0d6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a0d72:	4680      	mov	r8, r0
 80a0d74:	4689      	mov	r9, r1
 80a0d76:	4610      	mov	r0, r2
 80a0d78:	4619      	mov	r1, r3
 80a0d7a:	f004 f923 	bl	80a4fc4 <__aeabi_dmul>
 80a0d7e:	4602      	mov	r2, r0
 80a0d80:	460b      	mov	r3, r1
 80a0d82:	4640      	mov	r0, r8
 80a0d84:	4649      	mov	r1, r9
 80a0d86:	f003 ff69 	bl	80a4c5c <__aeabi_dsub>
    uint16_t                _hourWidth, _minWidth, _secWidth;
    uint16_t                _hourColor, _minColor, _secColor;
    int16_t                 _lastHourX, _lastHourY, _lastMinX, _lastMinY, _lastSecX, _lastSecY;
    uint16_t                _background, _borderColor;

    void calcPointerPosition(uint8_t t, uint16_t len, int16_t* pX, int16_t* pY)
 80a0d8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    {
      if(t > 59)
        t = 59;
      double        angle = (t % 15) / 15.0f * 90.0f;
      double        nearLine = cos(ANG2DEG(angle)) * (double)len;
      double        opLine = sqrt(((double)len * (double)len) - (nearLine * nearLine));
 80a0d8c:	f002 fd48 	bl	80a3820 <sqrt>
        Serial.print(" ");
        Serial.print((int16_t) nearLine);
        Serial.print(" ");
        Serial.println((int16_t) opLine);
      );
      switch(t / 15) {
 80a0d90:	fa5f fb8b 	uxtb.w	fp, fp
 80a0d94:	f1bb 0f02 	cmp.w	fp, #2
    {
      if(t > 59)
        t = 59;
      double        angle = (t % 15) / 15.0f * 90.0f;
      double        nearLine = cos(ANG2DEG(angle)) * (double)len;
      double        opLine = sqrt(((double)len * (double)len) - (nearLine * nearLine));
 80a0d98:	4680      	mov	r8, r0
 80a0d9a:	4689      	mov	r9, r1
        Serial.print(" ");
        Serial.print((int16_t) nearLine);
        Serial.print(" ");
        Serial.println((int16_t) opLine);
      );
      switch(t / 15) {
 80a0d9c:	d023      	beq.n	80a0de6 <_ZN21DFRobot_Display_Clock19calcPointerPositionEhtPsS0_+0xee>
 80a0d9e:	f1bb 0f03 	cmp.w	fp, #3
 80a0da2:	d036      	beq.n	80a0e12 <_ZN21DFRobot_Display_Clock19calcPointerPositionEhtPsS0_+0x11a>
 80a0da4:	f1bb 0f01 	cmp.w	fp, #1
 80a0da8:	d00f      	beq.n	80a0dca <_ZN21DFRobot_Display_Clock19calcPointerPositionEhtPsS0_+0xd2>
        case 0: {
          if(t == 0) {
 80a0daa:	b937      	cbnz	r7, 80a0dba <_ZN21DFRobot_Display_Clock19calcPointerPositionEhtPsS0_+0xc2>
            *pX = _x;
 80a0dac:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80a0db0:	8033      	strh	r3, [r6, #0]
            *pY = _y - len;
 80a0db2:	88e3      	ldrh	r3, [r4, #6]
 80a0db4:	ebca 0a03 	rsb	sl, sl, r3
 80a0db8:	e01c      	b.n	80a0df4 <_ZN21DFRobot_Display_Clock19calcPointerPositionEhtPsS0_+0xfc>
          } else {
            *pX = _x + (int16_t)opLine;
 80a0dba:	f004 fbb3 	bl	80a5524 <__aeabi_d2iz>
 80a0dbe:	88a3      	ldrh	r3, [r4, #4]
 80a0dc0:	4418      	add	r0, r3
 80a0dc2:	8030      	strh	r0, [r6, #0]
            *pY = _y - (int16_t)nearLine;
 80a0dc4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a0dc8:	e036      	b.n	80a0e38 <_ZN21DFRobot_Display_Clock19calcPointerPositionEhtPsS0_+0x140>
          }
        } break;
        case 1: {
          if(t == 15) {
 80a0dca:	2f0f      	cmp	r7, #15
 80a0dcc:	88a7      	ldrh	r7, [r4, #4]
 80a0dce:	d101      	bne.n	80a0dd4 <_ZN21DFRobot_Display_Clock19calcPointerPositionEhtPsS0_+0xdc>
            *pX = _x + len;
 80a0dd0:	44ba      	add	sl, r7
 80a0dd2:	e023      	b.n	80a0e1c <_ZN21DFRobot_Display_Clock19calcPointerPositionEhtPsS0_+0x124>
            *pY = _y;
          } else {
            *pX = _x + (int16_t)nearLine;
 80a0dd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a0dd8:	f004 fba4 	bl	80a5524 <__aeabi_d2iz>
 80a0ddc:	4438      	add	r0, r7
 80a0dde:	8030      	strh	r0, [r6, #0]
            *pY = _y + (int16_t)opLine;
 80a0de0:	4649      	mov	r1, r9
 80a0de2:	4640      	mov	r0, r8
 80a0de4:	e010      	b.n	80a0e08 <_ZN21DFRobot_Display_Clock19calcPointerPositionEhtPsS0_+0x110>
          }
        } break;
        case 2: {
          if(t == 30) {
 80a0de6:	2f1e      	cmp	r7, #30
 80a0de8:	d107      	bne.n	80a0dfa <_ZN21DFRobot_Display_Clock19calcPointerPositionEhtPsS0_+0x102>
            *pX = _x;
 80a0dea:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80a0dee:	8033      	strh	r3, [r6, #0]
            *pY = _y + len;
 80a0df0:	88e3      	ldrh	r3, [r4, #6]
 80a0df2:	449a      	add	sl, r3
 80a0df4:	f8a5 a000 	strh.w	sl, [r5]
 80a0df8:	e023      	b.n	80a0e42 <_ZN21DFRobot_Display_Clock19calcPointerPositionEhtPsS0_+0x14a>
          } else {
            *pX = _x - (int16_t)opLine;
 80a0dfa:	f004 fb93 	bl	80a5524 <__aeabi_d2iz>
 80a0dfe:	88a3      	ldrh	r3, [r4, #4]
 80a0e00:	1a18      	subs	r0, r3, r0
 80a0e02:	8030      	strh	r0, [r6, #0]
            *pY = _y + (int16_t)nearLine;
 80a0e04:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a0e08:	f004 fb8c 	bl	80a5524 <__aeabi_d2iz>
 80a0e0c:	88e3      	ldrh	r3, [r4, #6]
 80a0e0e:	4418      	add	r0, r3
 80a0e10:	e016      	b.n	80a0e40 <_ZN21DFRobot_Display_Clock19calcPointerPositionEhtPsS0_+0x148>
          }
        } break;
        case 3: {
          if(t == 45) {
 80a0e12:	2f2d      	cmp	r7, #45	; 0x2d
 80a0e14:	88a7      	ldrh	r7, [r4, #4]
 80a0e16:	d107      	bne.n	80a0e28 <_ZN21DFRobot_Display_Clock19calcPointerPositionEhtPsS0_+0x130>
            *pX = _x - len;
 80a0e18:	ebca 0a07 	rsb	sl, sl, r7
 80a0e1c:	f8a6 a000 	strh.w	sl, [r6]
            *pY = _y;
 80a0e20:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80a0e24:	802b      	strh	r3, [r5, #0]
 80a0e26:	e00c      	b.n	80a0e42 <_ZN21DFRobot_Display_Clock19calcPointerPositionEhtPsS0_+0x14a>
          } else {
            *pX = _x - (int16_t)nearLine;
 80a0e28:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a0e2c:	f004 fb7a 	bl	80a5524 <__aeabi_d2iz>
 80a0e30:	1a38      	subs	r0, r7, r0
 80a0e32:	8030      	strh	r0, [r6, #0]
            *pY = _y - (int16_t)opLine;
 80a0e34:	4649      	mov	r1, r9
 80a0e36:	4640      	mov	r0, r8
 80a0e38:	f004 fb74 	bl	80a5524 <__aeabi_d2iz>
 80a0e3c:	88e3      	ldrh	r3, [r4, #6]
 80a0e3e:	1a18      	subs	r0, r3, r0
 80a0e40:	8028      	strh	r0, [r5, #0]
          }
        } break;
      }
    }
 80a0e42:	b003      	add	sp, #12
 80a0e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0e48:	54442d18 	.word	0x54442d18
 80a0e4c:	400921fb 	.word	0x400921fb
 80a0e50:	41700000 	.word	0x41700000
 80a0e54:	42b40000 	.word	0x42b40000
 80a0e58:	40668000 	.word	0x40668000

080a0e5c <_ZN21DFRobot_Display_ClockC1EP15DFRobot_Display>:
#include "DFRobot_Display_Clock.h"

DFRobot_Display_Clock::DFRobot_Display_Clock(DFRobot_Display* pDisplay)
{
  _pDisplay = pDisplay;
  _hourWidth = 1;
 80a0e5c:	2201      	movs	r2, #1
#include "DFRobot_Display_Clock.h"

DFRobot_Display_Clock::DFRobot_Display_Clock(DFRobot_Display* pDisplay)
{
  _pDisplay = pDisplay;
 80a0e5e:	6001      	str	r1, [r0, #0]
  _hourWidth = 1;
 80a0e60:	8202      	strh	r2, [r0, #16]
  _minWidth = 1;
 80a0e62:	8242      	strh	r2, [r0, #18]
  _secWidth = 1;
 80a0e64:	8282      	strh	r2, [r0, #20]
}
 80a0e66:	4770      	bx	lr

080a0e68 <_ZN21DFRobot_Display_Clock12setClockDialEsst>:

void DFRobot_Display_Clock::setClockDial(int16_t x, int16_t y, uint16_t r)
{
  _x = x;
 80a0e68:	8081      	strh	r1, [r0, #4]
  _y = y;
 80a0e6a:	80c2      	strh	r2, [r0, #6]
  _r = r;
 80a0e6c:	8103      	strh	r3, [r0, #8]
 80a0e6e:	4770      	bx	lr

080a0e70 <_ZN21DFRobot_Display_Clock15setPointerColorEttt>:
}

void DFRobot_Display_Clock::setPointerColor(uint16_t hc, uint16_t mc, uint16_t sc)
{
  _hourColor = hc;
 80a0e70:	82c1      	strh	r1, [r0, #22]
  _minColor = mc;
 80a0e72:	8302      	strh	r2, [r0, #24]
  _secColor = sc;
 80a0e74:	8343      	strh	r3, [r0, #26]
 80a0e76:	4770      	bx	lr

080a0e78 <_ZN21DFRobot_Display_Clock16setPointerLengthEttt>:
}

void DFRobot_Display_Clock::setPointerLength(uint16_t hl, uint16_t ml, uint16_t sl)
{
  _hourLen = hl;
 80a0e78:	8141      	strh	r1, [r0, #10]
  _minLen = ml;
 80a0e7a:	8182      	strh	r2, [r0, #12]
  _secLen = sl;
 80a0e7c:	81c3      	strh	r3, [r0, #14]
 80a0e7e:	4770      	bx	lr

080a0e80 <_ZN21DFRobot_Display_Clock12setDialColorEtt>:
}

void DFRobot_Display_Clock::setDialColor(uint16_t border, uint16_t background)
{
  _background = background;
 80a0e80:	8502      	strh	r2, [r0, #40]	; 0x28
  _borderColor = border;
 80a0e82:	8541      	strh	r1, [r0, #42]	; 0x2a
 80a0e84:	4770      	bx	lr

080a0e86 <_ZN21DFRobot_Display_Clock15setPointerWidthEttt>:
}

void DFRobot_Display_Clock::setPointerWidth(uint16_t hw, uint16_t mw, uint16_t sw)
{
  _hourWidth = hw;
 80a0e86:	8201      	strh	r1, [r0, #16]
  _minWidth = mw;
 80a0e88:	8242      	strh	r2, [r0, #18]
  _secWidth = sw;
 80a0e8a:	8283      	strh	r3, [r0, #20]
 80a0e8c:	4770      	bx	lr

080a0e8e <_ZN21DFRobot_Display_Clock8showDialEv>:
}

void DFRobot_Display_Clock::showDial()
{
 80a0e8e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80a0e92:	4604      	mov	r4, r0
  uint16_t      lastLineWidth = _pDisplay->getLineWidth();
 80a0e94:	6800      	ldr	r0, [r0, #0]
 80a0e96:	f001 fbe9 	bl	80a266c <_ZN15DFRobot_Display12getLineWidthEv>
  _pDisplay->setLineWidth(1);
 80a0e9a:	2101      	movs	r1, #1
  _secWidth = sw;
}

void DFRobot_Display_Clock::showDial()
{
  uint16_t      lastLineWidth = _pDisplay->getLineWidth();
 80a0e9c:	4607      	mov	r7, r0
  _pDisplay->setLineWidth(1);
 80a0e9e:	6820      	ldr	r0, [r4, #0]
 80a0ea0:	f001 fbe2 	bl	80a2668 <_ZN15DFRobot_Display12setLineWidthEt>

  _pDisplay->fillCircle(_x, _y, _r, _background);
 80a0ea4:	6820      	ldr	r0, [r4, #0]
 80a0ea6:	8d26      	ldrh	r6, [r4, #40]	; 0x28
 80a0ea8:	6805      	ldr	r5, [r0, #0]
 80a0eaa:	9600      	str	r6, [sp, #0]
 80a0eac:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80a0eb0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80a0eb4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80a0eb8:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 80a0eba:	47a8      	blx	r5
  _pDisplay->drawCircle(_x, _y, _r, _borderColor);
 80a0ebc:	6820      	ldr	r0, [r4, #0]
 80a0ebe:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
 80a0ec0:	6805      	ldr	r5, [r0, #0]
 80a0ec2:	9600      	str	r6, [sp, #0]
 80a0ec4:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80a0ec8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80a0ecc:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80a0ed0:	6aed      	ldr	r5, [r5, #44]	; 0x2c
 80a0ed2:	47a8      	blx	r5
  _pDisplay->drawVLine(_x, _y - _r, _r / 8, _borderColor);
 80a0ed4:	6820      	ldr	r0, [r4, #0]
 80a0ed6:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80a0eda:	f8b4 e02a 	ldrh.w	lr, [r4, #42]	; 0x2a
 80a0ede:	88e2      	ldrh	r2, [r4, #6]
 80a0ee0:	6806      	ldr	r6, [r0, #0]
 80a0ee2:	2508      	movs	r5, #8
 80a0ee4:	f8cd e000 	str.w	lr, [sp]
 80a0ee8:	1ad2      	subs	r2, r2, r3
 80a0eea:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80a0eee:	fb93 f3f5 	sdiv	r3, r3, r5
 80a0ef2:	69b6      	ldr	r6, [r6, #24]
 80a0ef4:	b212      	sxth	r2, r2
 80a0ef6:	47b0      	blx	r6
  _pDisplay->drawHLine(_x + _r, _y, - _r / 8, _borderColor);
 80a0ef8:	f9b4 6008 	ldrsh.w	r6, [r4, #8]
 80a0efc:	6820      	ldr	r0, [r4, #0]
 80a0efe:	fb96 f3f5 	sdiv	r3, r6, r5
 80a0f02:	88a1      	ldrh	r1, [r4, #4]
 80a0f04:	f8b4 e02a 	ldrh.w	lr, [r4, #42]	; 0x2a
 80a0f08:	4431      	add	r1, r6
 80a0f0a:	6806      	ldr	r6, [r0, #0]
 80a0f0c:	425b      	negs	r3, r3
 80a0f0e:	f8cd e000 	str.w	lr, [sp]
 80a0f12:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80a0f16:	69f6      	ldr	r6, [r6, #28]
 80a0f18:	b21b      	sxth	r3, r3
 80a0f1a:	b209      	sxth	r1, r1
 80a0f1c:	47b0      	blx	r6
  _pDisplay->drawVLine(_x, _y + _r, - _r / 8, _borderColor);
 80a0f1e:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80a0f22:	6820      	ldr	r0, [r4, #0]
 80a0f24:	fb91 f3f5 	sdiv	r3, r1, r5
 80a0f28:	f8b4 e02a 	ldrh.w	lr, [r4, #42]	; 0x2a
 80a0f2c:	88e2      	ldrh	r2, [r4, #6]
 80a0f2e:	6806      	ldr	r6, [r0, #0]
 80a0f30:	440a      	add	r2, r1
 80a0f32:	f8cd e000 	str.w	lr, [sp]
 80a0f36:	425b      	negs	r3, r3
 80a0f38:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80a0f3c:	69b6      	ldr	r6, [r6, #24]
 80a0f3e:	b21b      	sxth	r3, r3
 80a0f40:	b212      	sxth	r2, r2
 80a0f42:	47b0      	blx	r6
  _pDisplay->drawHLine(_x - _r, _y, _r / 8, _borderColor);
 80a0f44:	6820      	ldr	r0, [r4, #0]
 80a0f46:	f8b4 e02a 	ldrh.w	lr, [r4, #42]	; 0x2a
 80a0f4a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80a0f4e:	88a1      	ldrh	r1, [r4, #4]
 80a0f50:	6806      	ldr	r6, [r0, #0]
 80a0f52:	1ac9      	subs	r1, r1, r3
 80a0f54:	f8cd e000 	str.w	lr, [sp]
 80a0f58:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80a0f5c:	fb93 f3f5 	sdiv	r3, r3, r5
 80a0f60:	69f6      	ldr	r6, [r6, #28]
 80a0f62:	b209      	sxth	r1, r1
 80a0f64:	47b0      	blx	r6

  int16_t       x, y;
  calcPointerPosition(5, _r, &x, &y);
 80a0f66:	f10d 060e 	add.w	r6, sp, #14
 80a0f6a:	8922      	ldrh	r2, [r4, #8]
 80a0f6c:	9600      	str	r6, [sp, #0]
 80a0f6e:	ab03      	add	r3, sp, #12
 80a0f70:	4620      	mov	r0, r4
 80a0f72:	2105      	movs	r1, #5
 80a0f74:	f7ff fec0 	bl	80a0cf8 <_ZN21DFRobot_Display_Clock19calcPointerPositionEhtPsS0_>
  _pDisplay->drawLine(x * 7 / 8, y * 7 / 8, x, y, _borderColor);
 80a0f78:	f9bd e00e 	ldrsh.w	lr, [sp, #14]
 80a0f7c:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80a0f80:	ebce 02ce 	rsb	r2, lr, lr, lsl #3
 80a0f84:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 80a0f88:	fb92 f2f5 	sdiv	r2, r2, r5
 80a0f8c:	fb91 f1f5 	sdiv	r1, r1, r5
 80a0f90:	6820      	ldr	r0, [r4, #0]
 80a0f92:	f8b4 802a 	ldrh.w	r8, [r4, #42]	; 0x2a
 80a0f96:	f8d0 c000 	ldr.w	ip, [r0]
 80a0f9a:	f8cd e000 	str.w	lr, [sp]
 80a0f9e:	f8cd 8004 	str.w	r8, [sp, #4]
 80a0fa2:	f8dc 8028 	ldr.w	r8, [ip, #40]	; 0x28
 80a0fa6:	b212      	sxth	r2, r2
 80a0fa8:	b209      	sxth	r1, r1
 80a0faa:	47c0      	blx	r8
  calcPointerPosition(10, _r, &x, &y);
 80a0fac:	8922      	ldrh	r2, [r4, #8]
 80a0fae:	9600      	str	r6, [sp, #0]
 80a0fb0:	ab03      	add	r3, sp, #12
 80a0fb2:	4620      	mov	r0, r4
 80a0fb4:	210a      	movs	r1, #10
 80a0fb6:	f7ff fe9f 	bl	80a0cf8 <_ZN21DFRobot_Display_Clock19calcPointerPositionEhtPsS0_>
  _pDisplay->drawLine(x * 7 / 8, y * 7 / 8, x, y, _borderColor);
 80a0fba:	f9bd e00e 	ldrsh.w	lr, [sp, #14]
 80a0fbe:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80a0fc2:	ebce 02ce 	rsb	r2, lr, lr, lsl #3
 80a0fc6:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 80a0fca:	fb92 f2f5 	sdiv	r2, r2, r5
 80a0fce:	fb91 f1f5 	sdiv	r1, r1, r5
 80a0fd2:	6820      	ldr	r0, [r4, #0]
 80a0fd4:	f8b4 802a 	ldrh.w	r8, [r4, #42]	; 0x2a
 80a0fd8:	f8d0 c000 	ldr.w	ip, [r0]
 80a0fdc:	f8cd e000 	str.w	lr, [sp]
 80a0fe0:	f8cd 8004 	str.w	r8, [sp, #4]
 80a0fe4:	f8dc 8028 	ldr.w	r8, [ip, #40]	; 0x28
 80a0fe8:	b212      	sxth	r2, r2
 80a0fea:	b209      	sxth	r1, r1
 80a0fec:	47c0      	blx	r8
  calcPointerPosition(20, _r, &x, &y);
 80a0fee:	8922      	ldrh	r2, [r4, #8]
 80a0ff0:	9600      	str	r6, [sp, #0]
 80a0ff2:	ab03      	add	r3, sp, #12
 80a0ff4:	4620      	mov	r0, r4
 80a0ff6:	2114      	movs	r1, #20
 80a0ff8:	f7ff fe7e 	bl	80a0cf8 <_ZN21DFRobot_Display_Clock19calcPointerPositionEhtPsS0_>
  _pDisplay->drawLine(x * 7 / 8, y * 7 / 8, x, y, _borderColor);
 80a0ffc:	f9bd e00e 	ldrsh.w	lr, [sp, #14]
 80a1000:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80a1004:	ebce 02ce 	rsb	r2, lr, lr, lsl #3
 80a1008:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 80a100c:	fb92 f2f5 	sdiv	r2, r2, r5
 80a1010:	fb91 f1f5 	sdiv	r1, r1, r5
 80a1014:	6820      	ldr	r0, [r4, #0]
 80a1016:	f8b4 802a 	ldrh.w	r8, [r4, #42]	; 0x2a
 80a101a:	f8d0 c000 	ldr.w	ip, [r0]
 80a101e:	f8cd e000 	str.w	lr, [sp]
 80a1022:	f8cd 8004 	str.w	r8, [sp, #4]
 80a1026:	f8dc 8028 	ldr.w	r8, [ip, #40]	; 0x28
 80a102a:	b212      	sxth	r2, r2
 80a102c:	b209      	sxth	r1, r1
 80a102e:	47c0      	blx	r8
  calcPointerPosition(25, _r, &x, &y);
 80a1030:	8922      	ldrh	r2, [r4, #8]
 80a1032:	9600      	str	r6, [sp, #0]
 80a1034:	ab03      	add	r3, sp, #12
 80a1036:	4620      	mov	r0, r4
 80a1038:	2119      	movs	r1, #25
 80a103a:	f7ff fe5d 	bl	80a0cf8 <_ZN21DFRobot_Display_Clock19calcPointerPositionEhtPsS0_>
  _pDisplay->drawLine(x * 7 / 8, y * 7 / 8, x, y, _borderColor);
 80a103e:	f9bd e00e 	ldrsh.w	lr, [sp, #14]
 80a1042:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80a1046:	ebce 02ce 	rsb	r2, lr, lr, lsl #3
 80a104a:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 80a104e:	fb92 f2f5 	sdiv	r2, r2, r5
 80a1052:	fb91 f1f5 	sdiv	r1, r1, r5
 80a1056:	6820      	ldr	r0, [r4, #0]
 80a1058:	f8b4 802a 	ldrh.w	r8, [r4, #42]	; 0x2a
 80a105c:	f8d0 c000 	ldr.w	ip, [r0]
 80a1060:	f8cd e000 	str.w	lr, [sp]
 80a1064:	f8cd 8004 	str.w	r8, [sp, #4]
 80a1068:	f8dc 8028 	ldr.w	r8, [ip, #40]	; 0x28
 80a106c:	b212      	sxth	r2, r2
 80a106e:	b209      	sxth	r1, r1
 80a1070:	47c0      	blx	r8
  calcPointerPosition(35, _r, &x, &y);
 80a1072:	8922      	ldrh	r2, [r4, #8]
 80a1074:	9600      	str	r6, [sp, #0]
 80a1076:	ab03      	add	r3, sp, #12
 80a1078:	4620      	mov	r0, r4
 80a107a:	2123      	movs	r1, #35	; 0x23
 80a107c:	f7ff fe3c 	bl	80a0cf8 <_ZN21DFRobot_Display_Clock19calcPointerPositionEhtPsS0_>
  _pDisplay->drawLine(x * 7 / 8, y * 7 / 8, x, y, _borderColor);
 80a1080:	f9bd e00e 	ldrsh.w	lr, [sp, #14]
 80a1084:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80a1088:	ebce 02ce 	rsb	r2, lr, lr, lsl #3
 80a108c:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 80a1090:	fb92 f2f5 	sdiv	r2, r2, r5
 80a1094:	fb91 f1f5 	sdiv	r1, r1, r5
 80a1098:	6820      	ldr	r0, [r4, #0]
 80a109a:	f8b4 802a 	ldrh.w	r8, [r4, #42]	; 0x2a
 80a109e:	f8d0 c000 	ldr.w	ip, [r0]
 80a10a2:	f8cd e000 	str.w	lr, [sp]
 80a10a6:	f8cd 8004 	str.w	r8, [sp, #4]
 80a10aa:	f8dc 8028 	ldr.w	r8, [ip, #40]	; 0x28
 80a10ae:	b212      	sxth	r2, r2
 80a10b0:	b209      	sxth	r1, r1
 80a10b2:	47c0      	blx	r8
  calcPointerPosition(40, _r, &x, &y);
 80a10b4:	8922      	ldrh	r2, [r4, #8]
 80a10b6:	9600      	str	r6, [sp, #0]
 80a10b8:	ab03      	add	r3, sp, #12
 80a10ba:	4620      	mov	r0, r4
 80a10bc:	2128      	movs	r1, #40	; 0x28
 80a10be:	f7ff fe1b 	bl	80a0cf8 <_ZN21DFRobot_Display_Clock19calcPointerPositionEhtPsS0_>
  _pDisplay->drawLine(x * 7 / 8, y * 7 / 8, x, y, _borderColor);
 80a10c2:	f9bd e00e 	ldrsh.w	lr, [sp, #14]
 80a10c6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80a10ca:	ebce 02ce 	rsb	r2, lr, lr, lsl #3
 80a10ce:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 80a10d2:	fb92 f2f5 	sdiv	r2, r2, r5
 80a10d6:	fb91 f1f5 	sdiv	r1, r1, r5
 80a10da:	6820      	ldr	r0, [r4, #0]
 80a10dc:	f8b4 802a 	ldrh.w	r8, [r4, #42]	; 0x2a
 80a10e0:	f8d0 c000 	ldr.w	ip, [r0]
 80a10e4:	f8cd e000 	str.w	lr, [sp]
 80a10e8:	f8cd 8004 	str.w	r8, [sp, #4]
 80a10ec:	f8dc 8028 	ldr.w	r8, [ip, #40]	; 0x28
 80a10f0:	b212      	sxth	r2, r2
 80a10f2:	b209      	sxth	r1, r1
 80a10f4:	47c0      	blx	r8
  calcPointerPosition(50, _r, &x, &y);
 80a10f6:	8922      	ldrh	r2, [r4, #8]
 80a10f8:	9600      	str	r6, [sp, #0]
 80a10fa:	ab03      	add	r3, sp, #12
 80a10fc:	4620      	mov	r0, r4
 80a10fe:	2132      	movs	r1, #50	; 0x32
 80a1100:	f7ff fdfa 	bl	80a0cf8 <_ZN21DFRobot_Display_Clock19calcPointerPositionEhtPsS0_>
  _pDisplay->drawLine(x * 7 / 8, y * 7 / 8, x, y, _borderColor);
 80a1104:	f9bd e00e 	ldrsh.w	lr, [sp, #14]
 80a1108:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80a110c:	ebce 02ce 	rsb	r2, lr, lr, lsl #3
 80a1110:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 80a1114:	fb92 f2f5 	sdiv	r2, r2, r5
 80a1118:	fb91 f1f5 	sdiv	r1, r1, r5
 80a111c:	6820      	ldr	r0, [r4, #0]
 80a111e:	f8b4 802a 	ldrh.w	r8, [r4, #42]	; 0x2a
 80a1122:	f8d0 c000 	ldr.w	ip, [r0]
 80a1126:	f8cd e000 	str.w	lr, [sp]
 80a112a:	f8cd 8004 	str.w	r8, [sp, #4]
 80a112e:	f8dc 8028 	ldr.w	r8, [ip, #40]	; 0x28
 80a1132:	b212      	sxth	r2, r2
 80a1134:	b209      	sxth	r1, r1
 80a1136:	47c0      	blx	r8
  calcPointerPosition(55, _r, &x, &y);
 80a1138:	8922      	ldrh	r2, [r4, #8]
 80a113a:	9600      	str	r6, [sp, #0]
 80a113c:	ab03      	add	r3, sp, #12
 80a113e:	4620      	mov	r0, r4
 80a1140:	2137      	movs	r1, #55	; 0x37
 80a1142:	f7ff fdd9 	bl	80a0cf8 <_ZN21DFRobot_Display_Clock19calcPointerPositionEhtPsS0_>
  _pDisplay->drawLine(x * 7 / 8, y * 7 / 8, x, y, _borderColor);
 80a1146:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80a114a:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 80a114e:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 80a1152:	ebc6 02c6 	rsb	r2, r6, r6, lsl #3
 80a1156:	fb92 f2f5 	sdiv	r2, r2, r5
 80a115a:	fb91 f1f5 	sdiv	r1, r1, r5
 80a115e:	6820      	ldr	r0, [r4, #0]
 80a1160:	f8b4 e02a 	ldrh.w	lr, [r4, #42]	; 0x2a
 80a1164:	6805      	ldr	r5, [r0, #0]
 80a1166:	e88d 4040 	stmia.w	sp, {r6, lr}
 80a116a:	b212      	sxth	r2, r2
 80a116c:	6aad      	ldr	r5, [r5, #40]	; 0x28
 80a116e:	b209      	sxth	r1, r1
 80a1170:	47a8      	blx	r5
  
  _pDisplay->setLineWidth(lastLineWidth);
 80a1172:	4639      	mov	r1, r7
 80a1174:	6820      	ldr	r0, [r4, #0]
 80a1176:	f001 fa77 	bl	80a2668 <_ZN15DFRobot_Display12setLineWidthEt>
}
 80a117a:	b004      	add	sp, #16
 80a117c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a1180 <_ZN21DFRobot_Display_Clock11updateClockEhhh>:

void DFRobot_Display_Clock::updateClock(uint8_t h, uint8_t m, uint8_t s)
{
 80a1180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1184:	4604      	mov	r4, r0
 80a1186:	b087      	sub	sp, #28
  uint16_t        w = _pDisplay->getLineWidth();
 80a1188:	6800      	ldr	r0, [r0, #0]
  
  _pDisplay->setLineWidth(lastLineWidth);
}

void DFRobot_Display_Clock::updateClock(uint8_t h, uint8_t m, uint8_t s)
{
 80a118a:	460d      	mov	r5, r1
 80a118c:	4693      	mov	fp, r2
 80a118e:	9304      	str	r3, [sp, #16]
  uint16_t        w = _pDisplay->getLineWidth();
 80a1190:	f001 fa6c 	bl	80a266c <_ZN15DFRobot_Display12getLineWidthEv>

  _pDisplay->setLineWidth(_hourWidth);
 80a1194:	8a21      	ldrh	r1, [r4, #16]
  _pDisplay->setLineWidth(lastLineWidth);
}

void DFRobot_Display_Clock::updateClock(uint8_t h, uint8_t m, uint8_t s)
{
  uint16_t        w = _pDisplay->getLineWidth();
 80a1196:	9003      	str	r0, [sp, #12]

  _pDisplay->setLineWidth(_hourWidth);
 80a1198:	6820      	ldr	r0, [r4, #0]
 80a119a:	f001 fa65 	bl	80a2668 <_ZN15DFRobot_Display12setLineWidthEt>
  _pDisplay->drawLine(_x, _y, _lastHourX, _lastHourY, _background);
 80a119e:	6820      	ldr	r0, [r4, #0]
 80a11a0:	8d27      	ldrh	r7, [r4, #40]	; 0x28
 80a11a2:	6806      	ldr	r6, [r0, #0]
 80a11a4:	9701      	str	r7, [sp, #4]
 80a11a6:	f9b4 701e 	ldrsh.w	r7, [r4, #30]
 80a11aa:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80a11ae:	9700      	str	r7, [sp, #0]
 80a11b0:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 80a11b4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80a11b8:	6ab6      	ldr	r6, [r6, #40]	; 0x28
 80a11ba:	47b0      	blx	r6
    void calcPointerPositionHour(uint8_t th, uint8_t tm, uint16_t len, int16_t* pX, int16_t* pY)
    {
      if(th > 23)
        th = 23;
      th %= 12;
      uint16_t      thm = (uint16_t)th * 60 + tm;
 80a11bc:	4629      	mov	r1, r5
 80a11be:	2d17      	cmp	r5, #23
 80a11c0:	bf28      	it	cs
 80a11c2:	2117      	movcs	r1, #23
 80a11c4:	250c      	movs	r5, #12
 80a11c6:	fbb1 f3f5 	udiv	r3, r1, r5
 80a11ca:	fb05 1513 	mls	r5, r5, r3, r1
 80a11ce:	b2ed      	uxtb	r5, r5
 80a11d0:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 80a11d4:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
 80a11d8:	b2ad      	uxth	r5, r5
      double        angle = (thm % 180) / 180.0f * 90.0f;
      double        nearLine = cos(ANG2DEG(angle)) * (double)len;
 80a11da:	20b4      	movs	r0, #180	; 0xb4
 80a11dc:	fbb5 f3f0 	udiv	r3, r5, r0
 80a11e0:	fb00 5013 	mls	r0, r0, r3, r5
 80a11e4:	b280      	uxth	r0, r0
 80a11e6:	9302      	str	r3, [sp, #8]
 80a11e8:	f004 fa7e 	bl	80a56e8 <__aeabi_i2f>
 80a11ec:	4988      	ldr	r1, [pc, #544]	; (80a1410 <_ZN21DFRobot_Display_Clock11updateClockEhhh+0x290>)
 80a11ee:	f004 fb83 	bl	80a58f8 <__aeabi_fdiv>
 80a11f2:	4988      	ldr	r1, [pc, #544]	; (80a1414 <_ZN21DFRobot_Display_Clock11updateClockEhhh+0x294>)
 80a11f4:	f004 facc 	bl	80a5790 <__aeabi_fmul>
 80a11f8:	f003 fe90 	bl	80a4f1c <__aeabi_f2d>
 80a11fc:	2200      	movs	r2, #0
 80a11fe:	4b86      	ldr	r3, [pc, #536]	; (80a1418 <_ZN21DFRobot_Display_Clock11updateClockEhhh+0x298>)
 80a1200:	f004 f80a 	bl	80a5218 <__aeabi_ddiv>
 80a1204:	a380      	add	r3, pc, #512	; (adr r3, 80a1408 <_ZN21DFRobot_Display_Clock11updateClockEhhh+0x288>)
 80a1206:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a120a:	f003 fedb 	bl	80a4fc4 <__aeabi_dmul>
 80a120e:	f002 fabf 	bl	80a3790 <cos>
  calcPointerPositionHour(h, m, _hourLen, &_lastHourX, &_lastHourY);
 80a1212:	f8b4 a00a 	ldrh.w	sl, [r4, #10]
 80a1216:	4680      	mov	r8, r0
 80a1218:	4650      	mov	r0, sl
 80a121a:	4689      	mov	r9, r1
 80a121c:	f003 fe5c 	bl	80a4ed8 <__aeabi_ui2d>
 80a1220:	4606      	mov	r6, r0
 80a1222:	460f      	mov	r7, r1
 80a1224:	4602      	mov	r2, r0
 80a1226:	460b      	mov	r3, r1
 80a1228:	4640      	mov	r0, r8
 80a122a:	4649      	mov	r1, r9
 80a122c:	f003 feca 	bl	80a4fc4 <__aeabi_dmul>
      double        opLine = sqrt(((double)len * (double)len) - (nearLine * nearLine));
 80a1230:	4632      	mov	r2, r6
      if(th > 23)
        th = 23;
      th %= 12;
      uint16_t      thm = (uint16_t)th * 60 + tm;
      double        angle = (thm % 180) / 180.0f * 90.0f;
      double        nearLine = cos(ANG2DEG(angle)) * (double)len;
 80a1232:	4680      	mov	r8, r0
 80a1234:	4689      	mov	r9, r1
      double        opLine = sqrt(((double)len * (double)len) - (nearLine * nearLine));
 80a1236:	463b      	mov	r3, r7
 80a1238:	4630      	mov	r0, r6
 80a123a:	4639      	mov	r1, r7
 80a123c:	f003 fec2 	bl	80a4fc4 <__aeabi_dmul>
 80a1240:	4642      	mov	r2, r8
 80a1242:	4606      	mov	r6, r0
 80a1244:	460f      	mov	r7, r1
 80a1246:	464b      	mov	r3, r9
 80a1248:	4640      	mov	r0, r8
 80a124a:	4649      	mov	r1, r9
 80a124c:	f003 feba 	bl	80a4fc4 <__aeabi_dmul>
 80a1250:	460b      	mov	r3, r1
 80a1252:	4602      	mov	r2, r0
 80a1254:	4639      	mov	r1, r7
 80a1256:	4630      	mov	r0, r6
 80a1258:	f003 fd00 	bl	80a4c5c <__aeabi_dsub>
 80a125c:	f002 fae0 	bl	80a3820 <sqrt>
      switch(thm / 180) {
 80a1260:	f8bd 3008 	ldrh.w	r3, [sp, #8]
        th = 23;
      th %= 12;
      uint16_t      thm = (uint16_t)th * 60 + tm;
      double        angle = (thm % 180) / 180.0f * 90.0f;
      double        nearLine = cos(ANG2DEG(angle)) * (double)len;
      double        opLine = sqrt(((double)len * (double)len) - (nearLine * nearLine));
 80a1264:	4606      	mov	r6, r0
 80a1266:	460f      	mov	r7, r1
      switch(thm / 180) {
 80a1268:	2b03      	cmp	r3, #3
 80a126a:	d85e      	bhi.n	80a132a <_ZN21DFRobot_Display_Clock11updateClockEhhh+0x1aa>
 80a126c:	e8df f003 	tbb	[pc, r3]
 80a1270:	442e1702 	.word	0x442e1702
 80a1274:	88a2      	ldrh	r2, [r4, #4]
 80a1276:	88e3      	ldrh	r3, [r4, #6]
        case 0: {
          if(thm == 0) {
 80a1278:	b91d      	cbnz	r5, 80a1282 <_ZN21DFRobot_Display_Clock11updateClockEhhh+0x102>
            *pX = _x;
 80a127a:	83a2      	strh	r2, [r4, #28]
            *pY = _y - len;
 80a127c:	ebca 0a03 	rsb	sl, sl, r3
 80a1280:	e02b      	b.n	80a12da <_ZN21DFRobot_Display_Clock11updateClockEhhh+0x15a>
 80a1282:	9305      	str	r3, [sp, #20]
 80a1284:	9202      	str	r2, [sp, #8]
          } else {
            *pX = _x + (int16_t)opLine;
 80a1286:	f004 f94d 	bl	80a5524 <__aeabi_d2iz>
 80a128a:	9a02      	ldr	r2, [sp, #8]
            *pY = _y - (int16_t)nearLine;
 80a128c:	4649      	mov	r1, r9
        case 0: {
          if(thm == 0) {
            *pX = _x;
            *pY = _y - len;
          } else {
            *pX = _x + (int16_t)opLine;
 80a128e:	4410      	add	r0, r2
 80a1290:	83a0      	strh	r0, [r4, #28]
            *pY = _y - (int16_t)nearLine;
 80a1292:	4640      	mov	r0, r8
 80a1294:	f004 f946 	bl	80a5524 <__aeabi_d2iz>
 80a1298:	9b05      	ldr	r3, [sp, #20]
 80a129a:	1a18      	subs	r0, r3, r0
 80a129c:	e044      	b.n	80a1328 <_ZN21DFRobot_Display_Clock11updateClockEhhh+0x1a8>
          }
        } break;
        case 1: {
          if(thm == 180) {
 80a129e:	2db4      	cmp	r5, #180	; 0xb4
 80a12a0:	88e3      	ldrh	r3, [r4, #6]
 80a12a2:	88a5      	ldrh	r5, [r4, #4]
 80a12a4:	d104      	bne.n	80a12b0 <_ZN21DFRobot_Display_Clock11updateClockEhhh+0x130>
            *pX = _x + len;
 80a12a6:	44aa      	add	sl, r5
 80a12a8:	f8a4 a01c 	strh.w	sl, [r4, #28]
            *pY = _y;
 80a12ac:	83e3      	strh	r3, [r4, #30]
 80a12ae:	e03c      	b.n	80a132a <_ZN21DFRobot_Display_Clock11updateClockEhhh+0x1aa>
          } else {
            *pX = _x + (int16_t)nearLine;
 80a12b0:	4649      	mov	r1, r9
 80a12b2:	4640      	mov	r0, r8
 80a12b4:	9302      	str	r3, [sp, #8]
 80a12b6:	f004 f935 	bl	80a5524 <__aeabi_d2iz>
 80a12ba:	4428      	add	r0, r5
 80a12bc:	83a0      	strh	r0, [r4, #28]
            *pY = _y + (int16_t)opLine;
 80a12be:	4639      	mov	r1, r7
 80a12c0:	4630      	mov	r0, r6
 80a12c2:	f004 f92f 	bl	80a5524 <__aeabi_d2iz>
 80a12c6:	9b02      	ldr	r3, [sp, #8]
 80a12c8:	4418      	add	r0, r3
 80a12ca:	e02d      	b.n	80a1328 <_ZN21DFRobot_Display_Clock11updateClockEhhh+0x1a8>
          }
        } break;
        case 2: {
          if(thm == 360) {
 80a12cc:	f5b5 7fb4 	cmp.w	r5, #360	; 0x168
 80a12d0:	88a3      	ldrh	r3, [r4, #4]
 80a12d2:	88e5      	ldrh	r5, [r4, #6]
 80a12d4:	d104      	bne.n	80a12e0 <_ZN21DFRobot_Display_Clock11updateClockEhhh+0x160>
            *pX = _x;
 80a12d6:	83a3      	strh	r3, [r4, #28]
            *pY = _y + len;
 80a12d8:	44aa      	add	sl, r5
 80a12da:	f8a4 a01e 	strh.w	sl, [r4, #30]
 80a12de:	e024      	b.n	80a132a <_ZN21DFRobot_Display_Clock11updateClockEhhh+0x1aa>
 80a12e0:	9302      	str	r3, [sp, #8]
          } else {
            *pX = _x - (int16_t)opLine;
 80a12e2:	f004 f91f 	bl	80a5524 <__aeabi_d2iz>
 80a12e6:	9b02      	ldr	r3, [sp, #8]
            *pY = _y + (int16_t)nearLine;
 80a12e8:	4649      	mov	r1, r9
        case 2: {
          if(thm == 360) {
            *pX = _x;
            *pY = _y + len;
          } else {
            *pX = _x - (int16_t)opLine;
 80a12ea:	1a18      	subs	r0, r3, r0
 80a12ec:	83a0      	strh	r0, [r4, #28]
            *pY = _y + (int16_t)nearLine;
 80a12ee:	4640      	mov	r0, r8
 80a12f0:	f004 f918 	bl	80a5524 <__aeabi_d2iz>
 80a12f4:	4428      	add	r0, r5
 80a12f6:	e017      	b.n	80a1328 <_ZN21DFRobot_Display_Clock11updateClockEhhh+0x1a8>
          }
        } break;
        case 3: {
          if(thm == 540) {
 80a12f8:	f5b5 7f07 	cmp.w	r5, #540	; 0x21c
 80a12fc:	88a3      	ldrh	r3, [r4, #4]
 80a12fe:	88e5      	ldrh	r5, [r4, #6]
 80a1300:	d105      	bne.n	80a130e <_ZN21DFRobot_Display_Clock11updateClockEhhh+0x18e>
            *pX = _x - len;
 80a1302:	ebca 0a03 	rsb	sl, sl, r3
 80a1306:	f8a4 a01c 	strh.w	sl, [r4, #28]
            *pY = _y;
 80a130a:	83e5      	strh	r5, [r4, #30]
 80a130c:	e00d      	b.n	80a132a <_ZN21DFRobot_Display_Clock11updateClockEhhh+0x1aa>
          } else {
            *pX = _x - (int16_t)nearLine;
 80a130e:	4649      	mov	r1, r9
 80a1310:	4640      	mov	r0, r8
 80a1312:	9302      	str	r3, [sp, #8]
 80a1314:	f004 f906 	bl	80a5524 <__aeabi_d2iz>
 80a1318:	9b02      	ldr	r3, [sp, #8]
            *pY = _y - (int16_t)opLine;
 80a131a:	4639      	mov	r1, r7
        case 3: {
          if(thm == 540) {
            *pX = _x - len;
            *pY = _y;
          } else {
            *pX = _x - (int16_t)nearLine;
 80a131c:	1a18      	subs	r0, r3, r0
 80a131e:	83a0      	strh	r0, [r4, #28]
            *pY = _y - (int16_t)opLine;
 80a1320:	4630      	mov	r0, r6
 80a1322:	f004 f8ff 	bl	80a5524 <__aeabi_d2iz>
 80a1326:	1a28      	subs	r0, r5, r0
 80a1328:	83e0      	strh	r0, [r4, #30]
  _pDisplay->drawLine(_x, _y, _lastHourX, _lastHourY, _hourColor);
 80a132a:	6820      	ldr	r0, [r4, #0]
 80a132c:	8ae6      	ldrh	r6, [r4, #22]
 80a132e:	6805      	ldr	r5, [r0, #0]
 80a1330:	9601      	str	r6, [sp, #4]
 80a1332:	f9b4 601e 	ldrsh.w	r6, [r4, #30]
 80a1336:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 80a133a:	9600      	str	r6, [sp, #0]
 80a133c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80a1340:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80a1344:	6aad      	ldr	r5, [r5, #40]	; 0x28
 80a1346:	47a8      	blx	r5
    Serial.print(" ");
    Serial.print(_lastHourY);
    Serial.println(" ");
  );

  _pDisplay->setLineWidth(_minWidth);
 80a1348:	8a61      	ldrh	r1, [r4, #18]
 80a134a:	6820      	ldr	r0, [r4, #0]
 80a134c:	f001 f98c 	bl	80a2668 <_ZN15DFRobot_Display12setLineWidthEt>
  _pDisplay->drawLine(_x, _y, _lastMinX, _lastMinY, _background);
 80a1350:	6820      	ldr	r0, [r4, #0]
 80a1352:	8d26      	ldrh	r6, [r4, #40]	; 0x28
 80a1354:	6805      	ldr	r5, [r0, #0]
 80a1356:	9601      	str	r6, [sp, #4]
 80a1358:	f9b4 6022 	ldrsh.w	r6, [r4, #34]	; 0x22
 80a135c:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
 80a1360:	9600      	str	r6, [sp, #0]
 80a1362:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80a1366:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80a136a:	6aad      	ldr	r5, [r5, #40]	; 0x28
 80a136c:	47a8      	blx	r5
  calcPointerPosition(m, _minLen, &_lastMinX, &_lastMinY);
 80a136e:	f104 0322 	add.w	r3, r4, #34	; 0x22
 80a1372:	89a2      	ldrh	r2, [r4, #12]
 80a1374:	9300      	str	r3, [sp, #0]
 80a1376:	4659      	mov	r1, fp
 80a1378:	f104 0320 	add.w	r3, r4, #32
 80a137c:	4620      	mov	r0, r4
 80a137e:	f7ff fcbb 	bl	80a0cf8 <_ZN21DFRobot_Display_Clock19calcPointerPositionEhtPsS0_>
  _pDisplay->drawLine(_x, _y, _lastMinX, _lastMinY, _minColor);
 80a1382:	6820      	ldr	r0, [r4, #0]
 80a1384:	8b26      	ldrh	r6, [r4, #24]
 80a1386:	6805      	ldr	r5, [r0, #0]
 80a1388:	9601      	str	r6, [sp, #4]
 80a138a:	f9b4 6022 	ldrsh.w	r6, [r4, #34]	; 0x22
 80a138e:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
 80a1392:	9600      	str	r6, [sp, #0]
 80a1394:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80a1398:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80a139c:	6aad      	ldr	r5, [r5, #40]	; 0x28
 80a139e:	47a8      	blx	r5

  _pDisplay->setLineWidth(_secWidth);
 80a13a0:	8aa1      	ldrh	r1, [r4, #20]
 80a13a2:	6820      	ldr	r0, [r4, #0]
 80a13a4:	f001 f960 	bl	80a2668 <_ZN15DFRobot_Display12setLineWidthEt>
  _pDisplay->drawLine(_x, _y, _lastSecX, _lastSecY, _background);
 80a13a8:	6820      	ldr	r0, [r4, #0]
 80a13aa:	8d26      	ldrh	r6, [r4, #40]	; 0x28
 80a13ac:	6805      	ldr	r5, [r0, #0]
 80a13ae:	9601      	str	r6, [sp, #4]
 80a13b0:	f9b4 6026 	ldrsh.w	r6, [r4, #38]	; 0x26
 80a13b4:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 80a13b8:	9600      	str	r6, [sp, #0]
 80a13ba:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80a13be:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80a13c2:	6aad      	ldr	r5, [r5, #40]	; 0x28
 80a13c4:	47a8      	blx	r5
  calcPointerPosition(s, _secLen, &_lastSecX, &_lastSecY);
 80a13c6:	f104 0326 	add.w	r3, r4, #38	; 0x26
 80a13ca:	89e2      	ldrh	r2, [r4, #14]
 80a13cc:	9300      	str	r3, [sp, #0]
 80a13ce:	9904      	ldr	r1, [sp, #16]
 80a13d0:	f104 0324 	add.w	r3, r4, #36	; 0x24
 80a13d4:	4620      	mov	r0, r4
 80a13d6:	f7ff fc8f 	bl	80a0cf8 <_ZN21DFRobot_Display_Clock19calcPointerPositionEhtPsS0_>
  _pDisplay->drawLine(_x, _y, _lastSecX, _lastSecY, _secColor);
 80a13da:	6820      	ldr	r0, [r4, #0]
 80a13dc:	8b66      	ldrh	r6, [r4, #26]
 80a13de:	6805      	ldr	r5, [r0, #0]
 80a13e0:	9601      	str	r6, [sp, #4]
 80a13e2:	f9b4 6026 	ldrsh.w	r6, [r4, #38]	; 0x26
 80a13e6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80a13ea:	9600      	str	r6, [sp, #0]
 80a13ec:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 80a13f0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80a13f4:	6aad      	ldr	r5, [r5, #40]	; 0x28
 80a13f6:	47a8      	blx	r5

  _pDisplay->setLineWidth(w);
 80a13f8:	9903      	ldr	r1, [sp, #12]
 80a13fa:	6820      	ldr	r0, [r4, #0]
}
 80a13fc:	b007      	add	sp, #28
 80a13fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  _pDisplay->setLineWidth(_secWidth);
  _pDisplay->drawLine(_x, _y, _lastSecX, _lastSecY, _background);
  calcPointerPosition(s, _secLen, &_lastSecX, &_lastSecY);
  _pDisplay->drawLine(_x, _y, _lastSecX, _lastSecY, _secColor);

  _pDisplay->setLineWidth(w);
 80a1402:	f001 b931 	b.w	80a2668 <_ZN15DFRobot_Display12setLineWidthEt>
 80a1406:	bf00      	nop
 80a1408:	54442d18 	.word	0x54442d18
 80a140c:	400921fb 	.word	0x400921fb
 80a1410:	43340000 	.word	0x43340000
 80a1414:	42b40000 	.word	0x42b40000
 80a1418:	40668000 	.word	0x40668000

080a141c <_GLOBAL__sub_I__ZN21DFRobot_Display_ClockC2EP15DFRobot_Display>:
 80a141c:	f001 b94e 	b.w	80a26bc <HAL_Pin_Map>

080a1420 <_ZN15DFRobot_Display8drawRectEsssst>:
  }
}

void DFRobot_Display::drawRect(int16_t x, int16_t y, int16_t width, int16_t height, 
                                       uint16_t color)
{
 80a1420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int8_t        dirX = (width > 0) ? -1 : 1;
 80a1424:	2b00      	cmp	r3, #0
 80a1426:	bfcc      	ite	gt
 80a1428:	f04f 37ff 	movgt.w	r7, #4294967295
 80a142c:	2701      	movle	r7, #1
  }
}

void DFRobot_Display::drawRect(int16_t x, int16_t y, int16_t width, int16_t height, 
                                       uint16_t color)
{
 80a142e:	4604      	mov	r4, r0
 80a1430:	4691      	mov	r9, r2
 80a1432:	468a      	mov	sl, r1
  int8_t        dirX = (width > 0) ? -1 : 1;
 80a1434:	4698      	mov	r8, r3
  }
}

void DFRobot_Display::drawRect(int16_t x, int16_t y, int16_t width, int16_t height, 
                                       uint16_t color)
{
 80a1436:	b085      	sub	sp, #20
 80a1438:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 80a143c:	f9bd 5038 	ldrsh.w	r5, [sp, #56]	; 0x38
  int8_t        dirX = (width > 0) ? -1 : 1;
 80a1440:	9703      	str	r7, [sp, #12]
  int8_t        dirY = (height > 0) ? -1 : 1;
  drawHLine(x, y, width, color);
 80a1442:	6807      	ldr	r7, [r0, #0]
 80a1444:	9600      	str	r6, [sp, #0]

void DFRobot_Display::drawRect(int16_t x, int16_t y, int16_t width, int16_t height, 
                                       uint16_t color)
{
  int8_t        dirX = (width > 0) ? -1 : 1;
  int8_t        dirY = (height > 0) ? -1 : 1;
 80a1446:	2d00      	cmp	r5, #0
  drawHLine(x, y, width, color);
 80a1448:	69ff      	ldr	r7, [r7, #28]

void DFRobot_Display::drawRect(int16_t x, int16_t y, int16_t width, int16_t height, 
                                       uint16_t color)
{
  int8_t        dirX = (width > 0) ? -1 : 1;
  int8_t        dirY = (height > 0) ? -1 : 1;
 80a144a:	bfcc      	ite	gt
 80a144c:	f04f 3bff 	movgt.w	fp, #4294967295
 80a1450:	f04f 0b01 	movle.w	fp, #1
  drawHLine(x, y, width, color);
 80a1454:	47b8      	blx	r7
  drawHLine(x, y + height + dirY, width, color);
 80a1456:	6823      	ldr	r3, [r4, #0]
 80a1458:	eb09 0205 	add.w	r2, r9, r5
 80a145c:	9600      	str	r6, [sp, #0]
 80a145e:	445a      	add	r2, fp
 80a1460:	69df      	ldr	r7, [r3, #28]
 80a1462:	4651      	mov	r1, sl
 80a1464:	4643      	mov	r3, r8
 80a1466:	4620      	mov	r0, r4
 80a1468:	b212      	sxth	r2, r2
 80a146a:	47b8      	blx	r7
  drawVLine(x, y, height, color);
 80a146c:	6823      	ldr	r3, [r4, #0]
 80a146e:	9600      	str	r6, [sp, #0]
 80a1470:	699f      	ldr	r7, [r3, #24]
 80a1472:	464a      	mov	r2, r9
 80a1474:	462b      	mov	r3, r5
 80a1476:	4651      	mov	r1, sl
 80a1478:	4620      	mov	r0, r4
 80a147a:	47b8      	blx	r7
  drawVLine(x + width + dirX, y, height, color);
 80a147c:	9b03      	ldr	r3, [sp, #12]
 80a147e:	44d0      	add	r8, sl
 80a1480:	eb08 0103 	add.w	r1, r8, r3
 80a1484:	6823      	ldr	r3, [r4, #0]
 80a1486:	960e      	str	r6, [sp, #56]	; 0x38
 80a1488:	699e      	ldr	r6, [r3, #24]
 80a148a:	464a      	mov	r2, r9
 80a148c:	462b      	mov	r3, r5
 80a148e:	4620      	mov	r0, r4
 80a1490:	46b4      	mov	ip, r6
 80a1492:	b209      	sxth	r1, r1
}
 80a1494:	b005      	add	sp, #20
 80a1496:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int8_t        dirX = (width > 0) ? -1 : 1;
  int8_t        dirY = (height > 0) ? -1 : 1;
  drawHLine(x, y, width, color);
  drawHLine(x, y + height + dirY, width, color);
  drawVLine(x, y, height, color);
  drawVLine(x + width + dirX, y, height, color);
 80a149a:	4760      	bx	ip

080a149c <_ZN15DFRobot_Display8fillRectEsssst>:
}

void DFRobot_Display::fillRect(int16_t x, int16_t y, int16_t width, int16_t height, 
                                           uint16_t color)
{
 80a149c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a14a0:	4606      	mov	r6, r0
 80a14a2:	460c      	mov	r4, r1
 80a14a4:	4617      	mov	r7, r2
  int8_t        directionX = 1;
  int16_t       var1 = x + width;
  if(width < 0) {
    directionX = -1;
 80a14a6:	2b00      	cmp	r3, #0

void DFRobot_Display::fillRect(int16_t x, int16_t y, int16_t width, int16_t height, 
                                           uint16_t color)
{
  int8_t        directionX = 1;
  int16_t       var1 = x + width;
 80a14a8:	eb01 0503 	add.w	r5, r1, r3
  drawVLine(x + width + dirX, y, height, color);
}

void DFRobot_Display::fillRect(int16_t x, int16_t y, int16_t width, int16_t height, 
                                           uint16_t color)
{
 80a14ac:	f9bd 8030 	ldrsh.w	r8, [sp, #48]	; 0x30
 80a14b0:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
  int8_t        directionX = 1;
  int16_t       var1 = x + width;
 80a14b4:	b22d      	sxth	r5, r5
  if(width < 0) {
    directionX = -1;
 80a14b6:	bfac      	ite	ge
 80a14b8:	f04f 0a01 	movge.w	sl, #1
 80a14bc:	f04f 3aff 	movlt.w	sl, #4294967295
  }
  for(; x != var1; x += directionX) {
 80a14c0:	42ac      	cmp	r4, r5
 80a14c2:	d00c      	beq.n	80a14de <_ZN15DFRobot_Display8fillRectEsssst+0x42>
    drawVLine(x, y, height, color);
 80a14c4:	6833      	ldr	r3, [r6, #0]
 80a14c6:	f8cd 9000 	str.w	r9, [sp]
 80a14ca:	f8d3 b018 	ldr.w	fp, [r3, #24]
 80a14ce:	4621      	mov	r1, r4
 80a14d0:	4643      	mov	r3, r8
 80a14d2:	463a      	mov	r2, r7
 80a14d4:	4630      	mov	r0, r6
 80a14d6:	4454      	add	r4, sl
 80a14d8:	47d8      	blx	fp
 80a14da:	b224      	sxth	r4, r4
  int8_t        directionX = 1;
  int16_t       var1 = x + width;
  if(width < 0) {
    directionX = -1;
  }
  for(; x != var1; x += directionX) {
 80a14dc:	e7f0      	b.n	80a14c0 <_ZN15DFRobot_Display8fillRectEsssst+0x24>
    drawVLine(x, y, height, color);
  }
}
 80a14de:	b003      	add	sp, #12
 80a14e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a14e4 <_ZN15DFRobot_Display10drawCircleEssst>:
    }
  }
}

void DFRobot_Display::drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 80a14e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a14e8:	4604      	mov	r4, r0
  r = abs(r);
 80a14ea:	2b00      	cmp	r3, #0
 80a14ec:	bfb8      	it	lt
 80a14ee:	425b      	neglt	r3, r3
    }
  }
}

void DFRobot_Display::drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 80a14f0:	b087      	sub	sp, #28
  r = abs(r);
 80a14f2:	b21b      	sxth	r3, r3
  int16_t       varX = 0, varY = r;
  int16_t       endY = 0;
  int32_t       var1 = 3 - 2 * r;
 80a14f4:	005d      	lsls	r5, r3, #1
  }
}

void DFRobot_Display::drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
  r = abs(r);
 80a14f6:	9300      	str	r3, [sp, #0]
  int16_t       varX = 0, varY = r;
  int16_t       endY = 0;
  int32_t       var1 = 3 - 2 * r;
 80a14f8:	2300      	movs	r3, #0
 80a14fa:	9301      	str	r3, [sp, #4]

  while(varX <= varY) {
    drawPixel(x0 + varX, y0 + varY, color);
 80a14fc:	b28b      	uxth	r3, r1
 80a14fe:	9303      	str	r3, [sp, #12]
    }
  }
}

void DFRobot_Display::drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 80a1500:	f8bd 7040 	ldrh.w	r7, [sp, #64]	; 0x40
  int16_t       varX = 0, varY = r;
  int16_t       endY = 0;
  int32_t       var1 = 3 - 2 * r;

  while(varX <= varY) {
    drawPixel(x0 + varX, y0 + varY, color);
 80a1504:	b293      	uxth	r3, r2
void DFRobot_Display::drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
  r = abs(r);
  int16_t       varX = 0, varY = r;
  int16_t       endY = 0;
  int32_t       var1 = 3 - 2 * r;
 80a1506:	f1c5 0503 	rsb	r5, r5, #3

  while(varX <= varY) {
    drawPixel(x0 + varX, y0 + varY, color);
 80a150a:	9304      	str	r3, [sp, #16]
 80a150c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
  r = abs(r);
  int16_t       varX = 0, varY = r;
  int16_t       endY = 0;
  int32_t       var1 = 3 - 2 * r;

  while(varX <= varY) {
 80a1510:	9a00      	ldr	r2, [sp, #0]
 80a1512:	9305      	str	r3, [sp, #20]
 80a1514:	4293      	cmp	r3, r2
 80a1516:	dc7e      	bgt.n	80a1616 <_ZN15DFRobot_Display10drawCircleEssst+0x132>
 80a1518:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    drawPixel(x0 + varX, y0 + varY, color);
 80a151c:	f8bd 8000 	ldrh.w	r8, [sp]
 80a1520:	9302      	str	r3, [sp, #8]
 80a1522:	9a02      	ldr	r2, [sp, #8]
 80a1524:	9b03      	ldr	r3, [sp, #12]
 80a1526:	4620      	mov	r0, r4
 80a1528:	eb03 0a02 	add.w	sl, r3, r2
 80a152c:	9b04      	ldr	r3, [sp, #16]
 80a152e:	fa0f fa8a 	sxth.w	sl, sl
 80a1532:	eb03 0908 	add.w	r9, r3, r8
 80a1536:	6823      	ldr	r3, [r4, #0]
 80a1538:	fa0f f989 	sxth.w	r9, r9
 80a153c:	691e      	ldr	r6, [r3, #16]
 80a153e:	464a      	mov	r2, r9
 80a1540:	4651      	mov	r1, sl
 80a1542:	463b      	mov	r3, r7
 80a1544:	47b0      	blx	r6
 80a1546:	9b03      	ldr	r3, [sp, #12]
 80a1548:	9a02      	ldr	r2, [sp, #8]
    drawPixel(x0 - varX, y0 + varY, color);
 80a154a:	4620      	mov	r0, r4
 80a154c:	1a9e      	subs	r6, r3, r2
 80a154e:	6823      	ldr	r3, [r4, #0]
 80a1550:	b236      	sxth	r6, r6
 80a1552:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80a1556:	464a      	mov	r2, r9
 80a1558:	4631      	mov	r1, r6
 80a155a:	463b      	mov	r3, r7
 80a155c:	47d8      	blx	fp
    drawPixel(x0 + varX, y0 - varY, color);
 80a155e:	9b04      	ldr	r3, [sp, #16]
 80a1560:	4651      	mov	r1, sl
 80a1562:	ebc8 0903 	rsb	r9, r8, r3
 80a1566:	6823      	ldr	r3, [r4, #0]
 80a1568:	fa0f f989 	sxth.w	r9, r9
 80a156c:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80a1570:	464a      	mov	r2, r9
 80a1572:	463b      	mov	r3, r7
 80a1574:	4620      	mov	r0, r4
 80a1576:	47d8      	blx	fp
    drawPixel(x0 - varX, y0 - varY, color);
 80a1578:	6823      	ldr	r3, [r4, #0]
 80a157a:	464a      	mov	r2, r9
 80a157c:	f8d3 a010 	ldr.w	sl, [r3, #16]
 80a1580:	4631      	mov	r1, r6
 80a1582:	463b      	mov	r3, r7
 80a1584:	4620      	mov	r0, r4
 80a1586:	47d0      	blx	sl
    drawPixel(x0 + varY, y0 + varX, color);
 80a1588:	9b03      	ldr	r3, [sp, #12]
 80a158a:	9a02      	ldr	r2, [sp, #8]
 80a158c:	eb03 0a08 	add.w	sl, r3, r8
 80a1590:	9b04      	ldr	r3, [sp, #16]
 80a1592:	fa0f fa8a 	sxth.w	sl, sl
 80a1596:	189e      	adds	r6, r3, r2
 80a1598:	6823      	ldr	r3, [r4, #0]
 80a159a:	b236      	sxth	r6, r6
 80a159c:	f8d3 9010 	ldr.w	r9, [r3, #16]
 80a15a0:	4632      	mov	r2, r6
 80a15a2:	4651      	mov	r1, sl
 80a15a4:	463b      	mov	r3, r7
 80a15a6:	4620      	mov	r0, r4
 80a15a8:	47c8      	blx	r9
    drawPixel(x0 - varY, y0 + varX, color);
 80a15aa:	9b03      	ldr	r3, [sp, #12]
 80a15ac:	4632      	mov	r2, r6
 80a15ae:	ebc8 0903 	rsb	r9, r8, r3
 80a15b2:	6823      	ldr	r3, [r4, #0]
 80a15b4:	fa0f f989 	sxth.w	r9, r9
 80a15b8:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80a15bc:	4649      	mov	r1, r9
 80a15be:	463b      	mov	r3, r7
 80a15c0:	4620      	mov	r0, r4
 80a15c2:	47d8      	blx	fp
 80a15c4:	9b04      	ldr	r3, [sp, #16]
 80a15c6:	9a02      	ldr	r2, [sp, #8]
    drawPixel(x0 + varY, y0 - varX, color);
 80a15c8:	4651      	mov	r1, sl
 80a15ca:	1a9e      	subs	r6, r3, r2
 80a15cc:	6823      	ldr	r3, [r4, #0]
 80a15ce:	b236      	sxth	r6, r6
 80a15d0:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80a15d4:	4632      	mov	r2, r6
 80a15d6:	463b      	mov	r3, r7
 80a15d8:	4620      	mov	r0, r4
 80a15da:	47d8      	blx	fp
    drawPixel(x0 - varY, y0 - varX, color);
 80a15dc:	6823      	ldr	r3, [r4, #0]
 80a15de:	4632      	mov	r2, r6
 80a15e0:	f8d3 a010 	ldr.w	sl, [r3, #16]
 80a15e4:	4649      	mov	r1, r9
 80a15e6:	463b      	mov	r3, r7
 80a15e8:	4620      	mov	r0, r4
 80a15ea:	47d0      	blx	sl
    if(var1 < 0) {
 80a15ec:	2d00      	cmp	r5, #0
      var1 = var1 + 4 * varX + 6;
 80a15ee:	9b05      	ldr	r3, [sp, #20]
    drawPixel(x0 - varX, y0 - varY, color);
    drawPixel(x0 + varY, y0 + varX, color);
    drawPixel(x0 - varY, y0 + varX, color);
    drawPixel(x0 + varY, y0 - varX, color);
    drawPixel(x0 - varY, y0 - varX, color);
    if(var1 < 0) {
 80a15f0:	da03      	bge.n	80a15fa <_ZN15DFRobot_Display10drawCircleEssst+0x116>
      var1 = var1 + 4 * varX + 6;
 80a15f2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 80a15f6:	3506      	adds	r5, #6
 80a15f8:	e009      	b.n	80a160e <_ZN15DFRobot_Display10drawCircleEssst+0x12a>
    } else {
      var1 = var1 + 4 * (varX - varY) + 10;
 80a15fa:	9a00      	ldr	r2, [sp, #0]
      varY --;
 80a15fc:	f108 38ff 	add.w	r8, r8, #4294967295
    drawPixel(x0 + varY, y0 - varX, color);
    drawPixel(x0 - varY, y0 - varX, color);
    if(var1 < 0) {
      var1 = var1 + 4 * varX + 6;
    } else {
      var1 = var1 + 4 * (varX - varY) + 10;
 80a1600:	1a9b      	subs	r3, r3, r2
 80a1602:	eb05 0583 	add.w	r5, r5, r3, lsl #2
      varY --;
 80a1606:	fa0f f388 	sxth.w	r3, r8
    drawPixel(x0 + varY, y0 - varX, color);
    drawPixel(x0 - varY, y0 - varX, color);
    if(var1 < 0) {
      var1 = var1 + 4 * varX + 6;
    } else {
      var1 = var1 + 4 * (varX - varY) + 10;
 80a160a:	350a      	adds	r5, #10
      varY --;
 80a160c:	9300      	str	r3, [sp, #0]
 80a160e:	9b01      	ldr	r3, [sp, #4]
 80a1610:	3301      	adds	r3, #1
 80a1612:	9301      	str	r3, [sp, #4]
  r = abs(r);
  int16_t       varX = 0, varY = r;
  int16_t       endY = 0;
  int32_t       var1 = 3 - 2 * r;

  while(varX <= varY) {
 80a1614:	e77a      	b.n	80a150c <_ZN15DFRobot_Display10drawCircleEssst+0x28>
      var1 = var1 + 4 * (varX - varY) + 10;
      varY --;
    }
    varX ++;
  }
}
 80a1616:	b007      	add	sp, #28
 80a1618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a161c <_ZN15DFRobot_Display10fillCircleEssst>:

void DFRobot_Display::fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{ 
 80a161c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1620:	4605      	mov	r5, r0
  r = abs(r);
 80a1622:	2b00      	cmp	r3, #0
 80a1624:	bfb8      	it	lt
 80a1626:	425b      	neglt	r3, r3
    varX ++;
  }
}

void DFRobot_Display::fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{ 
 80a1628:	b08b      	sub	sp, #44	; 0x2c
  r = abs(r);
 80a162a:	b21f      	sxth	r7, r3

  int16_t       varX = 0, varY = r;
  int16_t       endY = 0;
  int32_t       var1 = 3 - 2 * r;
 80a162c:	007c      	lsls	r4, r7, #1

  while(varX <= varY) {
    drawVLine(x0+varX, y0-varY, 2 * varY + 1, color);
 80a162e:	b293      	uxth	r3, r2
    varX ++;
  }
}

void DFRobot_Display::fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{ 
 80a1630:	f8bd 9050 	ldrh.w	r9, [sp, #80]	; 0x50
  r = abs(r);

  int16_t       varX = 0, varY = r;
  int16_t       endY = 0;
  int32_t       var1 = 3 - 2 * r;
 80a1634:	f1c4 0403 	rsb	r4, r4, #3
 80a1638:	f04f 0b00 	mov.w	fp, #0

  while(varX <= varY) {
    drawVLine(x0+varX, y0-varY, 2 * varY + 1, color);
 80a163c:	fa1f fa81 	uxth.w	sl, r1
 80a1640:	9309      	str	r3, [sp, #36]	; 0x24
 80a1642:	fa0f f38b 	sxth.w	r3, fp

  int16_t       varX = 0, varY = r;
  int16_t       endY = 0;
  int32_t       var1 = 3 - 2 * r;

  while(varX <= varY) {
 80a1646:	42bb      	cmp	r3, r7
 80a1648:	9304      	str	r3, [sp, #16]
 80a164a:	dc57      	bgt.n	80a16fc <_ZN15DFRobot_Display10fillCircleEssst+0xe0>
    drawVLine(x0+varX, y0-varY, 2 * varY + 1, color);
 80a164c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a164e:	fa1f f887 	uxth.w	r8, r7
 80a1652:	ebc8 0303 	rsb	r3, r8, r3
 80a1656:	b21b      	sxth	r3, r3
 80a1658:	9305      	str	r3, [sp, #20]
 80a165a:	ea4f 0348 	mov.w	r3, r8, lsl #1
 80a165e:	3301      	adds	r3, #1
 80a1660:	b21b      	sxth	r3, r3
 80a1662:	9306      	str	r3, [sp, #24]
 80a1664:	682b      	ldr	r3, [r5, #0]
 80a1666:	f8cd 9000 	str.w	r9, [sp]
 80a166a:	fa1f f68b 	uxth.w	r6, fp
 80a166e:	699b      	ldr	r3, [r3, #24]
 80a1670:	eb0a 0106 	add.w	r1, sl, r6
 80a1674:	9603      	str	r6, [sp, #12]
 80a1676:	9a05      	ldr	r2, [sp, #20]
 80a1678:	461e      	mov	r6, r3
 80a167a:	b209      	sxth	r1, r1
 80a167c:	9b06      	ldr	r3, [sp, #24]
 80a167e:	4628      	mov	r0, r5
 80a1680:	47b0      	blx	r6
 80a1682:	9a03      	ldr	r2, [sp, #12]
 80a1684:	9b09      	ldr	r3, [sp, #36]	; 0x24
    drawVLine(x0+varY, y0-varX, 2 * varX + 1, color);
 80a1686:	f8cd 9000 	str.w	r9, [sp]
 80a168a:	1a9b      	subs	r3, r3, r2
 80a168c:	b21b      	sxth	r3, r3
 80a168e:	9307      	str	r3, [sp, #28]
 80a1690:	0053      	lsls	r3, r2, #1
 80a1692:	3301      	adds	r3, #1
 80a1694:	b21b      	sxth	r3, r3
 80a1696:	9308      	str	r3, [sp, #32]
 80a1698:	682b      	ldr	r3, [r5, #0]
 80a169a:	eb0a 0108 	add.w	r1, sl, r8
 80a169e:	699b      	ldr	r3, [r3, #24]
 80a16a0:	9a07      	ldr	r2, [sp, #28]
 80a16a2:	461e      	mov	r6, r3
 80a16a4:	b209      	sxth	r1, r1
 80a16a6:	9b08      	ldr	r3, [sp, #32]
 80a16a8:	4628      	mov	r0, r5
 80a16aa:	47b0      	blx	r6
    drawVLine(x0-varX, y0-varY, 2 * varY + 1, color);
 80a16ac:	9b03      	ldr	r3, [sp, #12]
 80a16ae:	f8cd 9000 	str.w	r9, [sp]
 80a16b2:	ebc3 010a 	rsb	r1, r3, sl
 80a16b6:	682b      	ldr	r3, [r5, #0]
 80a16b8:	9a05      	ldr	r2, [sp, #20]
 80a16ba:	699e      	ldr	r6, [r3, #24]
 80a16bc:	b209      	sxth	r1, r1
 80a16be:	9b06      	ldr	r3, [sp, #24]
 80a16c0:	4628      	mov	r0, r5
 80a16c2:	47b0      	blx	r6
    drawVLine(x0-varY, y0-varX, 2 * varX + 1, color);
 80a16c4:	682b      	ldr	r3, [r5, #0]
 80a16c6:	f8cd 9000 	str.w	r9, [sp]
 80a16ca:	ebc8 010a 	rsb	r1, r8, sl
 80a16ce:	699e      	ldr	r6, [r3, #24]
 80a16d0:	9a07      	ldr	r2, [sp, #28]
 80a16d2:	9b08      	ldr	r3, [sp, #32]
 80a16d4:	b209      	sxth	r1, r1
 80a16d6:	4628      	mov	r0, r5
 80a16d8:	47b0      	blx	r6
    if(var1 < 0) {
      var1 = var1 + 4 * varX + 6;
 80a16da:	9b04      	ldr	r3, [sp, #16]
  while(varX <= varY) {
    drawVLine(x0+varX, y0-varY, 2 * varY + 1, color);
    drawVLine(x0+varY, y0-varX, 2 * varX + 1, color);
    drawVLine(x0-varX, y0-varY, 2 * varY + 1, color);
    drawVLine(x0-varY, y0-varX, 2 * varX + 1, color);
    if(var1 < 0) {
 80a16dc:	2c00      	cmp	r4, #0
      var1 = var1 + 4 * varX + 6;
    } else {
      var1 = var1 + 4 * (varX - varY) + 10;
 80a16de:	bfa5      	ittet	ge
 80a16e0:	1bdf      	subge	r7, r3, r7
 80a16e2:	eb04 0487 	addge.w	r4, r4, r7, lsl #2
    drawVLine(x0+varX, y0-varY, 2 * varY + 1, color);
    drawVLine(x0+varY, y0-varX, 2 * varX + 1, color);
    drawVLine(x0-varX, y0-varY, 2 * varY + 1, color);
    drawVLine(x0-varY, y0-varX, 2 * varX + 1, color);
    if(var1 < 0) {
      var1 = var1 + 4 * varX + 6;
 80a16e6:	eb04 0483 	addlt.w	r4, r4, r3, lsl #2
    } else {
      var1 = var1 + 4 * (varX - varY) + 10;
      varY --;
 80a16ea:	f108 37ff 	addge.w	r7, r8, #4294967295
    drawVLine(x0+varX, y0-varY, 2 * varY + 1, color);
    drawVLine(x0+varY, y0-varX, 2 * varX + 1, color);
    drawVLine(x0-varX, y0-varY, 2 * varY + 1, color);
    drawVLine(x0-varY, y0-varX, 2 * varX + 1, color);
    if(var1 < 0) {
      var1 = var1 + 4 * varX + 6;
 80a16ee:	bfb2      	itee	lt
 80a16f0:	3406      	addlt	r4, #6
    } else {
      var1 = var1 + 4 * (varX - varY) + 10;
 80a16f2:	340a      	addge	r4, #10
      varY --;
 80a16f4:	b23f      	sxthge	r7, r7
 80a16f6:	f10b 0b01 	add.w	fp, fp, #1

  int16_t       varX = 0, varY = r;
  int16_t       endY = 0;
  int32_t       var1 = 3 - 2 * r;

  while(varX <= varY) {
 80a16fa:	e7a2      	b.n	80a1642 <_ZN15DFRobot_Display10fillCircleEssst+0x26>
      var1 = var1 + 4 * (varX - varY) + 10;
      varY --;
    }
    varX ++;
  }
}
 80a16fc:	b00b      	add	sp, #44	; 0x2c
 80a16fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a1702 <_ZN15DFRobot_Display12drawTriangleEsssssst>:

void DFRobot_Display::drawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, 
                                           int16_t x2, int16_t y2, uint16_t color)
{
 80a1702:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1706:	4604      	mov	r4, r0
 80a1708:	469b      	mov	fp, r3
 80a170a:	468a      	mov	sl, r1
 80a170c:	b085      	sub	sp, #20
 80a170e:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
 80a1712:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
  drawLine(x0, y0, x1, y1, color);
 80a1716:	6807      	ldr	r7, [r0, #0]
 80a1718:	9501      	str	r5, [sp, #4]
 80a171a:	f8cd 9000 	str.w	r9, [sp]
  }
}

void DFRobot_Display::drawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, 
                                           int16_t x2, int16_t y2, uint16_t color)
{
 80a171e:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 80a1722:	9203      	str	r2, [sp, #12]
  drawLine(x0, y0, x1, y1, color);
 80a1724:	6abf      	ldr	r7, [r7, #40]	; 0x28
  }
}

void DFRobot_Display::drawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, 
                                           int16_t x2, int16_t y2, uint16_t color)
{
 80a1726:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
  drawLine(x0, y0, x1, y1, color);
 80a172a:	47b8      	blx	r7
  drawLine(x1, y1, x2, y2, color);
 80a172c:	6823      	ldr	r3, [r4, #0]
 80a172e:	9501      	str	r5, [sp, #4]
 80a1730:	f8cd 8000 	str.w	r8, [sp]
 80a1734:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 80a1736:	464a      	mov	r2, r9
 80a1738:	4633      	mov	r3, r6
 80a173a:	4659      	mov	r1, fp
 80a173c:	4620      	mov	r0, r4
 80a173e:	47b8      	blx	r7
  drawLine(x2, y2, x0, y0, color);
 80a1740:	9a03      	ldr	r2, [sp, #12]
 80a1742:	6823      	ldr	r3, [r4, #0]
 80a1744:	920e      	str	r2, [sp, #56]	; 0x38
 80a1746:	950f      	str	r5, [sp, #60]	; 0x3c
 80a1748:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 80a174a:	4642      	mov	r2, r8
 80a174c:	4653      	mov	r3, sl
 80a174e:	4631      	mov	r1, r6
 80a1750:	4620      	mov	r0, r4
 80a1752:	46ac      	mov	ip, r5
}
 80a1754:	b005      	add	sp, #20
 80a1756:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
void DFRobot_Display::drawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, 
                                           int16_t x2, int16_t y2, uint16_t color)
{
  drawLine(x0, y0, x1, y1, color);
  drawLine(x1, y1, x2, y2, color);
  drawLine(x2, y2, x0, y0, color);
 80a175a:	4760      	bx	ip

080a175c <_ZN15DFRobot_Display12fillTriangleEsssssst>:
}


void DFRobot_Display::fillTriangle(int16_t x, int16_t y, int16_t x1, int16_t y1, 
                                              int16_t x2, int16_t y2, uint16_t color)
{
 80a175c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1760:	4606      	mov	r6, r0
 80a1762:	4699      	mov	r9, r3
 80a1764:	4693      	mov	fp, r2
 80a1766:	460d      	mov	r5, r1
 80a1768:	b08f      	sub	sp, #60	; 0x3c
 80a176a:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 80a176e:	f9bd 4060 	ldrsh.w	r4, [sp, #96]	; 0x60
 80a1772:	9703      	str	r7, [sp, #12]
  drawLine(x, y, x1, y1, color);
 80a1774:	6807      	ldr	r7, [r0, #0]
}


void DFRobot_Display::fillTriangle(int16_t x, int16_t y, int16_t x1, int16_t y1, 
                                              int16_t x2, int16_t y2, uint16_t color)
{
 80a1776:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
  drawLine(x, y, x1, y1, color);
 80a177a:	9704      	str	r7, [sp, #16]
 80a177c:	9f03      	ldr	r7, [sp, #12]
}


void DFRobot_Display::fillTriangle(int16_t x, int16_t y, int16_t x1, int16_t y1, 
                                              int16_t x2, int16_t y2, uint16_t color)
{
 80a177e:	f9bd a068 	ldrsh.w	sl, [sp, #104]	; 0x68
  drawLine(x, y, x1, y1, color);
 80a1782:	e88d 0090 	stmia.w	sp, {r4, r7}
 80a1786:	9f04      	ldr	r7, [sp, #16]
 80a1788:	6abf      	ldr	r7, [r7, #40]	; 0x28
 80a178a:	47b8      	blx	r7
  drawLine(x1, y1, x2, y2, color);
 80a178c:	9a03      	ldr	r2, [sp, #12]
 80a178e:	6833      	ldr	r3, [r6, #0]
 80a1790:	9201      	str	r2, [sp, #4]
 80a1792:	f8cd a000 	str.w	sl, [sp]
 80a1796:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 80a1798:	4622      	mov	r2, r4
 80a179a:	4643      	mov	r3, r8
 80a179c:	4649      	mov	r1, r9
 80a179e:	4630      	mov	r0, r6
 80a17a0:	47b8      	blx	r7
  drawLine(x2, y2, x, y, color);
 80a17a2:	9a03      	ldr	r2, [sp, #12]
 80a17a4:	6833      	ldr	r3, [r6, #0]
 80a17a6:	9201      	str	r2, [sp, #4]
 80a17a8:	f8cd b000 	str.w	fp, [sp]
 80a17ac:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 80a17ae:	4652      	mov	r2, sl
 80a17b0:	462b      	mov	r3, r5
 80a17b2:	4641      	mov	r1, r8
 80a17b4:	4630      	mov	r0, r6
 80a17b6:	47b8      	blx	r7
  int temp = lineWidth;
 80a17b8:	8bf3      	ldrh	r3, [r6, #30]
  lineWidth = 1;
  if( x == x1 && x == x2) {
 80a17ba:	454d      	cmp	r5, r9
                                              int16_t x2, int16_t y2, uint16_t color)
{
  drawLine(x, y, x1, y1, color);
  drawLine(x1, y1, x2, y2, color);
  drawLine(x2, y2, x, y, color);
  int temp = lineWidth;
 80a17bc:	9307      	str	r3, [sp, #28]
  lineWidth = 1;
 80a17be:	f04f 0301 	mov.w	r3, #1
 80a17c2:	83f3      	strh	r3, [r6, #30]
  if( x == x1 && x == x2) {
 80a17c4:	d119      	bne.n	80a17fa <_ZN15DFRobot_Display12fillTriangleEsssssst+0x9e>
 80a17c6:	4545      	cmp	r5, r8
 80a17c8:	d117      	bne.n	80a17fa <_ZN15DFRobot_Display12fillTriangleEsssssst+0x9e>
 80a17ca:	4554      	cmp	r4, sl
 80a17cc:	4623      	mov	r3, r4
 80a17ce:	bfb8      	it	lt
 80a17d0:	4653      	movlt	r3, sl
 80a17d2:	4554      	cmp	r4, sl
 80a17d4:	bfa8      	it	ge
 80a17d6:	4654      	movge	r4, sl
 80a17d8:	455c      	cmp	r4, fp
 80a17da:	4622      	mov	r2, r4
 80a17dc:	bfa8      	it	ge
 80a17de:	465a      	movge	r2, fp
    int ymin = y;
    if(ymin > y1)
      ymin = y1;
    if(ymin > y2)
      ymin = y2;
    drawHLine(x, ymin, ymax - ymin, color);
 80a17e0:	459b      	cmp	fp, r3
 80a17e2:	bfac      	ite	ge
 80a17e4:	ebc2 030b 	rsbge	r3, r2, fp
 80a17e8:	ebc2 0303 	rsblt	r3, r2, r3
 80a17ec:	9803      	ldr	r0, [sp, #12]
 80a17ee:	6831      	ldr	r1, [r6, #0]
 80a17f0:	9000      	str	r0, [sp, #0]
 80a17f2:	69cc      	ldr	r4, [r1, #28]
 80a17f4:	b21b      	sxth	r3, r3
 80a17f6:	4629      	mov	r1, r5
 80a17f8:	e00a      	b.n	80a1810 <_ZN15DFRobot_Display12fillTriangleEsssssst+0xb4>
    lineWidth = temp;
    return;
  }
  if (y == y1 && y == y2) {
 80a17fa:	45a3      	cmp	fp, r4
 80a17fc:	d10b      	bne.n	80a1816 <_ZN15DFRobot_Display12fillTriangleEsssssst+0xba>
 80a17fe:	45d3      	cmp	fp, sl
 80a1800:	d113      	bne.n	80a182a <_ZN15DFRobot_Display12fillTriangleEsssssst+0xce>
    int xmin = y;
    if(xmin > y1)
      xmin = y1;
    if(xmin > y2)
      xmin = y2;
    drawVLine(xmin, y, xmax - xmin, color);
 80a1802:	9a03      	ldr	r2, [sp, #12]
 80a1804:	4659      	mov	r1, fp
 80a1806:	9200      	str	r2, [sp, #0]
 80a1808:	465a      	mov	r2, fp
 80a180a:	6833      	ldr	r3, [r6, #0]
 80a180c:	699c      	ldr	r4, [r3, #24]
 80a180e:	2300      	movs	r3, #0
 80a1810:	4630      	mov	r0, r6
 80a1812:	47a0      	blx	r4
 80a1814:	e0d0      	b.n	80a19b8 <_ZN15DFRobot_Display12fillTriangleEsssssst+0x25c>
    lineWidth = temp;
    return;
  }

  int direction = 1;
  if (y == y1 || y1 == y2 || y == y2) {
 80a1816:	4554      	cmp	r4, sl
 80a1818:	d00c      	beq.n	80a1834 <_ZN15DFRobot_Display12fillTriangleEsssssst+0xd8>
 80a181a:	45d3      	cmp	fp, sl
 80a181c:	d116      	bne.n	80a184c <_ZN15DFRobot_Display12fillTriangleEsssssst+0xf0>
 80a181e:	462b      	mov	r3, r5
 80a1820:	46a3      	mov	fp, r4
 80a1822:	464d      	mov	r5, r9
 80a1824:	4654      	mov	r4, sl
 80a1826:	4699      	mov	r9, r3
 80a1828:	e004      	b.n	80a1834 <_ZN15DFRobot_Display12fillTriangleEsssssst+0xd8>
 80a182a:	462b      	mov	r3, r5
 80a182c:	465c      	mov	r4, fp
 80a182e:	4645      	mov	r5, r8
 80a1830:	46d3      	mov	fp, sl
 80a1832:	4698      	mov	r8, r3
    } else if (y == y2) {
      swap_int16(x, x1);
      swap_int16(y, y1);
    }
    if (y > y1) {
      direction = -1;
 80a1834:	45a3      	cmp	fp, r4
 80a1836:	bfd4      	ite	le
 80a1838:	2301      	movle	r3, #1
 80a183a:	f04f 33ff 	movgt.w	r3, #4294967295
    }
    if (x1 > x2) {
 80a183e:	45c1      	cmp	r9, r8
 80a1840:	46a2      	mov	sl, r4
 80a1842:	dd1f      	ble.n	80a1884 <_ZN15DFRobot_Display12fillTriangleEsssssst+0x128>
 80a1844:	464a      	mov	r2, r9
 80a1846:	46c1      	mov	r9, r8
 80a1848:	4690      	mov	r8, r2
 80a184a:	e01b      	b.n	80a1884 <_ZN15DFRobot_Display12fillTriangleEsssssst+0x128>
      swap_int16(x1, x2);
      swap_int16(y1, y2);
    }
  } else {
    if (y > y1) {
 80a184c:	45a3      	cmp	fp, r4
 80a184e:	dc0f      	bgt.n	80a1870 <_ZN15DFRobot_Display12fillTriangleEsssssst+0x114>
      swap_int16(x, x1);
      swap_int16(y, y1);
    }
    if (y > y2) {
 80a1850:	45d3      	cmp	fp, sl
 80a1852:	dd05      	ble.n	80a1860 <_ZN15DFRobot_Display12fillTriangleEsssssst+0x104>
 80a1854:	465b      	mov	r3, fp
 80a1856:	46d3      	mov	fp, sl
 80a1858:	469a      	mov	sl, r3
 80a185a:	462b      	mov	r3, r5
 80a185c:	4645      	mov	r5, r8
 80a185e:	4698      	mov	r8, r3
      swap_int16(x, x2);
      swap_int16(y, y2);
    }
    if (y1 > y2) {
 80a1860:	45a2      	cmp	sl, r4
 80a1862:	da0e      	bge.n	80a1882 <_ZN15DFRobot_Display12fillTriangleEsssssst+0x126>
 80a1864:	4623      	mov	r3, r4
 80a1866:	4654      	mov	r4, sl
 80a1868:	469a      	mov	sl, r3
 80a186a:	464b      	mov	r3, r9
 80a186c:	46c1      	mov	r9, r8
 80a186e:	e007      	b.n	80a1880 <_ZN15DFRobot_Display12fillTriangleEsssssst+0x124>
  } else {
    if (y > y1) {
      swap_int16(x, x1);
      swap_int16(y, y1);
    }
    if (y > y2) {
 80a1870:	4554      	cmp	r4, sl
 80a1872:	465b      	mov	r3, fp
 80a1874:	f340 80a6 	ble.w	80a19c4 <_ZN15DFRobot_Display12fillTriangleEsssssst+0x268>
 80a1878:	46d3      	mov	fp, sl
 80a187a:	469a      	mov	sl, r3
 80a187c:	462b      	mov	r3, r5
 80a187e:	4645      	mov	r5, r8
 80a1880:	4698      	mov	r8, r3
    drawVLine(xmin, y, xmax - xmin, color);
    lineWidth = temp;
    return;
  }

  int direction = 1;
 80a1882:	2301      	movs	r3, #1
      swap_int16(x1, x2);
      swap_int16(y1, y2);
    }
  }

  int dx1 = x1 - x;
 80a1884:	ebc5 0209 	rsb	r2, r5, r9
 80a1888:	9208      	str	r2, [sp, #32]
  int dx2 = x2 - x;
 80a188a:	ebc5 0208 	rsb	r2, r5, r8
 80a188e:	9205      	str	r2, [sp, #20]
  int dx3 = x2 - x1;
  int dy1 = y1 - y;
  int dy2 = y2 - y;
  int dy3 = y2 - y1;
  if (direction == 1) {
 80a1890:	2b01      	cmp	r3, #1
  }

  int dx1 = x1 - x;
  int dx2 = x2 - x;
  int dx3 = x2 - x1;
  int dy1 = y1 - y;
 80a1892:	ebcb 0204 	rsb	r2, fp, r4
 80a1896:	9206      	str	r2, [sp, #24]
  int dy2 = y2 - y;
  int dy3 = y2 - y1;
  if (direction == 1) {
 80a1898:	d161      	bne.n	80a195e <_ZN15DFRobot_Display12fillTriangleEsssssst+0x202>

  int dx1 = x1 - x;
  int dx2 = x2 - x;
  int dx3 = x2 - x1;
  int dy1 = y1 - y;
  int dy2 = y2 - y;
 80a189a:	ebcb 030a 	rsb	r3, fp, sl
 80a189e:	9309      	str	r3, [sp, #36]	; 0x24
 80a18a0:	2300      	movs	r3, #0
 80a18a2:	4619      	mov	r1, r3
  int dy3 = y2 - y1;
  if (direction == 1) {
    for(int i = 0; i < dy1; i ++)
      drawHLine(x + dx1 * i / dy1, y + i, (x + dx2 * i / dy2) - (x + dx1 * i / dy1) + 1, color);
 80a18a4:	b2aa      	uxth	r2, r5
 80a18a6:	920a      	str	r2, [sp, #40]	; 0x28
 80a18a8:	3201      	adds	r2, #1

  int dx1 = x1 - x;
  int dx2 = x2 - x;
  int dx3 = x2 - x1;
  int dy1 = y1 - y;
  int dy2 = y2 - y;
 80a18aa:	9304      	str	r3, [sp, #16]
  int dy3 = y2 - y1;
  if (direction == 1) {
    for(int i = 0; i < dy1; i ++)
      drawHLine(x + dx1 * i / dy1, y + i, (x + dx2 * i / dy2) - (x + dx1 * i / dy1) + 1, color);
 80a18ac:	920d      	str	r2, [sp, #52]	; 0x34
 80a18ae:	9a08      	ldr	r2, [sp, #32]
  int dx3 = x2 - x1;
  int dy1 = y1 - y;
  int dy2 = y2 - y;
  int dy3 = y2 - y1;
  if (direction == 1) {
    for(int i = 0; i < dy1; i ++)
 80a18b0:	9806      	ldr	r0, [sp, #24]
 80a18b2:	188a      	adds	r2, r1, r2
 80a18b4:	920c      	str	r2, [sp, #48]	; 0x30
 80a18b6:	9a05      	ldr	r2, [sp, #20]
 80a18b8:	441a      	add	r2, r3
 80a18ba:	920b      	str	r2, [sp, #44]	; 0x2c
 80a18bc:	9a04      	ldr	r2, [sp, #16]
 80a18be:	4282      	cmp	r2, r0
 80a18c0:	da1c      	bge.n	80a18fc <_ZN15DFRobot_Display12fillTriangleEsssssst+0x1a0>
      drawHLine(x + dx1 * i / dy1, y + i, (x + dx2 * i / dy2) - (x + dx1 * i / dy1) + 1, color);
 80a18c2:	fb91 f1f0 	sdiv	r1, r1, r0
 80a18c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a18c8:	9803      	ldr	r0, [sp, #12]
 80a18ca:	4411      	add	r1, r2
 80a18cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a18ce:	6837      	ldr	r7, [r6, #0]
 80a18d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80a18d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80a18d6:	9000      	str	r0, [sp, #0]
 80a18d8:	4413      	add	r3, r2
 80a18da:	9a04      	ldr	r2, [sp, #16]
 80a18dc:	69f8      	ldr	r0, [r7, #28]
 80a18de:	b289      	uxth	r1, r1
 80a18e0:	1a5b      	subs	r3, r3, r1
 80a18e2:	445a      	add	r2, fp
 80a18e4:	4607      	mov	r7, r0
 80a18e6:	b21b      	sxth	r3, r3
 80a18e8:	b209      	sxth	r1, r1
 80a18ea:	b212      	sxth	r2, r2
 80a18ec:	4630      	mov	r0, r6
 80a18ee:	47b8      	blx	r7
  int dx3 = x2 - x1;
  int dy1 = y1 - y;
  int dy2 = y2 - y;
  int dy3 = y2 - y1;
  if (direction == 1) {
    for(int i = 0; i < dy1; i ++)
 80a18f0:	9b04      	ldr	r3, [sp, #16]
 80a18f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80a18f4:	3301      	adds	r3, #1
 80a18f6:	9304      	str	r3, [sp, #16]
 80a18f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a18fa:	e7d8      	b.n	80a18ae <_ZN15DFRobot_Display12fillTriangleEsssssst+0x152>
  int dx1 = x1 - x;
  int dx2 = x2 - x;
  int dx3 = x2 - x1;
  int dy1 = y1 - y;
  int dy2 = y2 - y;
  int dy3 = y2 - y1;
 80a18fc:	f04f 0b00 	mov.w	fp, #0
 80a1900:	ebc4 030a 	rsb	r3, r4, sl
 80a1904:	46da      	mov	sl, fp
 80a1906:	9304      	str	r3, [sp, #16]
 80a1908:	ebc9 0308 	rsb	r3, r9, r8
 80a190c:	9f06      	ldr	r7, [sp, #24]
 80a190e:	9308      	str	r3, [sp, #32]
 80a1910:	9b05      	ldr	r3, [sp, #20]
  if (direction == 1) {
    for(int i = 0; i < dy1; i ++)
      drawHLine(x + dx1 * i / dy1, y + i, (x + dx2 * i / dy2) - (x + dx1 * i / dy1) + 1, color);
    for(int i = 0; i < dy3; i ++)
      drawHLine(x1 + dx3 * i / dy3, y1 + i, (x + dx2 * (i + dy1) / dy2) - (x1 + dx3 * i / dy3) + 1, color);
 80a1912:	ebc8 0809 	rsb	r8, r8, r9
 80a1916:	435f      	muls	r7, r3
 80a1918:	1c6b      	adds	r3, r5, #1
 80a191a:	9306      	str	r3, [sp, #24]
 80a191c:	9b08      	ldr	r3, [sp, #32]
 80a191e:	449b      	add	fp, r3
  int dy2 = y2 - y;
  int dy3 = y2 - y1;
  if (direction == 1) {
    for(int i = 0; i < dy1; i ++)
      drawHLine(x + dx1 * i / dy1, y + i, (x + dx2 * i / dy2) - (x + dx1 * i / dy1) + 1, color);
    for(int i = 0; i < dy3; i ++)
 80a1920:	9b04      	ldr	r3, [sp, #16]
 80a1922:	459a      	cmp	sl, r3
 80a1924:	da48      	bge.n	80a19b8 <_ZN15DFRobot_Display12fillTriangleEsssssst+0x25c>
      drawHLine(x1 + dx3 * i / dy3, y1 + i, (x + dx2 * (i + dy1) / dy2) - (x1 + dx3 * i / dy3) + 1, color);
 80a1926:	eb08 010b 	add.w	r1, r8, fp
 80a192a:	fb91 f1f3 	sdiv	r1, r1, r3
 80a192e:	9b06      	ldr	r3, [sp, #24]
 80a1930:	4449      	add	r1, r9
 80a1932:	b289      	uxth	r1, r1
 80a1934:	1a5a      	subs	r2, r3, r1
 80a1936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a1938:	9d03      	ldr	r5, [sp, #12]
 80a193a:	fb97 f3f3 	sdiv	r3, r7, r3
 80a193e:	6830      	ldr	r0, [r6, #0]
 80a1940:	4413      	add	r3, r2
 80a1942:	9500      	str	r5, [sp, #0]
 80a1944:	eb0a 0204 	add.w	r2, sl, r4
 80a1948:	69c5      	ldr	r5, [r0, #28]
 80a194a:	b21b      	sxth	r3, r3
 80a194c:	b212      	sxth	r2, r2
 80a194e:	b209      	sxth	r1, r1
 80a1950:	4630      	mov	r0, r6
 80a1952:	47a8      	blx	r5
 80a1954:	9b05      	ldr	r3, [sp, #20]
  int dy2 = y2 - y;
  int dy3 = y2 - y1;
  if (direction == 1) {
    for(int i = 0; i < dy1; i ++)
      drawHLine(x + dx1 * i / dy1, y + i, (x + dx2 * i / dy2) - (x + dx1 * i / dy1) + 1, color);
    for(int i = 0; i < dy3; i ++)
 80a1956:	f10a 0a01 	add.w	sl, sl, #1
 80a195a:	441f      	add	r7, r3
 80a195c:	e7de      	b.n	80a191c <_ZN15DFRobot_Display12fillTriangleEsssssst+0x1c0>
      drawHLine(x1 + dx3 * i / dy3, y1 + i, (x + dx2 * (i + dy1) / dy2) - (x1 + dx3 * i / dy3) + 1, color);
  } else {
    y = y1 + dy1;
    dy1 = - dy1;
 80a195e:	9b06      	ldr	r3, [sp, #24]
    for(int i = 0; i < dy1; i ++)
      drawHLine(x + dx1 * i / dy1, y + i, (x + dx2 * i / dy2) - (x + dx1 * i / dy1) + 1, color);
    for(int i = 0; i < dy3; i ++)
      drawHLine(x1 + dx3 * i / dy3, y1 + i, (x + dx2 * (i + dy1) / dy2) - (x1 + dx3 * i / dy3) + 1, color);
  } else {
    y = y1 + dy1;
 80a1960:	b2a4      	uxth	r4, r4
    dy1 = - dy1;
 80a1962:	425f      	negs	r7, r3
 80a1964:	2300      	movs	r3, #0
 80a1966:	4619      	mov	r1, r3
    for(int i = 0; i < dy1; i ++)
 80a1968:	4698      	mov	r8, r3
      drawHLine(x + dx1 * i / dy1, y1 + dy1 - i, (x + dx2 * i / dy1) - (x + dx1 * i / dy1) + 1, color);
 80a196a:	b2ad      	uxth	r5, r5
 80a196c:	19e2      	adds	r2, r4, r7
 80a196e:	f105 0b01 	add.w	fp, r5, #1
 80a1972:	9204      	str	r2, [sp, #16]
 80a1974:	9a08      	ldr	r2, [sp, #32]
    for(int i = 0; i < dy3; i ++)
      drawHLine(x1 + dx3 * i / dy3, y1 + i, (x + dx2 * (i + dy1) / dy2) - (x1 + dx3 * i / dy3) + 1, color);
  } else {
    y = y1 + dy1;
    dy1 = - dy1;
    for(int i = 0; i < dy1; i ++)
 80a1976:	45b8      	cmp	r8, r7
 80a1978:	eb01 0a02 	add.w	sl, r1, r2
 80a197c:	9a05      	ldr	r2, [sp, #20]
 80a197e:	eb02 0903 	add.w	r9, r2, r3
 80a1982:	da19      	bge.n	80a19b8 <_ZN15DFRobot_Display12fillTriangleEsssssst+0x25c>
      drawHLine(x + dx1 * i / dy1, y1 + dy1 - i, (x + dx2 * i / dy1) - (x + dx1 * i / dy1) + 1, color);
 80a1984:	fb91 f1f7 	sdiv	r1, r1, r7
 80a1988:	fb93 f3f7 	sdiv	r3, r3, r7
 80a198c:	9c03      	ldr	r4, [sp, #12]
 80a198e:	6830      	ldr	r0, [r6, #0]
 80a1990:	9400      	str	r4, [sp, #0]
 80a1992:	9a04      	ldr	r2, [sp, #16]
 80a1994:	4429      	add	r1, r5
 80a1996:	69c0      	ldr	r0, [r0, #28]
 80a1998:	b289      	uxth	r1, r1
 80a199a:	445b      	add	r3, fp
 80a199c:	1a5b      	subs	r3, r3, r1
 80a199e:	ebc8 0202 	rsb	r2, r8, r2
 80a19a2:	4604      	mov	r4, r0
 80a19a4:	b21b      	sxth	r3, r3
 80a19a6:	b209      	sxth	r1, r1
 80a19a8:	b212      	sxth	r2, r2
 80a19aa:	4630      	mov	r0, r6
 80a19ac:	47a0      	blx	r4
    for(int i = 0; i < dy3; i ++)
      drawHLine(x1 + dx3 * i / dy3, y1 + i, (x + dx2 * (i + dy1) / dy2) - (x1 + dx3 * i / dy3) + 1, color);
  } else {
    y = y1 + dy1;
    dy1 = - dy1;
    for(int i = 0; i < dy1; i ++)
 80a19ae:	f108 0801 	add.w	r8, r8, #1
 80a19b2:	464b      	mov	r3, r9
 80a19b4:	4651      	mov	r1, sl
 80a19b6:	e7dd      	b.n	80a1974 <_ZN15DFRobot_Display12fillTriangleEsssssst+0x218>
      drawHLine(x + dx1 * i / dy1, y1 + dy1 - i, (x + dx2 * i / dy1) - (x + dx1 * i / dy1) + 1, color);
  }
  lineWidth = temp;
 80a19b8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80a19bc:	83f3      	strh	r3, [r6, #30]
}
 80a19be:	b00f      	add	sp, #60	; 0x3c
 80a19c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else {
    if (y > y1) {
      swap_int16(x, x1);
      swap_int16(y, y1);
    }
    if (y > y2) {
 80a19c4:	46a3      	mov	fp, r4
 80a19c6:	461c      	mov	r4, r3
 80a19c8:	462b      	mov	r3, r5
 80a19ca:	464d      	mov	r5, r9
 80a19cc:	4699      	mov	r9, r3
 80a19ce:	e747      	b.n	80a1860 <_ZN15DFRobot_Display12fillTriangleEsssssst+0x104>

080a19d0 <_ZN15DFRobot_Display10setRotaionE9eROTATION>:
  }
}

int16_t DFRobot_Display::setRotaion(eROTATION eRotation_)
{
  switch(eRotation) {
 80a19d0:	7d83      	ldrb	r3, [r0, #22]
 80a19d2:	2b03      	cmp	r3, #3
 80a19d4:	d80e      	bhi.n	80a19f4 <_ZN15DFRobot_Display10setRotaionE9eROTATION+0x24>
 80a19d6:	e8df f003 	tbb	[pc, r3]
 80a19da:	0602      	.short	0x0602
 80a19dc:	0602      	.short	0x0602
    case eROTATION_0: width = rawWidth; height = rawHeight; break;
    case eROTATION_90: width = rawHeight; height = rawWidth; break;
    case eROTATION_180: width = rawWidth; height = rawHeight; break;
 80a19de:	8983      	ldrh	r3, [r0, #12]
 80a19e0:	8103      	strh	r3, [r0, #8]
 80a19e2:	89c3      	ldrh	r3, [r0, #14]
 80a19e4:	e002      	b.n	80a19ec <_ZN15DFRobot_Display10setRotaionE9eROTATION+0x1c>
    case eROTATION_270: width = rawHeight; height = rawWidth; break;
 80a19e6:	89c3      	ldrh	r3, [r0, #14]
 80a19e8:	8103      	strh	r3, [r0, #8]
 80a19ea:	8983      	ldrh	r3, [r0, #12]
 80a19ec:	8143      	strh	r3, [r0, #10]
    default: return DISPLAY_ERR_NOTSUPPORT;
  }
  eRotation = eRotation_;
 80a19ee:	7581      	strb	r1, [r0, #22]
  return DISPLAY_ERR_OK;
 80a19f0:	2000      	movs	r0, #0
 80a19f2:	4770      	bx	lr
  switch(eRotation) {
    case eROTATION_0: width = rawWidth; height = rawHeight; break;
    case eROTATION_90: width = rawHeight; height = rawWidth; break;
    case eROTATION_180: width = rawWidth; height = rawHeight; break;
    case eROTATION_270: width = rawHeight; height = rawWidth; break;
    default: return DISPLAY_ERR_NOTSUPPORT;
 80a19f4:	f06f 0002 	mvn.w	r0, #2
  }
  eRotation = eRotation_;
  return DISPLAY_ERR_OK;
}
 80a19f8:	4770      	bx	lr

080a19fa <_ZN15DFRobot_Display13drawBuffer_16EssPtt>:
{
  *pX = printfX; *pY = printfY;
}

void DFRobot_Display::drawBuffer_16(int16_t x, int16_t y, uint16_t* pBuf, uint16_t count)
{
 80a19fa:	4770      	bx	lr

080a19fc <_ZN15DFRobot_Display13drawBuffer_24EssPht>:

}

void DFRobot_Display::drawBuffer_24(int16_t x, int16_t y, uint8_t* pBuf, uint16_t count)
{
 80a19fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint16_t        i = 0;
  for(i = 0; i < (count / 3); i ++)
 80a1a00:	f8bd 6020 	ldrh.w	r6, [sp, #32]
{

}

void DFRobot_Display::drawBuffer_24(int16_t x, int16_t y, uint8_t* pBuf, uint16_t count)
{
 80a1a04:	4690      	mov	r8, r2
  uint16_t        i = 0;
  for(i = 0; i < (count / 3); i ++)
 80a1a06:	2203      	movs	r2, #3
{

}

void DFRobot_Display::drawBuffer_24(int16_t x, int16_t y, uint8_t* pBuf, uint16_t count)
{
 80a1a08:	4607      	mov	r7, r0
 80a1a0a:	4689      	mov	r9, r1
  uint16_t        i = 0;
  for(i = 0; i < (count / 3); i ++)
 80a1a0c:	fbb6 f6f2 	udiv	r6, r6, r2
 80a1a10:	461c      	mov	r4, r3
 80a1a12:	2500      	movs	r5, #0
 80a1a14:	b2a9      	uxth	r1, r5
 80a1a16:	428e      	cmp	r6, r1
 80a1a18:	f104 0403 	add.w	r4, r4, #3
 80a1a1c:	d916      	bls.n	80a1a4c <_ZN15DFRobot_Display13drawBuffer_24EssPht+0x50>
    drawPixel(x + i, y, color24To16(pBuf[i * 3], pBuf[i * 3 + 1], pBuf[i * 3 + 2]));
 80a1a1e:	f814 3c03 	ldrb.w	r3, [r4, #-3]
 80a1a22:	6838      	ldr	r0, [r7, #0]
 80a1a24:	10da      	asrs	r2, r3, #3
 80a1a26:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 80a1a2a:	4449      	add	r1, r9
 80a1a2c:	109b      	asrs	r3, r3, #2
 80a1a2e:	015b      	lsls	r3, r3, #5
 80a1a30:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 80a1a34:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 80a1a38:	f8d0 a010 	ldr.w	sl, [r0, #16]
 80a1a3c:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 80a1a40:	b209      	sxth	r1, r1
 80a1a42:	4642      	mov	r2, r8
 80a1a44:	4638      	mov	r0, r7
 80a1a46:	47d0      	blx	sl
 80a1a48:	3501      	adds	r5, #1
}

void DFRobot_Display::drawBuffer_24(int16_t x, int16_t y, uint8_t* pBuf, uint16_t count)
{
  uint16_t        i = 0;
  for(i = 0; i < (count / 3); i ++)
 80a1a4a:	e7e3      	b.n	80a1a14 <_ZN15DFRobot_Display13drawBuffer_24EssPht+0x18>
 80a1a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a1a50 <_ZN15DFRobot_Display9drawHLineEssst>:
    drawPixel(x, y, color);
  }
}

void DFRobot_Display::drawHLine(int16_t x, int16_t y, int16_t width_, uint16_t color)
{
 80a1a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a1a54:	4616      	mov	r6, r2
  if((y + cursorY < 0) || (y + cursorY > height)) {return;}
 80a1a56:	f9b0 201a 	ldrsh.w	r2, [r0, #26]
    drawPixel(x, y, color);
  }
}

void DFRobot_Display::drawHLine(int16_t x, int16_t y, int16_t width_, uint16_t color)
{
 80a1a5a:	4605      	mov	r5, r0
  if((y + cursorY < 0) || (y + cursorY > height)) {return;}
 80a1a5c:	1992      	adds	r2, r2, r6
    drawPixel(x, y, color);
  }
}

void DFRobot_Display::drawHLine(int16_t x, int16_t y, int16_t width_, uint16_t color)
{
 80a1a5e:	460c      	mov	r4, r1
 80a1a60:	f8bd 8020 	ldrh.w	r8, [sp, #32]
  if((y + cursorY < 0) || (y + cursorY > height)) {return;}
 80a1a64:	d419      	bmi.n	80a1a9a <_ZN15DFRobot_Display9drawHLineEssst+0x4a>
 80a1a66:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 80a1a6a:	428a      	cmp	r2, r1
 80a1a6c:	dc15      	bgt.n	80a1a9a <_ZN15DFRobot_Display9drawHLineEssst+0x4a>
  int8_t        direction = 1;
  int16_t       var1 = x + width_;
  if(width_ < 0) {
    direction = -1;
 80a1a6e:	2b00      	cmp	r3, #0

void DFRobot_Display::drawHLine(int16_t x, int16_t y, int16_t width_, uint16_t color)
{
  if((y + cursorY < 0) || (y + cursorY > height)) {return;}
  int8_t        direction = 1;
  int16_t       var1 = x + width_;
 80a1a70:	eb04 0703 	add.w	r7, r4, r3
 80a1a74:	b23f      	sxth	r7, r7
  if(width_ < 0) {
    direction = -1;
 80a1a76:	bfac      	ite	ge
 80a1a78:	f04f 0901 	movge.w	r9, #1
 80a1a7c:	f04f 39ff 	movlt.w	r9, #4294967295
  }
  for(; x != var1; x += direction) {
 80a1a80:	42a7      	cmp	r7, r4
 80a1a82:	d00a      	beq.n	80a1a9a <_ZN15DFRobot_Display9drawHLineEssst+0x4a>
    drawPixel(x, y, color);
 80a1a84:	682b      	ldr	r3, [r5, #0]
 80a1a86:	4621      	mov	r1, r4
 80a1a88:	f8d3 a010 	ldr.w	sl, [r3, #16]
 80a1a8c:	4632      	mov	r2, r6
 80a1a8e:	4643      	mov	r3, r8
 80a1a90:	4628      	mov	r0, r5
 80a1a92:	444c      	add	r4, r9
 80a1a94:	47d0      	blx	sl
 80a1a96:	b224      	sxth	r4, r4
 80a1a98:	e7f2      	b.n	80a1a80 <_ZN15DFRobot_Display9drawHLineEssst+0x30>
 80a1a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a1a9e <_ZN15DFRobot_Display9drawVLineEssst>:
    *pX += textWidth * textSize;
  }
}

void DFRobot_Display::drawVLine(int16_t x, int16_t y, int16_t height_, uint16_t color)
{
 80a1a9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a1aa2:	4614      	mov	r4, r2
  if((x + cursorX < 0) || (x + cursorX > width)) {return;}
 80a1aa4:	f9b0 2018 	ldrsh.w	r2, [r0, #24]
    *pX += textWidth * textSize;
  }
}

void DFRobot_Display::drawVLine(int16_t x, int16_t y, int16_t height_, uint16_t color)
{
 80a1aa8:	4605      	mov	r5, r0
  if((x + cursorX < 0) || (x + cursorX > width)) {return;}
 80a1aaa:	1852      	adds	r2, r2, r1
    *pX += textWidth * textSize;
  }
}

void DFRobot_Display::drawVLine(int16_t x, int16_t y, int16_t height_, uint16_t color)
{
 80a1aac:	460e      	mov	r6, r1
 80a1aae:	f8bd 8020 	ldrh.w	r8, [sp, #32]
  if((x + cursorX < 0) || (x + cursorX > width)) {return;}
 80a1ab2:	d419      	bmi.n	80a1ae8 <_ZN15DFRobot_Display9drawVLineEssst+0x4a>
 80a1ab4:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80a1ab8:	428a      	cmp	r2, r1
 80a1aba:	dc15      	bgt.n	80a1ae8 <_ZN15DFRobot_Display9drawVLineEssst+0x4a>
  int8_t        direction = 1;
  int16_t       var1 = y + height_;
  if(height_ < 0) {
    direction = -1;
 80a1abc:	2b00      	cmp	r3, #0

void DFRobot_Display::drawVLine(int16_t x, int16_t y, int16_t height_, uint16_t color)
{
  if((x + cursorX < 0) || (x + cursorX > width)) {return;}
  int8_t        direction = 1;
  int16_t       var1 = y + height_;
 80a1abe:	eb04 0703 	add.w	r7, r4, r3
 80a1ac2:	b23f      	sxth	r7, r7
  if(height_ < 0) {
    direction = -1;
 80a1ac4:	bfac      	ite	ge
 80a1ac6:	f04f 0901 	movge.w	r9, #1
 80a1aca:	f04f 39ff 	movlt.w	r9, #4294967295
  }
  for(; y != var1; y += direction) {
 80a1ace:	42a7      	cmp	r7, r4
 80a1ad0:	d00a      	beq.n	80a1ae8 <_ZN15DFRobot_Display9drawVLineEssst+0x4a>
    drawPixel(x, y, color);
 80a1ad2:	682b      	ldr	r3, [r5, #0]
 80a1ad4:	4622      	mov	r2, r4
 80a1ad6:	f8d3 a010 	ldr.w	sl, [r3, #16]
 80a1ada:	4631      	mov	r1, r6
 80a1adc:	4643      	mov	r3, r8
 80a1ade:	4628      	mov	r0, r5
 80a1ae0:	444c      	add	r4, r9
 80a1ae2:	47d0      	blx	sl
 80a1ae4:	b224      	sxth	r4, r4
 80a1ae6:	e7f2      	b.n	80a1ace <_ZN15DFRobot_Display9drawVLineEssst+0x30>
 80a1ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a1aec <_ZN15DFRobot_Display14drawPixelWidthEss12eDirection_tt>:
      if(abs(abs(x0) - abs(x1)) > abs(abs(y0) - abs(y1)))
        return eDIRECTION_VERTICAL;
      return eDIRECTION_HORIZONTAL;
    }

    void drawPixelWidth(int16_t x, int16_t y, eDirection_t eDirection, uint16_t color)
 80a1aec:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
      if(lineWidth == 1) {
 80a1aee:	8bc4      	ldrh	r4, [r0, #30]
      if(abs(abs(x0) - abs(x1)) > abs(abs(y0) - abs(y1)))
        return eDIRECTION_VERTICAL;
      return eDIRECTION_HORIZONTAL;
    }

    void drawPixelWidth(int16_t x, int16_t y, eDirection_t eDirection, uint16_t color)
 80a1af0:	4686      	mov	lr, r0
    {
      if(lineWidth == 1) {
 80a1af2:	2c01      	cmp	r4, #1
      if(abs(abs(x0) - abs(x1)) > abs(abs(y0) - abs(y1)))
        return eDIRECTION_VERTICAL;
      return eDIRECTION_HORIZONTAL;
    }

    void drawPixelWidth(int16_t x, int16_t y, eDirection_t eDirection, uint16_t color)
 80a1af4:	4615      	mov	r5, r2
 80a1af6:	f8bd 6014 	ldrh.w	r6, [sp, #20]
    {
      if(lineWidth == 1) {
 80a1afa:	d106      	bne.n	80a1b0a <_ZN15DFRobot_Display14drawPixelWidthEss12eDirection_tt+0x1e>
        drawPixel(x, y, color);
 80a1afc:	6803      	ldr	r3, [r0, #0]
 80a1afe:	691c      	ldr	r4, [r3, #16]
 80a1b00:	4633      	mov	r3, r6
 80a1b02:	46a4      	mov	ip, r4
          drawHLine(x - (lineWidth / 2), y, lineWidth, color);
        } else {
          drawVLine(x, y - (lineWidth / 2), lineWidth, color);
        }
      }
    }
 80a1b04:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    }

    void drawPixelWidth(int16_t x, int16_t y, eDirection_t eDirection, uint16_t color)
    {
      if(lineWidth == 1) {
        drawPixel(x, y, color);
 80a1b08:	4760      	bx	ip
      } else if(lineWidth > 1) {
 80a1b0a:	d916      	bls.n	80a1b3a <_ZN15DFRobot_Display14drawPixelWidthEss12eDirection_tt+0x4e>
        if(eDirection == eDIRECTION_HORIZONTAL) {
 80a1b0c:	2b01      	cmp	r3, #1
 80a1b0e:	f8d0 e000 	ldr.w	lr, [r0]
          drawHLine(x - (lineWidth / 2), y, lineWidth, color);
 80a1b12:	bf0c      	ite	eq
 80a1b14:	9605      	streq	r6, [sp, #20]
        } else {
          drawVLine(x, y - (lineWidth / 2), lineWidth, color);
 80a1b16:	9605      	strne	r6, [sp, #20]
 80a1b18:	b223      	sxth	r3, r4
 80a1b1a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80a1b1e:	bf15      	itete	ne
 80a1b20:	1b2a      	subne	r2, r5, r4
    {
      if(lineWidth == 1) {
        drawPixel(x, y, color);
      } else if(lineWidth > 1) {
        if(eDirection == eDIRECTION_HORIZONTAL) {
          drawHLine(x - (lineWidth / 2), y, lineWidth, color);
 80a1b22:	f8de 501c 	ldreq.w	r5, [lr, #28]
        } else {
          drawVLine(x, y - (lineWidth / 2), lineWidth, color);
 80a1b26:	f8de 5018 	ldrne.w	r5, [lr, #24]
    {
      if(lineWidth == 1) {
        drawPixel(x, y, color);
      } else if(lineWidth > 1) {
        if(eDirection == eDIRECTION_HORIZONTAL) {
          drawHLine(x - (lineWidth / 2), y, lineWidth, color);
 80a1b2a:	1b09      	subeq	r1, r1, r4
        } else {
          drawVLine(x, y - (lineWidth / 2), lineWidth, color);
 80a1b2c:	46ac      	mov	ip, r5
        }
      }
    }
 80a1b2e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    {
      if(lineWidth == 1) {
        drawPixel(x, y, color);
      } else if(lineWidth > 1) {
        if(eDirection == eDIRECTION_HORIZONTAL) {
          drawHLine(x - (lineWidth / 2), y, lineWidth, color);
 80a1b32:	bf0c      	ite	eq
 80a1b34:	b209      	sxtheq	r1, r1
        } else {
          drawVLine(x, y - (lineWidth / 2), lineWidth, color);
 80a1b36:	b212      	sxthne	r2, r2
 80a1b38:	4760      	bx	ip
 80a1b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1b3c <_ZN15DFRobot_Display8drawLineEsssst>:
  }
}

void DFRobot_Display::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, 
                                       uint16_t color)
{
 80a1b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1b40:	4698      	mov	r8, r3
 80a1b42:	4616      	mov	r6, r2
 80a1b44:	b087      	sub	sp, #28
 80a1b46:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 80a1b4a:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 80a1b4e:	9205      	str	r2, [sp, #20]
    }

    eDirection_t calcLineDirection(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
    {
      if(abs(abs(x0) - abs(x1)) > abs(abs(y0) - abs(y1)))
        return eDIRECTION_VERTICAL;
 80a1b50:	ea88 7ee8 	eor.w	lr, r8, r8, asr #31
 80a1b54:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
  int16_t       dx = abs(x1 - x0), dy = abs(y1 - y0);
 80a1b58:	ebc1 0408 	rsb	r4, r1, r8
 80a1b5c:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
 80a1b60:	ebae 7ee8 	sub.w	lr, lr, r8, asr #31
 80a1b64:	ebce 0e02 	rsb	lr, lr, r2
 80a1b68:	2c00      	cmp	r4, #0
 80a1b6a:	eba3 0706 	sub.w	r7, r3, r6
 80a1b6e:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
 80a1b72:	ea83 7ce3 	eor.w	ip, r3, r3, asr #31
 80a1b76:	bfb8      	it	lt
 80a1b78:	4264      	neglt	r4, r4
 80a1b7a:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
 80a1b7e:	2f00      	cmp	r7, #0
 80a1b80:	ebac 7ce3 	sub.w	ip, ip, r3, asr #31
 80a1b84:	ebcc 0202 	rsb	r2, ip, r2
 80a1b88:	bfb8      	it	lt
 80a1b8a:	427f      	neglt	r7, r7
 80a1b8c:	f1be 0f00 	cmp.w	lr, #0
 80a1b90:	bfb8      	it	lt
 80a1b92:	f1ce 0e00 	rsblt	lr, lr, #0
 80a1b96:	2a00      	cmp	r2, #0
 80a1b98:	bfb8      	it	lt
 80a1b9a:	4252      	neglt	r2, r2
 80a1b9c:	4596      	cmp	lr, r2
 80a1b9e:	b224      	sxth	r4, r4
 80a1ba0:	b23f      	sxth	r7, r7
 80a1ba2:	bfcc      	ite	gt
 80a1ba4:	2200      	movgt	r2, #0
 80a1ba6:	2201      	movle	r2, #1
  uint8_t       steep = 0;

  eDirection_t  eDirection = calcLineDirection(x0, y0, x1, y1);
  if(dx < dy) {
 80a1ba8:	42bc      	cmp	r4, r7
  }
}

void DFRobot_Display::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, 
                                       uint16_t color)
{
 80a1baa:	4682      	mov	sl, r0
 80a1bac:	460d      	mov	r5, r1
  int16_t       dx = abs(x1 - x0), dy = abs(y1 - y0);
 80a1bae:	4640      	mov	r0, r8
 80a1bb0:	9204      	str	r2, [sp, #16]
  uint8_t       steep = 0;

  eDirection_t  eDirection = calcLineDirection(x0, y0, x1, y1);
  if(dx < dy) {
 80a1bb2:	da08      	bge.n	80a1bc6 <_ZN15DFRobot_Display8drawLineEsssst+0x8a>
 80a1bb4:	4622      	mov	r2, r4
    steep = 1;
    swap_int16(x0, y0);
    swap_int16(x1, y1);
 80a1bb6:	4698      	mov	r8, r3
{
  int16_t       dx = abs(x1 - x0), dy = abs(y1 - y0);
  uint8_t       steep = 0;

  eDirection_t  eDirection = calcLineDirection(x0, y0, x1, y1);
  if(dx < dy) {
 80a1bb8:	463c      	mov	r4, r7
    steep = 1;
    swap_int16(x0, y0);
 80a1bba:	4635      	mov	r5, r6
{
  int16_t       dx = abs(x1 - x0), dy = abs(y1 - y0);
  uint8_t       steep = 0;

  eDirection_t  eDirection = calcLineDirection(x0, y0, x1, y1);
  if(dx < dy) {
 80a1bbc:	4617      	mov	r7, r2
    steep = 1;
    swap_int16(x0, y0);
    swap_int16(x1, y1);
 80a1bbe:	4603      	mov	r3, r0
  uint8_t       steep = 0;

  eDirection_t  eDirection = calcLineDirection(x0, y0, x1, y1);
  if(dx < dy) {
    steep = 1;
    swap_int16(x0, y0);
 80a1bc0:	460e      	mov	r6, r1
  int16_t       dx = abs(x1 - x0), dy = abs(y1 - y0);
  uint8_t       steep = 0;

  eDirection_t  eDirection = calcLineDirection(x0, y0, x1, y1);
  if(dx < dy) {
    steep = 1;
 80a1bc2:	2201      	movs	r2, #1
 80a1bc4:	e000      	b.n	80a1bc8 <_ZN15DFRobot_Display8drawLineEsssst+0x8c>

void DFRobot_Display::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, 
                                       uint16_t color)
{
  int16_t       dx = abs(x1 - x0), dy = abs(y1 - y0);
  uint8_t       steep = 0;
 80a1bc6:	2200      	movs	r2, #0
    steep = 1;
    swap_int16(x0, y0);
    swap_int16(x1, y1);
    swap_int16(dx, dy);
  }
  int8_t        dirX = (x1 - x0) > 0 ? 1 : -1;
 80a1bc8:	ebc5 0108 	rsb	r1, r5, r8
 80a1bcc:	2900      	cmp	r1, #0
  int8_t        dirY = (y1 - y0) > 0 ? 1 : -1;
 80a1bce:	eba3 0306 	sub.w	r3, r3, r6
    steep = 1;
    swap_int16(x0, y0);
    swap_int16(x1, y1);
    swap_int16(dx, dy);
  }
  int8_t        dirX = (x1 - x0) > 0 ? 1 : -1;
 80a1bd2:	bfcc      	ite	gt
 80a1bd4:	2101      	movgt	r1, #1
 80a1bd6:	f04f 31ff 	movle.w	r1, #4294967295
  int8_t        dirY = (y1 - y0) > 0 ? 1 : -1;
  int16_t       endX = x0, endY = y0;
  int32_t       var1 = dy * 2;
 80a1bda:	ea4f 0947 	mov.w	r9, r7, lsl #1
    swap_int16(x0, y0);
    swap_int16(x1, y1);
    swap_int16(dx, dy);
  }
  int8_t        dirX = (x1 - x0) > 0 ? 1 : -1;
  int8_t        dirY = (y1 - y0) > 0 ? 1 : -1;
 80a1bde:	2b00      	cmp	r3, #0
  int16_t       endX = x0, endY = y0;
  int32_t       var1 = dy * 2;
  int32_t       var2 = (dy - dx) * 2;
 80a1be0:	eba7 0704 	sub.w	r7, r7, r4
    steep = 1;
    swap_int16(x0, y0);
    swap_int16(x1, y1);
    swap_int16(dx, dy);
  }
  int8_t        dirX = (x1 - x0) > 0 ? 1 : -1;
 80a1be4:	9103      	str	r1, [sp, #12]
  int8_t        dirY = (y1 - y0) > 0 ? 1 : -1;
 80a1be6:	bfcc      	ite	gt
 80a1be8:	f04f 0b01 	movgt.w	fp, #1
 80a1bec:	f04f 3bff 	movle.w	fp, #4294967295
  int16_t       endX = x0, endY = y0;
  int32_t       var1 = dy * 2;
  int32_t       var2 = (dy - dx) * 2;
 80a1bf0:	007f      	lsls	r7, r7, #1
  int32_t       var3 = dy * 2 -dx;
 80a1bf2:	ebc4 0409 	rsb	r4, r4, r9

  if(steep) {
 80a1bf6:	b1aa      	cbz	r2, 80a1c24 <_ZN15DFRobot_Display8drawLineEsssst+0xe8>
    while(endX != x1) {
 80a1bf8:	45a8      	cmp	r8, r5
 80a1bfa:	d029      	beq.n	80a1c50 <_ZN15DFRobot_Display8drawLineEsssst+0x114>
      if(var3 < 0) {
 80a1bfc:	2c00      	cmp	r4, #0
        var3 += var1;
      } else {
        endY += dirY;
 80a1bfe:	bfa8      	it	ge
 80a1c00:	445e      	addge	r6, fp
        var3 += var2;
      }
      // drawPixel(endY, endX, color);
      drawPixelWidth(endY, endX, eDirection, color);
 80a1c02:	9b05      	ldr	r3, [sp, #20]
  if(steep) {
    while(endX != x1) {
      if(var3 < 0) {
        var3 += var1;
      } else {
        endY += dirY;
 80a1c04:	bfa8      	it	ge
 80a1c06:	b236      	sxthge	r6, r6
        var3 += var2;
      }
      // drawPixel(endY, endX, color);
      drawPixelWidth(endY, endX, eDirection, color);
 80a1c08:	9300      	str	r3, [sp, #0]
 80a1c0a:	462a      	mov	r2, r5
 80a1c0c:	9b04      	ldr	r3, [sp, #16]
 80a1c0e:	4631      	mov	r1, r6
 80a1c10:	4650      	mov	r0, sl
  int32_t       var3 = dy * 2 -dx;

  if(steep) {
    while(endX != x1) {
      if(var3 < 0) {
        var3 += var1;
 80a1c12:	bfb4      	ite	lt
 80a1c14:	444c      	addlt	r4, r9
      } else {
        endY += dirY;
        var3 += var2;
 80a1c16:	19e4      	addge	r4, r4, r7
      }
      // drawPixel(endY, endX, color);
      drawPixelWidth(endY, endX, eDirection, color);
 80a1c18:	f7ff ff68 	bl	80a1aec <_ZN15DFRobot_Display14drawPixelWidthEss12eDirection_tt>
 80a1c1c:	9b03      	ldr	r3, [sp, #12]
 80a1c1e:	441d      	add	r5, r3
 80a1c20:	b22d      	sxth	r5, r5
  int32_t       var1 = dy * 2;
  int32_t       var2 = (dy - dx) * 2;
  int32_t       var3 = dy * 2 -dx;

  if(steep) {
    while(endX != x1) {
 80a1c22:	e7e9      	b.n	80a1bf8 <_ZN15DFRobot_Display8drawLineEsssst+0xbc>
      // drawPixel(endY, endX, color);
      drawPixelWidth(endY, endX, eDirection, color);
      endX += dirX;
    }
  } else {
    while(endX != x1) {
 80a1c24:	45a8      	cmp	r8, r5
 80a1c26:	d013      	beq.n	80a1c50 <_ZN15DFRobot_Display8drawLineEsssst+0x114>
      if(var3 < 0) {
 80a1c28:	2c00      	cmp	r4, #0
        var3 += var1;
      } else {
        endY += dirY;
 80a1c2a:	bfa8      	it	ge
 80a1c2c:	445e      	addge	r6, fp
        var3 += var2;
      }
      // drawPixel(endX, endY, color);
      drawPixelWidth(endX, endY, eDirection, color);
 80a1c2e:	9b05      	ldr	r3, [sp, #20]
  } else {
    while(endX != x1) {
      if(var3 < 0) {
        var3 += var1;
      } else {
        endY += dirY;
 80a1c30:	bfa8      	it	ge
 80a1c32:	b236      	sxthge	r6, r6
        var3 += var2;
      }
      // drawPixel(endX, endY, color);
      drawPixelWidth(endX, endY, eDirection, color);
 80a1c34:	9300      	str	r3, [sp, #0]
 80a1c36:	4629      	mov	r1, r5
 80a1c38:	9b04      	ldr	r3, [sp, #16]
 80a1c3a:	4632      	mov	r2, r6
 80a1c3c:	4650      	mov	r0, sl
      endX += dirX;
    }
  } else {
    while(endX != x1) {
      if(var3 < 0) {
        var3 += var1;
 80a1c3e:	bfb4      	ite	lt
 80a1c40:	444c      	addlt	r4, r9
      } else {
        endY += dirY;
        var3 += var2;
 80a1c42:	19e4      	addge	r4, r4, r7
      }
      // drawPixel(endX, endY, color);
      drawPixelWidth(endX, endY, eDirection, color);
 80a1c44:	f7ff ff52 	bl	80a1aec <_ZN15DFRobot_Display14drawPixelWidthEss12eDirection_tt>
 80a1c48:	9b03      	ldr	r3, [sp, #12]
 80a1c4a:	441d      	add	r5, r3
 80a1c4c:	b22d      	sxth	r5, r5
      // drawPixel(endY, endX, color);
      drawPixelWidth(endY, endX, eDirection, color);
      endX += dirX;
    }
  } else {
    while(endX != x1) {
 80a1c4e:	e7e9      	b.n	80a1c24 <_ZN15DFRobot_Display8drawLineEsssst+0xe8>
      // drawPixel(endX, endY, color);
      drawPixelWidth(endX, endY, eDirection, color);
      endX += dirX;
    }
  }
}
 80a1c50:	b007      	add	sp, #28
 80a1c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080a1c58 <_ZN15DFRobot_DisplayC1Ett>:
#include "DFRobot_Display.h"

DFRobot_Display::DFRobot_Display(uint16_t width_, uint16_t height_)
 80a1c58:	b510      	push	{r4, lr}
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1c5a:	2400      	movs	r4, #0
 80a1c5c:	6044      	str	r4, [r0, #4]
 80a1c5e:	4c08      	ldr	r4, [pc, #32]	; (80a1c80 <_ZN15DFRobot_DisplayC1Ett+0x28>)
 80a1c60:	6004      	str	r4, [r0, #0]
{
  width = width_ - 1;
 80a1c62:	1e4c      	subs	r4, r1, #1
  height = height_ - 1;
  rawWidth = width - 1;
 80a1c64:	3902      	subs	r1, #2
#include "DFRobot_Display.h"

DFRobot_Display::DFRobot_Display(uint16_t width_, uint16_t height_)
{
  width = width_ - 1;
 80a1c66:	8104      	strh	r4, [r0, #8]
  height = height_ - 1;
  rawWidth = width - 1;
 80a1c68:	8181      	strh	r1, [r0, #12]
#include "DFRobot_Display.h"

DFRobot_Display::DFRobot_Display(uint16_t width_, uint16_t height_)
{
  width = width_ - 1;
  height = height_ - 1;
 80a1c6a:	1e54      	subs	r4, r2, #1
  rawWidth = width - 1;
  rawHeight = height - 1;
  textSize = 1;
  pfCharacterFont = DFRobot_Character_getCharacter;
 80a1c6c:	4905      	ldr	r1, [pc, #20]	; (80a1c84 <_ZN15DFRobot_DisplayC1Ett+0x2c>)
DFRobot_Display::DFRobot_Display(uint16_t width_, uint16_t height_)
{
  width = width_ - 1;
  height = height_ - 1;
  rawWidth = width - 1;
  rawHeight = height - 1;
 80a1c6e:	3a02      	subs	r2, #2
 80a1c70:	81c2      	strh	r2, [r0, #14]
  textSize = 1;
 80a1c72:	2201      	movs	r2, #1
#include "DFRobot_Display.h"

DFRobot_Display::DFRobot_Display(uint16_t width_, uint16_t height_)
{
  width = width_ - 1;
  height = height_ - 1;
 80a1c74:	8144      	strh	r4, [r0, #10]
  rawWidth = width - 1;
  rawHeight = height - 1;
  textSize = 1;
 80a1c76:	8282      	strh	r2, [r0, #20]
  pfCharacterFont = DFRobot_Character_getCharacter;
 80a1c78:	6201      	str	r1, [r0, #32]
  lineWidth = 1;
 80a1c7a:	83c2      	strh	r2, [r0, #30]
}
 80a1c7c:	bd10      	pop	{r4, pc}
 80a1c7e:	bf00      	nop
 80a1c80:	080a5e28 	.word	0x080a5e28
 80a1c84:	080a00c9 	.word	0x080a00c9

080a1c88 <_ZN15DFRobot_Display8drawTextEPsS0_PKc>:
  drawText(&printfX, &printfY, (const char*)pCh);
  return strlen((const char*)pCh);
}

int16_t DFRobot_Display::drawText(int16_t* pX, int16_t* pY, const char* ch)
{
 80a1c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1c8c:	469a      	mov	sl, r3
 80a1c8e:	b091      	sub	sp, #68	; 0x44
 80a1c90:	4615      	mov	r5, r2
  uint8_t       characterBuffer[32] = {0};
 80a1c92:	2220      	movs	r2, #32
  drawText(&printfX, &printfY, (const char*)pCh);
  return strlen((const char*)pCh);
}

int16_t DFRobot_Display::drawText(int16_t* pX, int16_t* pY, const char* ch)
{
 80a1c94:	4604      	mov	r4, r0
 80a1c96:	4689      	mov	r9, r1
  uint8_t       characterBuffer[32] = {0};
 80a1c98:	eb0d 0002 	add.w	r0, sp, r2
 80a1c9c:	2100      	movs	r1, #0
 80a1c9e:	f003 fee0 	bl	80a5a62 <memset>
  uint8_t       rslt = 0;
  uint8_t       i = 0, j = 0, k = 0;
  uint8_t       var1 = 0;
  uint8_t       textWidth = 0, textHeight = 0;
 80a1ca2:	2600      	movs	r6, #0
#ifdef _DEBUG
  _DEBUG_PRINT("\n  drawText :");
  _DEBUG_PRINT(ch);
  for(i = 0; i < strlen(ch); i ++) {
 80a1ca4:	4650      	mov	r0, sl
{
  uint8_t       characterBuffer[32] = {0};
  uint8_t       rslt = 0;
  uint8_t       i = 0, j = 0, k = 0;
  uint8_t       var1 = 0;
  uint8_t       textWidth = 0, textHeight = 0;
 80a1ca6:	f88d 601e 	strb.w	r6, [sp, #30]
 80a1caa:	f88d 601f 	strb.w	r6, [sp, #31]
#ifdef _DEBUG
  _DEBUG_PRINT("\n  drawText :");
  _DEBUG_PRINT(ch);
  for(i = 0; i < strlen(ch); i ++) {
 80a1cae:	f003 ff09 	bl	80a5ac4 <strlen>
 80a1cb2:	b2f3      	uxtb	r3, r6
 80a1cb4:	4283      	cmp	r3, r0
 80a1cb6:	f106 0601 	add.w	r6, r6, #1
 80a1cba:	d3fa      	bcc.n	80a1cb2 <_ZN15DFRobot_Display8drawTextEPsS0_PKc+0x2a>
    _DEBUG_PRINT(" ");
    _DEBUG_PRINTVAR(ch[i], HEX);
  }
#endif

  while(*ch) {
 80a1cbc:	f89a 3000 	ldrb.w	r3, [sl]
 80a1cc0:	2b00      	cmp	r3, #0
 80a1cc2:	f000 8119 	beq.w	80a1ef8 <_ZN15DFRobot_Display8drawTextEPsS0_PKc+0x270>
    //get character
    rslt = pfCharacterFont((uint8_t*) ch, characterBuffer, &textWidth, &textHeight);
 80a1cc6:	6a26      	ldr	r6, [r4, #32]
 80a1cc8:	f10d 031f 	add.w	r3, sp, #31
 80a1ccc:	f10d 021e 	add.w	r2, sp, #30
 80a1cd0:	a908      	add	r1, sp, #32
 80a1cd2:	4650      	mov	r0, sl
 80a1cd4:	47b0      	blx	r6
    fillRect(*pX - cursorX, *pY - cursorY, textWidth * textSize, textHeight * textSize, textBackground);
 80a1cd6:	8829      	ldrh	r1, [r5, #0]
 80a1cd8:	8b62      	ldrh	r2, [r4, #26]
  }
#endif

  while(*ch) {
    //get character
    rslt = pfCharacterFont((uint8_t*) ch, characterBuffer, &textWidth, &textHeight);
 80a1cda:	b2c6      	uxtb	r6, r0
    fillRect(*pX - cursorX, *pY - cursorY, textWidth * textSize, textHeight * textSize, textBackground);
 80a1cdc:	1a8a      	subs	r2, r1, r2
 80a1cde:	f8b9 0000 	ldrh.w	r0, [r9]
 80a1ce2:	8b21      	ldrh	r1, [r4, #24]
 80a1ce4:	f8b4 e014 	ldrh.w	lr, [r4, #20]
 80a1ce8:	1a41      	subs	r1, r0, r1
 80a1cea:	8a60      	ldrh	r0, [r4, #18]
 80a1cec:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80a1cf0:	9001      	str	r0, [sp, #4]
 80a1cf2:	f89d 001f 	ldrb.w	r0, [sp, #31]
 80a1cf6:	fb03 f30e 	mul.w	r3, r3, lr
 80a1cfa:	fb00 f00e 	mul.w	r0, r0, lr
 80a1cfe:	6827      	ldr	r7, [r4, #0]
 80a1d00:	b200      	sxth	r0, r0
 80a1d02:	9000      	str	r0, [sp, #0]
 80a1d04:	b21b      	sxth	r3, r3
 80a1d06:	b212      	sxth	r2, r2
 80a1d08:	b209      	sxth	r1, r1
 80a1d0a:	6a7f      	ldr	r7, [r7, #36]	; 0x24
 80a1d0c:	4620      	mov	r0, r4
 80a1d0e:	47b8      	blx	r7
    }
#endif
    if(rslt < 0) {
      return rslt;
    } else {
      if(*ch > 0x06 && *ch < 0x0e) {
 80a1d10:	f89a 3000 	ldrb.w	r3, [sl]
 80a1d14:	eb0a 0106 	add.w	r1, sl, r6
 80a1d18:	1fda      	subs	r2, r3, #7
 80a1d1a:	2a06      	cmp	r2, #6
 80a1d1c:	d80e      	bhi.n	80a1d3c <_ZN15DFRobot_Display8drawTextEPsS0_PKc+0xb4>
        if(*ch == '\n') {
 80a1d1e:	2b0a      	cmp	r3, #10
 80a1d20:	d10a      	bne.n	80a1d38 <_ZN15DFRobot_Display8drawTextEPsS0_PKc+0xb0>
          *pX = 0;
 80a1d22:	f04f 0300 	mov.w	r3, #0
 80a1d26:	f8a9 3000 	strh.w	r3, [r9]
          *pY += textHeight * textSize;
 80a1d2a:	8aa2      	ldrh	r2, [r4, #20]
 80a1d2c:	882b      	ldrh	r3, [r5, #0]
 80a1d2e:	f89d 001f 	ldrb.w	r0, [sp, #31]
 80a1d32:	fb00 3302 	mla	r3, r0, r2, r3
 80a1d36:	802b      	strh	r3, [r5, #0]
        }
        ch += rslt;
 80a1d38:	468a      	mov	sl, r1
        continue;
 80a1d3a:	e7bf      	b.n	80a1cbc <_ZN15DFRobot_Display8drawTextEPsS0_PKc+0x34>
      }
      ch += rslt;
      //check range
      if(*pX > rawWidth - textWidth * textSize) {
 80a1d3c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 80a1d40:	f89d 201e 	ldrb.w	r2, [sp, #30]
 80a1d44:	8aa3      	ldrh	r3, [r4, #20]
          *pY += textHeight * textSize;
        }
        ch += rslt;
        continue;
      }
      ch += rslt;
 80a1d46:	468a      	mov	sl, r1
      //check range
      if(*pX > rawWidth - textWidth * textSize) {
 80a1d48:	fb03 0312 	mls	r3, r3, r2, r0
 80a1d4c:	f9b9 1000 	ldrsh.w	r1, [r9]
 80a1d50:	4299      	cmp	r1, r3
 80a1d52:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80a1d56:	dd08      	ble.n	80a1d6a <_ZN15DFRobot_Display8drawTextEPsS0_PKc+0xe2>
        *pX = 0;
 80a1d58:	f04f 0200 	mov.w	r2, #0
 80a1d5c:	f8a9 2000 	strh.w	r2, [r9]
        *pY += textHeight * textSize;
 80a1d60:	8aa2      	ldrh	r2, [r4, #20]
 80a1d62:	8829      	ldrh	r1, [r5, #0]
 80a1d64:	fb03 1202 	mla	r2, r3, r2, r1
 80a1d68:	802a      	strh	r2, [r5, #0]
      }
      if(*pY > rawHeight - textHeight * textSize) {
 80a1d6a:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 80a1d6e:	8aa2      	ldrh	r2, [r4, #20]
 80a1d70:	f9b5 1000 	ldrsh.w	r1, [r5]
 80a1d74:	fb03 0212 	mls	r2, r3, r2, r0
 80a1d78:	4291      	cmp	r1, r2
 80a1d7a:	dd01      	ble.n	80a1d80 <_ZN15DFRobot_Display8drawTextEPsS0_PKc+0xf8>
 80a1d7c:	2001      	movs	r0, #1
 80a1d7e:	e0bb      	b.n	80a1ef8 <_ZN15DFRobot_Display8drawTextEPsS0_PKc+0x270>
        return DISPLAY_WAR_OUTRANGE;
      }
      if(rslt > 1) {
 80a1d80:	2e01      	cmp	r6, #1
 80a1d82:	d941      	bls.n	80a1e08 <_ZN15DFRobot_Display8drawTextEPsS0_PKc+0x180>
 80a1d84:	2300      	movs	r3, #0
 80a1d86:	9302      	str	r3, [sp, #8]
          data: 0xf0, 0x0f, 0x55, 0xaa ...
          display pixel: ****0000 0000****
                         0*0*0*0* *0*0*0*0
        */
        for(i = 0; i < 32; i ++) {
          var1 = characterBuffer[i];
 80a1d88:	9a02      	ldr	r2, [sp, #8]
 80a1d8a:	ab08      	add	r3, sp, #32
 80a1d8c:	f89d b008 	ldrb.w	fp, [sp, #8]
 80a1d90:	5cd3      	ldrb	r3, [r2, r3]
          for(j = 0; j < 8; j ++) {
            if(var1 & (0x01 << j)) {
              for(k = 0; k < textSize; k ++) {
                drawVLine(*pX + (i % 2) * 8 * textSize + j * textSize + k - cursorX, 
 80a1d92:	2700      	movs	r7, #0
          data: 0xf0, 0x0f, 0x55, 0xaa ...
          display pixel: ****0000 0000****
                         0*0*0*0* *0*0*0*0
        */
        for(i = 0; i < 32; i ++) {
          var1 = characterBuffer[i];
 80a1d94:	9303      	str	r3, [sp, #12]
          for(j = 0; j < 8; j ++) {
            if(var1 & (0x01 << j)) {
              for(k = 0; k < textSize; k ++) {
                drawVLine(*pX + (i % 2) * 8 * textSize + j * textSize + k - cursorX, 
 80a1d96:	f00b 0301 	and.w	r3, fp, #1
 80a1d9a:	00db      	lsls	r3, r3, #3
 80a1d9c:	b29b      	uxth	r3, r3
 80a1d9e:	9304      	str	r3, [sp, #16]
 80a1da0:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
                         0*0*0*0* *0*0*0*0
        */
        for(i = 0; i < 32; i ++) {
          var1 = characterBuffer[i];
          for(j = 0; j < 8; j ++) {
            if(var1 & (0x01 << j)) {
 80a1da4:	9b03      	ldr	r3, [sp, #12]
 80a1da6:	413b      	asrs	r3, r7
 80a1da8:	07d9      	lsls	r1, r3, #31
 80a1daa:	d524      	bpl.n	80a1df6 <_ZN15DFRobot_Display8drawTextEPsS0_PKc+0x16e>
 80a1dac:	9b04      	ldr	r3, [sp, #16]
 80a1dae:	f04f 0800 	mov.w	r8, #0
 80a1db2:	443b      	add	r3, r7
 80a1db4:	b29b      	uxth	r3, r3
 80a1db6:	9305      	str	r3, [sp, #20]
              for(k = 0; k < textSize; k ++) {
 80a1db8:	8aa3      	ldrh	r3, [r4, #20]
 80a1dba:	fa5f fe88 	uxtb.w	lr, r8
 80a1dbe:	459e      	cmp	lr, r3
 80a1dc0:	f108 0801 	add.w	r8, r8, #1
 80a1dc4:	d217      	bcs.n	80a1df6 <_ZN15DFRobot_Display8drawTextEPsS0_PKc+0x16e>
                drawVLine(*pX + (i % 2) * 8 * textSize + j * textSize + k - cursorX, 
                          *pY + (i / 2) * textSize - cursorY, textSize , textColor);
 80a1dc6:	8b61      	ldrh	r1, [r4, #26]
 80a1dc8:	882a      	ldrh	r2, [r5, #0]
 80a1dca:	f8b9 0000 	ldrh.w	r0, [r9]
 80a1dce:	1a52      	subs	r2, r2, r1
 80a1dd0:	8b21      	ldrh	r1, [r4, #24]
 80a1dd2:	fb0b 2203 	mla	r2, fp, r3, r2
 80a1dd6:	1a41      	subs	r1, r0, r1
 80a1dd8:	9805      	ldr	r0, [sp, #20]
 80a1dda:	b212      	sxth	r2, r2
 80a1ddc:	fb00 1103 	mla	r1, r0, r3, r1
 80a1de0:	8a20      	ldrh	r0, [r4, #16]
 80a1de2:	4471      	add	r1, lr
 80a1de4:	9000      	str	r0, [sp, #0]
 80a1de6:	6820      	ldr	r0, [r4, #0]
 80a1de8:	b21b      	sxth	r3, r3
 80a1dea:	6980      	ldr	r0, [r0, #24]
 80a1dec:	b209      	sxth	r1, r1
 80a1dee:	4606      	mov	r6, r0
 80a1df0:	4620      	mov	r0, r4
 80a1df2:	47b0      	blx	r6
        */
        for(i = 0; i < 32; i ++) {
          var1 = characterBuffer[i];
          for(j = 0; j < 8; j ++) {
            if(var1 & (0x01 << j)) {
              for(k = 0; k < textSize; k ++) {
 80a1df4:	e7e0      	b.n	80a1db8 <_ZN15DFRobot_Display8drawTextEPsS0_PKc+0x130>
 80a1df6:	3701      	adds	r7, #1
          display pixel: ****0000 0000****
                         0*0*0*0* *0*0*0*0
        */
        for(i = 0; i < 32; i ++) {
          var1 = characterBuffer[i];
          for(j = 0; j < 8; j ++) {
 80a1df8:	2f08      	cmp	r7, #8
 80a1dfa:	d1d3      	bne.n	80a1da4 <_ZN15DFRobot_Display8drawTextEPsS0_PKc+0x11c>
 80a1dfc:	9b02      	ldr	r3, [sp, #8]
 80a1dfe:	3301      	adds	r3, #1
        /*display, charater example:
          data: 0xf0, 0x0f, 0x55, 0xaa ...
          display pixel: ****0000 0000****
                         0*0*0*0* *0*0*0*0
        */
        for(i = 0; i < 32; i ++) {
 80a1e00:	2b20      	cmp	r3, #32
 80a1e02:	9302      	str	r3, [sp, #8]
 80a1e04:	d1c0      	bne.n	80a1d88 <_ZN15DFRobot_Display8drawTextEPsS0_PKc+0x100>
 80a1e06:	e06d      	b.n	80a1ee4 <_ZN15DFRobot_Display8drawTextEPsS0_PKc+0x25c>
                         0000****
                         0*0*0*0*
                         *0*0*0*0
        */
        //8 * 16 text size
        if(textHeight == 16) {
 80a1e08:	2b10      	cmp	r3, #16
 80a1e0a:	f04f 0300 	mov.w	r3, #0
 80a1e0e:	9302      	str	r3, [sp, #8]
 80a1e10:	d138      	bne.n	80a1e84 <_ZN15DFRobot_Display8drawTextEPsS0_PKc+0x1fc>
          for(i = 0; i < 16; i ++) {
            var1 = characterBuffer[i];
 80a1e12:	9a02      	ldr	r2, [sp, #8]
 80a1e14:	ab08      	add	r3, sp, #32
 80a1e16:	f812 b003 	ldrb.w	fp, [r2, r3]
 80a1e1a:	2700      	movs	r7, #0
            for(j = 0; j < 8; j ++) {
              if(var1 & (0x01 << j)) {
 80a1e1c:	fa4b f307 	asr.w	r3, fp, r7
 80a1e20:	07da      	lsls	r2, r3, #31
 80a1e22:	d520      	bpl.n	80a1e66 <_ZN15DFRobot_Display8drawTextEPsS0_PKc+0x1de>
 80a1e24:	f04f 0800 	mov.w	r8, #0
                for(k = 0; k < textSize; k ++) {
 80a1e28:	8aa3      	ldrh	r3, [r4, #20]
 80a1e2a:	fa5f fe88 	uxtb.w	lr, r8
 80a1e2e:	459e      	cmp	lr, r3
 80a1e30:	f108 0801 	add.w	r8, r8, #1
 80a1e34:	d217      	bcs.n	80a1e66 <_ZN15DFRobot_Display8drawTextEPsS0_PKc+0x1de>
                  drawVLine(*pX + j * textSize + k - cursorX, 
                            *pY + i * textSize - cursorY, textSize , textColor);
 80a1e36:	8b61      	ldrh	r1, [r4, #26]
 80a1e38:	882a      	ldrh	r2, [r5, #0]
 80a1e3a:	f8b9 0000 	ldrh.w	r0, [r9]
 80a1e3e:	1a52      	subs	r2, r2, r1
 80a1e40:	9902      	ldr	r1, [sp, #8]
 80a1e42:	fb01 2203 	mla	r2, r1, r3, r2
 80a1e46:	8b21      	ldrh	r1, [r4, #24]
 80a1e48:	b212      	sxth	r2, r2
 80a1e4a:	1a41      	subs	r1, r0, r1
 80a1e4c:	8a20      	ldrh	r0, [r4, #16]
 80a1e4e:	fb07 1103 	mla	r1, r7, r3, r1
 80a1e52:	9000      	str	r0, [sp, #0]
 80a1e54:	6820      	ldr	r0, [r4, #0]
 80a1e56:	4471      	add	r1, lr
 80a1e58:	6980      	ldr	r0, [r0, #24]
 80a1e5a:	b21b      	sxth	r3, r3
 80a1e5c:	4606      	mov	r6, r0
 80a1e5e:	b209      	sxth	r1, r1
 80a1e60:	4620      	mov	r0, r4
 80a1e62:	47b0      	blx	r6
        if(textHeight == 16) {
          for(i = 0; i < 16; i ++) {
            var1 = characterBuffer[i];
            for(j = 0; j < 8; j ++) {
              if(var1 & (0x01 << j)) {
                for(k = 0; k < textSize; k ++) {
 80a1e64:	e7e0      	b.n	80a1e28 <_ZN15DFRobot_Display8drawTextEPsS0_PKc+0x1a0>
 80a1e66:	3701      	adds	r7, #1
        */
        //8 * 16 text size
        if(textHeight == 16) {
          for(i = 0; i < 16; i ++) {
            var1 = characterBuffer[i];
            for(j = 0; j < 8; j ++) {
 80a1e68:	2f08      	cmp	r7, #8
 80a1e6a:	d1d7      	bne.n	80a1e1c <_ZN15DFRobot_Display8drawTextEPsS0_PKc+0x194>
 80a1e6c:	9b02      	ldr	r3, [sp, #8]
 80a1e6e:	3301      	adds	r3, #1
                         0*0*0*0*
                         *0*0*0*0
        */
        //8 * 16 text size
        if(textHeight == 16) {
          for(i = 0; i < 16; i ++) {
 80a1e70:	2b10      	cmp	r3, #16
 80a1e72:	9302      	str	r3, [sp, #8]
 80a1e74:	d1cd      	bne.n	80a1e12 <_ZN15DFRobot_Display8drawTextEPsS0_PKc+0x18a>
 80a1e76:	e035      	b.n	80a1ee4 <_ZN15DFRobot_Display8drawTextEPsS0_PKc+0x25c>
 80a1e78:	3601      	adds	r6, #1
          }
        //6 * 8 text size
        } else {
          for(i = 0; i < textWidth; i ++) {
            var1 = characterBuffer[i];
            for(j = 0; j < 8; j ++) {
 80a1e7a:	2e08      	cmp	r6, #8
 80a1e7c:	d10e      	bne.n	80a1e9c <_ZN15DFRobot_Display8drawTextEPsS0_PKc+0x214>
 80a1e7e:	9b02      	ldr	r3, [sp, #8]
 80a1e80:	3301      	adds	r3, #1
 80a1e82:	9302      	str	r3, [sp, #8]
 80a1e84:	f89d 8008 	ldrb.w	r8, [sp, #8]
              }
            }
          }
        //6 * 8 text size
        } else {
          for(i = 0; i < textWidth; i ++) {
 80a1e88:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80a1e8c:	4543      	cmp	r3, r8
 80a1e8e:	d929      	bls.n	80a1ee4 <_ZN15DFRobot_Display8drawTextEPsS0_PKc+0x25c>
            var1 = characterBuffer[i];
 80a1e90:	ab10      	add	r3, sp, #64	; 0x40
 80a1e92:	4443      	add	r3, r8
 80a1e94:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80a1e98:	2600      	movs	r6, #0
 80a1e9a:	9303      	str	r3, [sp, #12]
            for(j = 0; j < 8; j ++) {
              if(var1 & (0x01 << j)) {
 80a1e9c:	9b03      	ldr	r3, [sp, #12]
 80a1e9e:	4133      	asrs	r3, r6
 80a1ea0:	07db      	lsls	r3, r3, #31
 80a1ea2:	d5e9      	bpl.n	80a1e78 <_ZN15DFRobot_Display8drawTextEPsS0_PKc+0x1f0>
 80a1ea4:	f04f 0b00 	mov.w	fp, #0
                for(k = 0; k < textSize; k ++) {
 80a1ea8:	8aa3      	ldrh	r3, [r4, #20]
 80a1eaa:	fa5f fe8b 	uxtb.w	lr, fp
 80a1eae:	459e      	cmp	lr, r3
 80a1eb0:	f10b 0b01 	add.w	fp, fp, #1
 80a1eb4:	d2e0      	bcs.n	80a1e78 <_ZN15DFRobot_Display8drawTextEPsS0_PKc+0x1f0>
                  drawVLine(*pX + i * textSize + k - cursorX, *pY + j * textSize - cursorY, textSize, textColor);
 80a1eb6:	8b61      	ldrh	r1, [r4, #26]
 80a1eb8:	882a      	ldrh	r2, [r5, #0]
 80a1eba:	f8b9 0000 	ldrh.w	r0, [r9]
 80a1ebe:	1a52      	subs	r2, r2, r1
 80a1ec0:	8b21      	ldrh	r1, [r4, #24]
 80a1ec2:	fb06 2203 	mla	r2, r6, r3, r2
 80a1ec6:	1a41      	subs	r1, r0, r1
 80a1ec8:	8a20      	ldrh	r0, [r4, #16]
 80a1eca:	fb08 1103 	mla	r1, r8, r3, r1
 80a1ece:	9000      	str	r0, [sp, #0]
 80a1ed0:	6820      	ldr	r0, [r4, #0]
 80a1ed2:	4471      	add	r1, lr
 80a1ed4:	6980      	ldr	r0, [r0, #24]
 80a1ed6:	b21b      	sxth	r3, r3
 80a1ed8:	4607      	mov	r7, r0
 80a1eda:	b212      	sxth	r2, r2
 80a1edc:	b209      	sxth	r1, r1
 80a1ede:	4620      	mov	r0, r4
 80a1ee0:	47b8      	blx	r7
        } else {
          for(i = 0; i < textWidth; i ++) {
            var1 = characterBuffer[i];
            for(j = 0; j < 8; j ++) {
              if(var1 & (0x01 << j)) {
                for(k = 0; k < textSize; k ++) {
 80a1ee2:	e7e1      	b.n	80a1ea8 <_ZN15DFRobot_Display8drawTextEPsS0_PKc+0x220>
            }
          }
        }
      }
    }
    *pX += textWidth * textSize;
 80a1ee4:	8aa2      	ldrh	r2, [r4, #20]
 80a1ee6:	f8b9 3000 	ldrh.w	r3, [r9]
 80a1eea:	f89d 101e 	ldrb.w	r1, [sp, #30]
 80a1eee:	fb01 3302 	mla	r3, r1, r2, r3
 80a1ef2:	f8a9 3000 	strh.w	r3, [r9]
 80a1ef6:	e6e1      	b.n	80a1cbc <_ZN15DFRobot_Display8drawTextEPsS0_PKc+0x34>
  }
}
 80a1ef8:	b011      	add	sp, #68	; 0x44
 80a1efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a1efe <_ZN15DFRobot_Display5writeEh>:
  pfCharacterFont = DFRobot_Character_getCharacter;
  lineWidth = 1;
}

size_t DFRobot_Display::write(uint8_t ch)
{
 80a1efe:	b513      	push	{r0, r1, r4, lr}
 80a1f00:	ab02      	add	r3, sp, #8
 80a1f02:	f803 1d01 	strb.w	r1, [r3, #-1]!
  _DEBUG_PRINT("\n  print char");
  drawText(&printfX, &printfY, (const char*)&ch);
 80a1f06:	f100 0226 	add.w	r2, r0, #38	; 0x26
 80a1f0a:	f100 0124 	add.w	r1, r0, #36	; 0x24
 80a1f0e:	f7ff febb 	bl	80a1c88 <_ZN15DFRobot_Display8drawTextEPsS0_PKc>
  return 1;
}
 80a1f12:	2001      	movs	r0, #1
 80a1f14:	b002      	add	sp, #8
 80a1f16:	bd10      	pop	{r4, pc}

080a1f18 <_ZN15DFRobot_Display5writeEPKhj>:

size_t DFRobot_Display::write(const uint8_t* pCh, size_t size)
{
 80a1f18:	b538      	push	{r3, r4, r5, lr}
 80a1f1a:	460c      	mov	r4, r1
  _DEBUG_PRINT("\n  print string");
  drawText(&printfX, &printfY, (const char*)pCh);
 80a1f1c:	460b      	mov	r3, r1
 80a1f1e:	f100 0226 	add.w	r2, r0, #38	; 0x26
 80a1f22:	f100 0124 	add.w	r1, r0, #36	; 0x24
 80a1f26:	f7ff feaf 	bl	80a1c88 <_ZN15DFRobot_Display8drawTextEPsS0_PKc>
  return strlen((const char*)pCh);
 80a1f2a:	4620      	mov	r0, r4
}
 80a1f2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

size_t DFRobot_Display::write(const uint8_t* pCh, size_t size)
{
  _DEBUG_PRINT("\n  print string");
  drawText(&printfX, &printfY, (const char*)pCh);
  return strlen((const char*)pCh);
 80a1f30:	f003 bdc8 	b.w	80a5ac4 <strlen>

080a1f34 <_ZN15DFRobot_Display12circleHelperEsssht>:
  }
}

void DFRobot_Display::circleHelper(int16_t x0, int16_t y0,
                                   int16_t r, uint8_t part, uint16_t color)
{
 80a1f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1f38:	4604      	mov	r4, r0
  r = abs(r);
 80a1f3a:	2b00      	cmp	r3, #0
 80a1f3c:	bfb8      	it	lt
 80a1f3e:	425b      	neglt	r3, r3
 80a1f40:	b21d      	sxth	r5, r3
  }
}

void DFRobot_Display::circleHelper(int16_t x0, int16_t y0,
                                   int16_t r, uint8_t part, uint16_t color)
{
 80a1f42:	b087      	sub	sp, #28
  r = abs(r);
  int16_t       varX = 0, varY = r;
  int16_t       endY = 0;
  int32_t       var1 = 3 - 2 * r;
 80a1f44:	006b      	lsls	r3, r5, #1
 80a1f46:	f1c3 0303 	rsb	r3, r3, #3
  }
}

void DFRobot_Display::circleHelper(int16_t x0, int16_t y0,
                                   int16_t r, uint8_t part, uint16_t color)
{
 80a1f4a:	9202      	str	r2, [sp, #8]
 80a1f4c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
  r = abs(r);
  int16_t       varX = 0, varY = r;
  int16_t       endY = 0;
  int32_t       var1 = 3 - 2 * r;
 80a1f50:	9301      	str	r3, [sp, #4]
 80a1f52:	2300      	movs	r3, #0
 80a1f54:	9300      	str	r3, [sp, #0]

  while(varX <= varY) {
    if(part & 0x04) {
 80a1f56:	f002 0304 	and.w	r3, r2, #4
 80a1f5a:	b2db      	uxtb	r3, r3
  }
}

void DFRobot_Display::circleHelper(int16_t x0, int16_t y0,
                                   int16_t r, uint8_t part, uint16_t color)
{
 80a1f5c:	f8bd 6044 	ldrh.w	r6, [sp, #68]	; 0x44
 80a1f60:	9203      	str	r2, [sp, #12]
  int16_t       varX = 0, varY = r;
  int16_t       endY = 0;
  int32_t       var1 = 3 - 2 * r;

  while(varX <= varY) {
    if(part & 0x04) {
 80a1f62:	9305      	str	r3, [sp, #20]
      drawPixel(x0 + varX, y0 + varY, color);
 80a1f64:	b28f      	uxth	r7, r1
 80a1f66:	f9bd 3000 	ldrsh.w	r3, [sp]
  r = abs(r);
  int16_t       varX = 0, varY = r;
  int16_t       endY = 0;
  int32_t       var1 = 3 - 2 * r;

  while(varX <= varY) {
 80a1f6a:	42ab      	cmp	r3, r5
 80a1f6c:	9304      	str	r3, [sp, #16]
 80a1f6e:	f300 8099 	bgt.w	80a20a4 <_ZN15DFRobot_Display12circleHelperEsssht+0x170>
    if(part & 0x04) {
 80a1f72:	9b05      	ldr	r3, [sp, #20]
 80a1f74:	b1eb      	cbz	r3, 80a1fb2 <_ZN15DFRobot_Display12circleHelperEsssht+0x7e>
 80a1f76:	f8bd 8000 	ldrh.w	r8, [sp]
      drawPixel(x0 + varX, y0 + varY, color);
 80a1f7a:	f8bd a008 	ldrh.w	sl, [sp, #8]
 80a1f7e:	6823      	ldr	r3, [r4, #0]
 80a1f80:	fa1f f985 	uxth.w	r9, r5
 80a1f84:	eb0a 0209 	add.w	r2, sl, r9
 80a1f88:	eb07 0108 	add.w	r1, r7, r8
 80a1f8c:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80a1f90:	b212      	sxth	r2, r2
 80a1f92:	4633      	mov	r3, r6
 80a1f94:	b209      	sxth	r1, r1
 80a1f96:	4620      	mov	r0, r4
 80a1f98:	47d8      	blx	fp
      drawPixel(x0 + varY, y0 + varX, color);
 80a1f9a:	6823      	ldr	r3, [r4, #0]
 80a1f9c:	eb0a 0208 	add.w	r2, sl, r8
 80a1fa0:	eb07 0109 	add.w	r1, r7, r9
 80a1fa4:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80a1fa8:	b212      	sxth	r2, r2
 80a1faa:	4633      	mov	r3, r6
 80a1fac:	b209      	sxth	r1, r1
 80a1fae:	4620      	mov	r0, r4
 80a1fb0:	47d8      	blx	fp
    }
    if(part & 0x02) {
 80a1fb2:	9b03      	ldr	r3, [sp, #12]
 80a1fb4:	0799      	lsls	r1, r3, #30
 80a1fb6:	d51d      	bpl.n	80a1ff4 <_ZN15DFRobot_Display12circleHelperEsssht+0xc0>
 80a1fb8:	f8bd a000 	ldrh.w	sl, [sp]
      drawPixel(x0 + varX, y0 - varY, color);
 80a1fbc:	f8bd 8008 	ldrh.w	r8, [sp, #8]
 80a1fc0:	6823      	ldr	r3, [r4, #0]
 80a1fc2:	fa1f f985 	uxth.w	r9, r5
 80a1fc6:	ebc9 0208 	rsb	r2, r9, r8
 80a1fca:	eb07 010a 	add.w	r1, r7, sl
 80a1fce:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80a1fd2:	b212      	sxth	r2, r2
 80a1fd4:	4633      	mov	r3, r6
 80a1fd6:	b209      	sxth	r1, r1
 80a1fd8:	4620      	mov	r0, r4
 80a1fda:	47d8      	blx	fp
      drawPixel(x0 + varY, y0 - varX, color);
 80a1fdc:	6823      	ldr	r3, [r4, #0]
 80a1fde:	ebca 0208 	rsb	r2, sl, r8
 80a1fe2:	eb07 0109 	add.w	r1, r7, r9
 80a1fe6:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80a1fea:	b212      	sxth	r2, r2
 80a1fec:	4633      	mov	r3, r6
 80a1fee:	b209      	sxth	r1, r1
 80a1ff0:	4620      	mov	r0, r4
 80a1ff2:	47d8      	blx	fp
    }
    if(part & 0x08) {
 80a1ff4:	9b03      	ldr	r3, [sp, #12]
 80a1ff6:	071a      	lsls	r2, r3, #28
 80a1ff8:	d51d      	bpl.n	80a2036 <_ZN15DFRobot_Display12circleHelperEsssht+0x102>
      drawPixel(x0 - varY, y0 + varX, color);
 80a1ffa:	f8bd 8008 	ldrh.w	r8, [sp, #8]
 80a1ffe:	f8bd 9000 	ldrh.w	r9, [sp]
 80a2002:	6823      	ldr	r3, [r4, #0]
 80a2004:	fa1f fa85 	uxth.w	sl, r5
 80a2008:	eb08 0209 	add.w	r2, r8, r9
 80a200c:	ebca 0107 	rsb	r1, sl, r7
 80a2010:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80a2014:	b212      	sxth	r2, r2
 80a2016:	4633      	mov	r3, r6
 80a2018:	b209      	sxth	r1, r1
 80a201a:	4620      	mov	r0, r4
 80a201c:	47d8      	blx	fp
      drawPixel(x0 - varX, y0 + varY, color);
 80a201e:	6823      	ldr	r3, [r4, #0]
 80a2020:	eb0a 0208 	add.w	r2, sl, r8
 80a2024:	ebc9 0107 	rsb	r1, r9, r7
 80a2028:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80a202c:	b212      	sxth	r2, r2
 80a202e:	4633      	mov	r3, r6
 80a2030:	b209      	sxth	r1, r1
 80a2032:	4620      	mov	r0, r4
 80a2034:	47d8      	blx	fp
    }
    if(part & 0x01) {
 80a2036:	9b03      	ldr	r3, [sp, #12]
 80a2038:	07db      	lsls	r3, r3, #31
 80a203a:	d51d      	bpl.n	80a2078 <_ZN15DFRobot_Display12circleHelperEsssht+0x144>
 80a203c:	f8bd a000 	ldrh.w	sl, [sp]
      drawPixel(x0 - varX, y0 - varY, color);
 80a2040:	f8bd 8008 	ldrh.w	r8, [sp, #8]
 80a2044:	6823      	ldr	r3, [r4, #0]
 80a2046:	fa1f f985 	uxth.w	r9, r5
 80a204a:	ebc9 0208 	rsb	r2, r9, r8
 80a204e:	ebca 0107 	rsb	r1, sl, r7
 80a2052:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80a2056:	b212      	sxth	r2, r2
 80a2058:	4633      	mov	r3, r6
 80a205a:	b209      	sxth	r1, r1
 80a205c:	4620      	mov	r0, r4
 80a205e:	47d8      	blx	fp
      drawPixel(x0 - varY, y0 - varX, color);
 80a2060:	6823      	ldr	r3, [r4, #0]
 80a2062:	ebca 0208 	rsb	r2, sl, r8
 80a2066:	ebc9 0107 	rsb	r1, r9, r7
 80a206a:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80a206e:	b212      	sxth	r2, r2
 80a2070:	4633      	mov	r3, r6
 80a2072:	b209      	sxth	r1, r1
 80a2074:	4620      	mov	r0, r4
 80a2076:	47d8      	blx	fp
    }
    
    if(var1 < 0) {
 80a2078:	9b01      	ldr	r3, [sp, #4]
 80a207a:	2b00      	cmp	r3, #0
 80a207c:	da05      	bge.n	80a208a <_ZN15DFRobot_Display12circleHelperEsssht+0x156>
      var1 = var1 + 4 * varX + 6;
 80a207e:	9a04      	ldr	r2, [sp, #16]
 80a2080:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80a2084:	3306      	adds	r3, #6
 80a2086:	9301      	str	r3, [sp, #4]
 80a2088:	e008      	b.n	80a209c <_ZN15DFRobot_Display12circleHelperEsssht+0x168>
    } else {
      var1 = var1 + 4 * (varX - varY) + 10;
 80a208a:	9b04      	ldr	r3, [sp, #16]
 80a208c:	9a01      	ldr	r2, [sp, #4]
 80a208e:	1b5b      	subs	r3, r3, r5
 80a2090:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80a2094:	330a      	adds	r3, #10
      varY --;
 80a2096:	3d01      	subs	r5, #1
    }
    
    if(var1 < 0) {
      var1 = var1 + 4 * varX + 6;
    } else {
      var1 = var1 + 4 * (varX - varY) + 10;
 80a2098:	9301      	str	r3, [sp, #4]
      varY --;
 80a209a:	b22d      	sxth	r5, r5
 80a209c:	9b00      	ldr	r3, [sp, #0]
 80a209e:	3301      	adds	r3, #1
 80a20a0:	9300      	str	r3, [sp, #0]
  r = abs(r);
  int16_t       varX = 0, varY = r;
  int16_t       endY = 0;
  int32_t       var1 = 3 - 2 * r;

  while(varX <= varY) {
 80a20a2:	e760      	b.n	80a1f66 <_ZN15DFRobot_Display12circleHelperEsssht+0x32>
      var1 = var1 + 4 * (varX - varY) + 10;
      varY --;
    }
    varX ++;
  }
}
 80a20a4:	b007      	add	sp, #28
 80a20a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a20aa <_ZN15DFRobot_Display13drawRoundRectEssssst>:
  lineWidth = temp;
}

void DFRobot_Display::drawRoundRect(int16_t x, int16_t y, int16_t w,
                                    int16_t h, int16_t r, uint16_t color)
{
 80a20aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a20ae:	b089      	sub	sp, #36	; 0x24
 80a20b0:	f9bd 604c 	ldrsh.w	r6, [sp, #76]	; 0x4c
 80a20b4:	460c      	mov	r4, r1
  r = abs(r);
 80a20b6:	2e00      	cmp	r6, #0
  lineWidth = temp;
}

void DFRobot_Display::drawRoundRect(int16_t x, int16_t y, int16_t w,
                                    int16_t h, int16_t r, uint16_t color)
{
 80a20b8:	f9bd 1048 	ldrsh.w	r1, [sp, #72]	; 0x48
  r = abs(r);
 80a20bc:	bfb8      	it	lt
 80a20be:	4276      	neglt	r6, r6
  // smarter version
  if(w > 0) {
 80a20c0:	2b00      	cmp	r3, #0
}

void DFRobot_Display::drawRoundRect(int16_t x, int16_t y, int16_t w,
                                    int16_t h, int16_t r, uint16_t color)
{
  r = abs(r);
 80a20c2:	fa0f f886 	sxth.w	r8, r6
  lineWidth = temp;
}

void DFRobot_Display::drawRoundRect(int16_t x, int16_t y, int16_t w,
                                    int16_t h, int16_t r, uint16_t color)
{
 80a20c6:	4605      	mov	r5, r0
 80a20c8:	9204      	str	r2, [sp, #16]
 80a20ca:	9102      	str	r1, [sp, #8]
 80a20cc:	f8bd 7050 	ldrh.w	r7, [sp, #80]	; 0x50
  r = abs(r);
  // smarter version
  if(w > 0) {
 80a20d0:	9303      	str	r3, [sp, #12]
 80a20d2:	b2b6      	uxth	r6, r6
 80a20d4:	dd08      	ble.n	80a20e8 <_ZN15DFRobot_Display13drawRoundRectEssssst+0x3e>
    drawHLine(x+r  , y    , w-2*r+1, color); // Top
 80a20d6:	eb06 0a04 	add.w	sl, r6, r4
 80a20da:	f103 0901 	add.w	r9, r3, #1
 80a20de:	fa0f fa8a 	sxth.w	sl, sl
 80a20e2:	eba9 0946 	sub.w	r9, r9, r6, lsl #1
 80a20e6:	e00a      	b.n	80a20fe <_ZN15DFRobot_Display13drawRoundRectEssssst+0x54>
    drawHLine(x+r  , y+h, w-2*r+1, color); // Bottom
  } else {
    drawHLine(x-r  , y    , -(abs(w)-2*r+1), color); // Top
 80a20e8:	9b03      	ldr	r3, [sp, #12]
 80a20ea:	ebc6 0a04 	rsb	sl, r6, r4
 80a20ee:	f1c3 0900 	rsb	r9, r3, #0
 80a20f2:	eba9 0946 	sub.w	r9, r9, r6, lsl #1
 80a20f6:	ea6f 0909 	mvn.w	r9, r9
 80a20fa:	fa0f fa8a 	sxth.w	sl, sl
 80a20fe:	682b      	ldr	r3, [r5, #0]
 80a2100:	fa0f f989 	sxth.w	r9, r9
 80a2104:	9700      	str	r7, [sp, #0]
 80a2106:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 80a210a:	4651      	mov	r1, sl
 80a210c:	464b      	mov	r3, r9
 80a210e:	47d8      	blx	fp
    drawHLine(x-r , y+h, -(abs(w)-2*r+1), color); // Bottom
 80a2110:	9b04      	ldr	r3, [sp, #16]
 80a2112:	9a02      	ldr	r2, [sp, #8]
 80a2114:	9700      	str	r7, [sp, #0]
 80a2116:	189a      	adds	r2, r3, r2
 80a2118:	682b      	ldr	r3, [r5, #0]
 80a211a:	b212      	sxth	r2, r2
 80a211c:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 80a2120:	4651      	mov	r1, sl
 80a2122:	464b      	mov	r3, r9
 80a2124:	4628      	mov	r0, r5
 80a2126:	47d8      	blx	fp
  }
  if(h > 0) {
 80a2128:	9b02      	ldr	r3, [sp, #8]
 80a212a:	2b00      	cmp	r3, #0
 80a212c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80a2130:	9304      	str	r3, [sp, #16]
 80a2132:	dd57      	ble.n	80a21e4 <_ZN15DFRobot_Display13drawRoundRectEssssst+0x13a>
    drawVLine(x, y + r, h - 2 * r+1, color);
 80a2134:	eb03 0906 	add.w	r9, r3, r6
 80a2138:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80a213c:	fa0f f989 	sxth.w	r9, r9
 80a2140:	f103 0a01 	add.w	sl, r3, #1
 80a2144:	9306      	str	r3, [sp, #24]
 80a2146:	ebaa 0a46 	sub.w	sl, sl, r6, lsl #1
 80a214a:	682b      	ldr	r3, [r5, #0]
 80a214c:	fa0f fa8a 	sxth.w	sl, sl
 80a2150:	9700      	str	r7, [sp, #0]
 80a2152:	f8d3 b018 	ldr.w	fp, [r3, #24]
 80a2156:	4621      	mov	r1, r4
 80a2158:	4653      	mov	r3, sl
 80a215a:	464a      	mov	r2, r9
 80a215c:	4628      	mov	r0, r5
 80a215e:	47d8      	blx	fp
    drawVLine(x + w, y + r, h - 2 * r+1, color);
 80a2160:	b2a3      	uxth	r3, r4
 80a2162:	9305      	str	r3, [sp, #20]
 80a2164:	9a05      	ldr	r2, [sp, #20]
 80a2166:	9b03      	ldr	r3, [sp, #12]
 80a2168:	9700      	str	r7, [sp, #0]
 80a216a:	eb02 0b03 	add.w	fp, r2, r3
 80a216e:	fa1f f38b 	uxth.w	r3, fp
 80a2172:	9307      	str	r3, [sp, #28]
 80a2174:	682b      	ldr	r3, [r5, #0]
 80a2176:	464a      	mov	r2, r9
 80a2178:	699b      	ldr	r3, [r3, #24]
 80a217a:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
 80a217e:	461c      	mov	r4, r3
 80a2180:	4628      	mov	r0, r5
 80a2182:	4653      	mov	r3, sl
 80a2184:	47a0      	blx	r4
  } else {
    drawVLine(x, y - r, -(abs(h) - 2 * r+1), color);
    drawVLine(x + w, y - r, -(abs(h) - 2 * r+1), color);
  }
  // draw four corners
  if(w > 0) {
 80a2186:	9b03      	ldr	r3, [sp, #12]
 80a2188:	2b00      	cmp	r3, #0
 80a218a:	f340 8084 	ble.w	80a2296 <_ZN15DFRobot_Display13drawRoundRectEssssst+0x1ec>
    if(h > 0) {
      circleHelper(x + r, y + r, r, 1, color);
 80a218e:	9b05      	ldr	r3, [sp, #20]
 80a2190:	464a      	mov	r2, r9
 80a2192:	4433      	add	r3, r6
 80a2194:	b21c      	sxth	r4, r3
 80a2196:	2301      	movs	r3, #1
 80a2198:	9300      	str	r3, [sp, #0]
 80a219a:	4621      	mov	r1, r4
 80a219c:	4643      	mov	r3, r8
 80a219e:	4628      	mov	r0, r5
 80a21a0:	9701      	str	r7, [sp, #4]
 80a21a2:	f7ff fec7 	bl	80a1f34 <_ZN15DFRobot_Display12circleHelperEsssht>
      circleHelper(x + w - r, y + r, r, 2, color);
 80a21a6:	9b07      	ldr	r3, [sp, #28]
 80a21a8:	464a      	mov	r2, r9
 80a21aa:	ebc6 0b03 	rsb	fp, r6, r3
 80a21ae:	fa0f fb8b 	sxth.w	fp, fp
 80a21b2:	2302      	movs	r3, #2
 80a21b4:	9300      	str	r3, [sp, #0]
 80a21b6:	4659      	mov	r1, fp
 80a21b8:	4643      	mov	r3, r8
 80a21ba:	4628      	mov	r0, r5
 80a21bc:	9701      	str	r7, [sp, #4]
 80a21be:	f7ff feb9 	bl	80a1f34 <_ZN15DFRobot_Display12circleHelperEsssht>
      circleHelper(x + r, y + h - r, r, 8, color);
 80a21c2:	9a06      	ldr	r2, [sp, #24]
 80a21c4:	9b04      	ldr	r3, [sp, #16]
 80a21c6:	9701      	str	r7, [sp, #4]
 80a21c8:	4413      	add	r3, r2
 80a21ca:	1b9e      	subs	r6, r3, r6
 80a21cc:	b236      	sxth	r6, r6
 80a21ce:	2308      	movs	r3, #8
 80a21d0:	9300      	str	r3, [sp, #0]
 80a21d2:	4632      	mov	r2, r6
 80a21d4:	4643      	mov	r3, r8
 80a21d6:	4621      	mov	r1, r4
 80a21d8:	4628      	mov	r0, r5
 80a21da:	f7ff feab 	bl	80a1f34 <_ZN15DFRobot_Display12circleHelperEsssht>
      circleHelper(x + w - r, y + h - r, r, 4, color);
 80a21de:	9713      	str	r7, [sp, #76]	; 0x4c
 80a21e0:	2304      	movs	r3, #4
 80a21e2:	e0aa      	b.n	80a233a <_ZN15DFRobot_Display13drawRoundRectEssssst+0x290>
  }
  if(h > 0) {
    drawVLine(x, y + r, h - 2 * r+1, color);
    drawVLine(x + w, y + r, h - 2 * r+1, color);
  } else {
    drawVLine(x, y - r, -(abs(h) - 2 * r+1), color);
 80a21e4:	9b04      	ldr	r3, [sp, #16]
 80a21e6:	9700      	str	r7, [sp, #0]
 80a21e8:	ebc6 0903 	rsb	r9, r6, r3
 80a21ec:	9b02      	ldr	r3, [sp, #8]
 80a21ee:	fa0f f989 	sxth.w	r9, r9
 80a21f2:	f1c3 0a00 	rsb	sl, r3, #0
 80a21f6:	ebaa 0a46 	sub.w	sl, sl, r6, lsl #1
 80a21fa:	ea6f 0a0a 	mvn.w	sl, sl
 80a21fe:	682b      	ldr	r3, [r5, #0]
 80a2200:	fa0f fa8a 	sxth.w	sl, sl
 80a2204:	f8d3 b018 	ldr.w	fp, [r3, #24]
 80a2208:	4621      	mov	r1, r4
 80a220a:	4653      	mov	r3, sl
 80a220c:	464a      	mov	r2, r9
 80a220e:	4628      	mov	r0, r5
 80a2210:	47d8      	blx	fp
    drawVLine(x + w, y - r, -(abs(h) - 2 * r+1), color);
 80a2212:	b2a3      	uxth	r3, r4
 80a2214:	9305      	str	r3, [sp, #20]
 80a2216:	9a05      	ldr	r2, [sp, #20]
 80a2218:	9b03      	ldr	r3, [sp, #12]
 80a221a:	9700      	str	r7, [sp, #0]
 80a221c:	eb02 0b03 	add.w	fp, r2, r3
 80a2220:	fa1f f38b 	uxth.w	r3, fp
 80a2224:	9306      	str	r3, [sp, #24]
 80a2226:	682b      	ldr	r3, [r5, #0]
 80a2228:	464a      	mov	r2, r9
 80a222a:	699b      	ldr	r3, [r3, #24]
 80a222c:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 80a2230:	461c      	mov	r4, r3
 80a2232:	4628      	mov	r0, r5
 80a2234:	4653      	mov	r3, sl
 80a2236:	47a0      	blx	r4
  }
  // draw four corners
  if(w > 0) {
 80a2238:	9b03      	ldr	r3, [sp, #12]
 80a223a:	9a02      	ldr	r2, [sp, #8]
 80a223c:	2b00      	cmp	r3, #0
 80a223e:	9b04      	ldr	r3, [sp, #16]
 80a2240:	eb03 0a02 	add.w	sl, r3, r2
 80a2244:	dd54      	ble.n	80a22f0 <_ZN15DFRobot_Display13drawRoundRectEssssst+0x246>
      circleHelper(x + r, y + r, r, 1, color);
      circleHelper(x + w - r, y + r, r, 2, color);
      circleHelper(x + r, y + h - r, r, 8, color);
      circleHelper(x + w - r, y + h - r, r, 4, color);
    } else {
      circleHelper(x + r, y - r, r, 8, color);
 80a2246:	9b05      	ldr	r3, [sp, #20]
 80a2248:	464a      	mov	r2, r9
 80a224a:	4433      	add	r3, r6
 80a224c:	b21c      	sxth	r4, r3
 80a224e:	2308      	movs	r3, #8
 80a2250:	9300      	str	r3, [sp, #0]
 80a2252:	4621      	mov	r1, r4
 80a2254:	4643      	mov	r3, r8
 80a2256:	4628      	mov	r0, r5
 80a2258:	9701      	str	r7, [sp, #4]
 80a225a:	f7ff fe6b 	bl	80a1f34 <_ZN15DFRobot_Display12circleHelperEsssht>
      circleHelper(x + w - r, y - r, r, 4, color);
 80a225e:	9b06      	ldr	r3, [sp, #24]
 80a2260:	464a      	mov	r2, r9
 80a2262:	ebc6 0b03 	rsb	fp, r6, r3
 80a2266:	fa0f fb8b 	sxth.w	fp, fp
 80a226a:	2304      	movs	r3, #4
 80a226c:	9300      	str	r3, [sp, #0]
 80a226e:	4659      	mov	r1, fp
 80a2270:	4643      	mov	r3, r8
 80a2272:	4628      	mov	r0, r5
 80a2274:	9701      	str	r7, [sp, #4]
      circleHelper(x + r, y + h + r, r, 1, color);
 80a2276:	4456      	add	r6, sl
      circleHelper(x + w - r, y + r, r, 2, color);
      circleHelper(x + r, y + h - r, r, 8, color);
      circleHelper(x + w - r, y + h - r, r, 4, color);
    } else {
      circleHelper(x + r, y - r, r, 8, color);
      circleHelper(x + w - r, y - r, r, 4, color);
 80a2278:	f7ff fe5c 	bl	80a1f34 <_ZN15DFRobot_Display12circleHelperEsssht>
      circleHelper(x + r, y + h + r, r, 1, color);
 80a227c:	b236      	sxth	r6, r6
 80a227e:	2301      	movs	r3, #1
 80a2280:	9300      	str	r3, [sp, #0]
 80a2282:	9701      	str	r7, [sp, #4]
 80a2284:	4643      	mov	r3, r8
 80a2286:	4632      	mov	r2, r6
 80a2288:	4621      	mov	r1, r4
 80a228a:	4628      	mov	r0, r5
 80a228c:	f7ff fe52 	bl	80a1f34 <_ZN15DFRobot_Display12circleHelperEsssht>
      circleHelper(x + w - r, y + h + r, r, 2, color);
 80a2290:	9713      	str	r7, [sp, #76]	; 0x4c
 80a2292:	2302      	movs	r3, #2
 80a2294:	e051      	b.n	80a233a <_ZN15DFRobot_Display13drawRoundRectEssssst+0x290>
    }
  } else {
    if(h > 0) {
      circleHelper(x - r, y + r, r, 2, color);
 80a2296:	9b05      	ldr	r3, [sp, #20]
 80a2298:	464a      	mov	r2, r9
 80a229a:	1b9c      	subs	r4, r3, r6
 80a229c:	b224      	sxth	r4, r4
 80a229e:	2302      	movs	r3, #2
 80a22a0:	9300      	str	r3, [sp, #0]
 80a22a2:	4621      	mov	r1, r4
 80a22a4:	4643      	mov	r3, r8
 80a22a6:	4628      	mov	r0, r5
      circleHelper(x + w + r, y + r, r, 1, color);
 80a22a8:	44b3      	add	fp, r6
      circleHelper(x + r, y + h + r, r, 1, color);
      circleHelper(x + w - r, y + h + r, r, 2, color);
    }
  } else {
    if(h > 0) {
      circleHelper(x - r, y + r, r, 2, color);
 80a22aa:	9701      	str	r7, [sp, #4]
 80a22ac:	f7ff fe42 	bl	80a1f34 <_ZN15DFRobot_Display12circleHelperEsssht>
      circleHelper(x + w + r, y + r, r, 1, color);
 80a22b0:	fa0f fb8b 	sxth.w	fp, fp
 80a22b4:	2301      	movs	r3, #1
 80a22b6:	9300      	str	r3, [sp, #0]
 80a22b8:	464a      	mov	r2, r9
 80a22ba:	4643      	mov	r3, r8
 80a22bc:	4659      	mov	r1, fp
 80a22be:	4628      	mov	r0, r5
 80a22c0:	9701      	str	r7, [sp, #4]
 80a22c2:	f7ff fe37 	bl	80a1f34 <_ZN15DFRobot_Display12circleHelperEsssht>
      circleHelper(x + w + r, y + h - r, r, 8, color);
 80a22c6:	9a02      	ldr	r2, [sp, #8]
 80a22c8:	9b04      	ldr	r3, [sp, #16]
 80a22ca:	4659      	mov	r1, fp
 80a22cc:	4413      	add	r3, r2
 80a22ce:	1b9e      	subs	r6, r3, r6
 80a22d0:	b236      	sxth	r6, r6
 80a22d2:	2308      	movs	r3, #8
 80a22d4:	9300      	str	r3, [sp, #0]
 80a22d6:	4632      	mov	r2, r6
 80a22d8:	4643      	mov	r3, r8
 80a22da:	9701      	str	r7, [sp, #4]
 80a22dc:	4628      	mov	r0, r5
 80a22de:	f7ff fe29 	bl	80a1f34 <_ZN15DFRobot_Display12circleHelperEsssht>
      circleHelper(x - r, y + h - r, r, 4, color);
 80a22e2:	2304      	movs	r3, #4
 80a22e4:	9312      	str	r3, [sp, #72]	; 0x48
 80a22e6:	9713      	str	r7, [sp, #76]	; 0x4c
 80a22e8:	4643      	mov	r3, r8
 80a22ea:	4632      	mov	r2, r6
 80a22ec:	4621      	mov	r1, r4
 80a22ee:	e028      	b.n	80a2342 <_ZN15DFRobot_Display13drawRoundRectEssssst+0x298>
    } else {
      circleHelper(x - r, y - r, r, 4, color);
 80a22f0:	9b05      	ldr	r3, [sp, #20]
 80a22f2:	464a      	mov	r2, r9
 80a22f4:	1b9c      	subs	r4, r3, r6
 80a22f6:	b224      	sxth	r4, r4
 80a22f8:	2304      	movs	r3, #4
 80a22fa:	9300      	str	r3, [sp, #0]
 80a22fc:	4621      	mov	r1, r4
 80a22fe:	4643      	mov	r3, r8
 80a2300:	4628      	mov	r0, r5
      circleHelper(x + w + r, y - r, r, 8, color);
 80a2302:	44b3      	add	fp, r6
      circleHelper(x - r, y + r, r, 2, color);
      circleHelper(x + w + r, y + r, r, 1, color);
      circleHelper(x + w + r, y + h - r, r, 8, color);
      circleHelper(x - r, y + h - r, r, 4, color);
    } else {
      circleHelper(x - r, y - r, r, 4, color);
 80a2304:	9701      	str	r7, [sp, #4]
 80a2306:	f7ff fe15 	bl	80a1f34 <_ZN15DFRobot_Display12circleHelperEsssht>
      circleHelper(x + w + r, y - r, r, 8, color);
 80a230a:	fa0f fb8b 	sxth.w	fp, fp
 80a230e:	2308      	movs	r3, #8
 80a2310:	9300      	str	r3, [sp, #0]
 80a2312:	464a      	mov	r2, r9
 80a2314:	4643      	mov	r3, r8
 80a2316:	4659      	mov	r1, fp
 80a2318:	4628      	mov	r0, r5
 80a231a:	9701      	str	r7, [sp, #4]
      circleHelper(x - r, y + h + r, r, 2, color);
 80a231c:	4456      	add	r6, sl
      circleHelper(x + w + r, y + r, r, 1, color);
      circleHelper(x + w + r, y + h - r, r, 8, color);
      circleHelper(x - r, y + h - r, r, 4, color);
    } else {
      circleHelper(x - r, y - r, r, 4, color);
      circleHelper(x + w + r, y - r, r, 8, color);
 80a231e:	f7ff fe09 	bl	80a1f34 <_ZN15DFRobot_Display12circleHelperEsssht>
      circleHelper(x - r, y + h + r, r, 2, color);
 80a2322:	b236      	sxth	r6, r6
 80a2324:	2302      	movs	r3, #2
 80a2326:	9300      	str	r3, [sp, #0]
 80a2328:	9701      	str	r7, [sp, #4]
 80a232a:	4643      	mov	r3, r8
 80a232c:	4632      	mov	r2, r6
 80a232e:	4621      	mov	r1, r4
 80a2330:	4628      	mov	r0, r5
 80a2332:	f7ff fdff 	bl	80a1f34 <_ZN15DFRobot_Display12circleHelperEsssht>
      circleHelper(x + w + r, y + h + r, r, 1, color);
 80a2336:	9713      	str	r7, [sp, #76]	; 0x4c
 80a2338:	2301      	movs	r3, #1
 80a233a:	9312      	str	r3, [sp, #72]	; 0x48
 80a233c:	4632      	mov	r2, r6
 80a233e:	4643      	mov	r3, r8
 80a2340:	4659      	mov	r1, fp
 80a2342:	4628      	mov	r0, r5
    }
  }
}
 80a2344:	b009      	add	sp, #36	; 0x24
 80a2346:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      circleHelper(x - r, y + h - r, r, 4, color);
    } else {
      circleHelper(x - r, y - r, r, 4, color);
      circleHelper(x + w + r, y - r, r, 8, color);
      circleHelper(x - r, y + h + r, r, 2, color);
      circleHelper(x + w + r, y + h + r, r, 1, color);
 80a234a:	f7ff bdf3 	b.w	80a1f34 <_ZN15DFRobot_Display12circleHelperEsssht>

080a234e <_ZN15DFRobot_Display16fillCircleHelperEssshst>:
  }
}

void DFRobot_Display::fillCircleHelper(int16_t x0, int16_t y0, int16_t r,
                                       uint8_t part, int16_t offset, uint16_t color)
{
 80a234e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2352:	4606      	mov	r6, r0
  r = abs(r);
 80a2354:	2b00      	cmp	r3, #0
 80a2356:	bfb8      	it	lt
 80a2358:	425b      	neglt	r3, r3
 80a235a:	b21c      	sxth	r4, r3
  int16_t       varX = 0, varY = r;
  int16_t       endY = 0;
  int32_t       var1 = 3 - 2 * r;
 80a235c:	0065      	lsls	r5, r4, #1
  }
}

void DFRobot_Display::fillCircleHelper(int16_t x0, int16_t y0, int16_t r,
                                       uint8_t part, int16_t offset, uint16_t color)
{
 80a235e:	b08b      	sub	sp, #44	; 0x2c
  r = abs(r);
  int16_t       varX = 0, varY = r;
  int16_t       endY = 0;
  int32_t       var1 = 3 - 2 * r;
 80a2360:	f1c5 0303 	rsb	r3, r5, #3
 80a2364:	9302      	str	r3, [sp, #8]
 80a2366:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	; 0x54
  }
}

void DFRobot_Display::fillCircleHelper(int16_t x0, int16_t y0, int16_t r,
                                       uint8_t part, int16_t offset, uint16_t color)
{
 80a236a:	9207      	str	r2, [sp, #28]
 80a236c:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 80a2370:	3301      	adds	r3, #1
 80a2372:	b29b      	uxth	r3, r3
 80a2374:	9208      	str	r2, [sp, #32]
 80a2376:	9306      	str	r3, [sp, #24]
  r = abs(r);
  int16_t       varX = 0, varY = r;
  int16_t       endY = 0;
  int32_t       var1 = 3 - 2 * r;
 80a2378:	469b      	mov	fp, r3

  while(varX <= varY) {
    if(part & 0x02) {
 80a237a:	9b08      	ldr	r3, [sp, #32]
  }
}

void DFRobot_Display::fillCircleHelper(int16_t x0, int16_t y0, int16_t r,
                                       uint8_t part, int16_t offset, uint16_t color)
{
 80a237c:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
  int16_t       varX = 0, varY = r;
  int16_t       endY = 0;
  int32_t       var1 = 3 - 2 * r;

  while(varX <= varY) {
    if(part & 0x02) {
 80a2380:	f003 0302 	and.w	r3, r3, #2
 80a2384:	b2db      	uxtb	r3, r3
 80a2386:	9309      	str	r3, [sp, #36]	; 0x24
      drawVLine(x0-varX, y0-varY, 2*varY+1+offset, color);
 80a2388:	b28b      	uxth	r3, r1
  }
}

void DFRobot_Display::fillCircleHelper(int16_t x0, int16_t y0, int16_t r,
                                       uint8_t part, int16_t offset, uint16_t color)
{
 80a238a:	9203      	str	r2, [sp, #12]
  r = abs(r);
  int16_t       varX = 0, varY = r;
  int16_t       endY = 0;
  int32_t       var1 = 3 - 2 * r;
 80a238c:	f04f 0800 	mov.w	r8, #0

  while(varX <= varY) {
    if(part & 0x02) {
      drawVLine(x0-varX, y0-varY, 2*varY+1+offset, color);
 80a2390:	9304      	str	r3, [sp, #16]
 80a2392:	fa0f f388 	sxth.w	r3, r8
  r = abs(r);
  int16_t       varX = 0, varY = r;
  int16_t       endY = 0;
  int32_t       var1 = 3 - 2 * r;

  while(varX <= varY) {
 80a2396:	42a3      	cmp	r3, r4
 80a2398:	9305      	str	r3, [sp, #20]
 80a239a:	dc6b      	bgt.n	80a2474 <_ZN15DFRobot_Display16fillCircleHelperEssshst+0x126>
    if(part & 0x02) {
 80a239c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a239e:	b333      	cbz	r3, 80a23ee <_ZN15DFRobot_Display16fillCircleHelperEssshst+0xa0>
      drawVLine(x0-varX, y0-varY, 2*varY+1+offset, color);
 80a23a0:	9d03      	ldr	r5, [sp, #12]
 80a23a2:	6830      	ldr	r0, [r6, #0]
 80a23a4:	f8bd 701c 	ldrh.w	r7, [sp, #28]
 80a23a8:	9500      	str	r5, [sp, #0]
 80a23aa:	9b06      	ldr	r3, [sp, #24]
 80a23ac:	9904      	ldr	r1, [sp, #16]
 80a23ae:	fa1f f984 	uxth.w	r9, r4
 80a23b2:	6980      	ldr	r0, [r0, #24]
 80a23b4:	fa1f fa88 	uxth.w	sl, r8
 80a23b8:	ebc9 0207 	rsb	r2, r9, r7
 80a23bc:	eb03 0349 	add.w	r3, r3, r9, lsl #1
 80a23c0:	ebca 0101 	rsb	r1, sl, r1
 80a23c4:	4605      	mov	r5, r0
 80a23c6:	b21b      	sxth	r3, r3
 80a23c8:	b212      	sxth	r2, r2
 80a23ca:	b209      	sxth	r1, r1
 80a23cc:	4630      	mov	r0, r6
 80a23ce:	47a8      	blx	r5
      drawVLine(x0-varY, y0-varX, 2*varX+1+offset, color);
 80a23d0:	9b04      	ldr	r3, [sp, #16]
 80a23d2:	9803      	ldr	r0, [sp, #12]
 80a23d4:	ebc9 0103 	rsb	r1, r9, r3
 80a23d8:	6833      	ldr	r3, [r6, #0]
 80a23da:	ebca 0207 	rsb	r2, sl, r7
 80a23de:	9000      	str	r0, [sp, #0]
 80a23e0:	699f      	ldr	r7, [r3, #24]
 80a23e2:	b212      	sxth	r2, r2
 80a23e4:	fa0f f38b 	sxth.w	r3, fp
 80a23e8:	b209      	sxth	r1, r1
 80a23ea:	4630      	mov	r0, r6
 80a23ec:	47b8      	blx	r7
    }
    if(part & 0x01) {
 80a23ee:	9b08      	ldr	r3, [sp, #32]
 80a23f0:	07db      	lsls	r3, r3, #31
 80a23f2:	d525      	bpl.n	80a2440 <_ZN15DFRobot_Display16fillCircleHelperEssshst+0xf2>
      drawVLine(x0+varX, y0-varY, 2*varY+1+offset, color);
 80a23f4:	9d03      	ldr	r5, [sp, #12]
 80a23f6:	6830      	ldr	r0, [r6, #0]
 80a23f8:	f8bd 701c 	ldrh.w	r7, [sp, #28]
 80a23fc:	9500      	str	r5, [sp, #0]
 80a23fe:	9b06      	ldr	r3, [sp, #24]
 80a2400:	9904      	ldr	r1, [sp, #16]
 80a2402:	fa1f f984 	uxth.w	r9, r4
 80a2406:	6980      	ldr	r0, [r0, #24]
 80a2408:	fa1f fa88 	uxth.w	sl, r8
 80a240c:	ebc9 0207 	rsb	r2, r9, r7
 80a2410:	eb03 0349 	add.w	r3, r3, r9, lsl #1
 80a2414:	4451      	add	r1, sl
 80a2416:	4605      	mov	r5, r0
 80a2418:	b21b      	sxth	r3, r3
 80a241a:	b212      	sxth	r2, r2
 80a241c:	b209      	sxth	r1, r1
 80a241e:	4630      	mov	r0, r6
 80a2420:	47a8      	blx	r5
      drawVLine(x0+varY, y0-varX, 2*varX+1+offset, color);
 80a2422:	9b04      	ldr	r3, [sp, #16]
 80a2424:	9803      	ldr	r0, [sp, #12]
 80a2426:	eb03 0109 	add.w	r1, r3, r9
 80a242a:	6833      	ldr	r3, [r6, #0]
 80a242c:	ebca 0207 	rsb	r2, sl, r7
 80a2430:	9000      	str	r0, [sp, #0]
 80a2432:	699f      	ldr	r7, [r3, #24]
 80a2434:	b212      	sxth	r2, r2
 80a2436:	fa0f f38b 	sxth.w	r3, fp
 80a243a:	b209      	sxth	r1, r1
 80a243c:	4630      	mov	r0, r6
 80a243e:	47b8      	blx	r7
    }
    if(var1 < 0) {
 80a2440:	9b02      	ldr	r3, [sp, #8]
 80a2442:	2b00      	cmp	r3, #0
      var1 = var1 + 4 * varX + 6;
 80a2444:	9b05      	ldr	r3, [sp, #20]
    }
    if(part & 0x01) {
      drawVLine(x0+varX, y0-varY, 2*varY+1+offset, color);
      drawVLine(x0+varY, y0-varX, 2*varX+1+offset, color);
    }
    if(var1 < 0) {
 80a2446:	da05      	bge.n	80a2454 <_ZN15DFRobot_Display16fillCircleHelperEssshst+0x106>
      var1 = var1 + 4 * varX + 6;
 80a2448:	9a02      	ldr	r2, [sp, #8]
 80a244a:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80a244e:	1dab      	adds	r3, r5, #6
 80a2450:	9302      	str	r3, [sp, #8]
 80a2452:	e008      	b.n	80a2466 <_ZN15DFRobot_Display16fillCircleHelperEssshst+0x118>
    } else {
      var1 = var1 + 4 * (varX - varY) + 10;
 80a2454:	9a02      	ldr	r2, [sp, #8]
 80a2456:	1b1b      	subs	r3, r3, r4
 80a2458:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80a245c:	f105 030a 	add.w	r3, r5, #10
      varY --;
 80a2460:	3c01      	subs	r4, #1
      drawVLine(x0+varY, y0-varX, 2*varX+1+offset, color);
    }
    if(var1 < 0) {
      var1 = var1 + 4 * varX + 6;
    } else {
      var1 = var1 + 4 * (varX - varY) + 10;
 80a2462:	9302      	str	r3, [sp, #8]
      varY --;
 80a2464:	b224      	sxth	r4, r4
 80a2466:	f10b 0302 	add.w	r3, fp, #2
 80a246a:	f108 0801 	add.w	r8, r8, #1
 80a246e:	fa1f fb83 	uxth.w	fp, r3
  r = abs(r);
  int16_t       varX = 0, varY = r;
  int16_t       endY = 0;
  int32_t       var1 = 3 - 2 * r;

  while(varX <= varY) {
 80a2472:	e78e      	b.n	80a2392 <_ZN15DFRobot_Display16fillCircleHelperEssshst+0x44>
      var1 = var1 + 4 * (varX - varY) + 10;
      varY --;
    }
    varX ++;
  }
}
 80a2474:	b00b      	add	sp, #44	; 0x2c
 80a2476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a247a <_ZN15DFRobot_Display13fillRoundRectEssssst>:
}

// fill a rounded rectangle!
void DFRobot_Display::fillRoundRect(int16_t x, int16_t y, int16_t w,
                                        int16_t h, int16_t r, uint16_t color)
{
 80a247a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a247e:	b089      	sub	sp, #36	; 0x24
 80a2480:	f9bd 504c 	ldrsh.w	r5, [sp, #76]	; 0x4c
 80a2484:	b289      	uxth	r1, r1
  r = abs(r);
 80a2486:	2d00      	cmp	r5, #0
 80a2488:	bfb8      	it	lt
 80a248a:	426d      	neglt	r5, r5
 80a248c:	b22e      	sxth	r6, r5
  if(w > 0) {
 80a248e:	2b00      	cmp	r3, #0
}

// fill a rounded rectangle!
void DFRobot_Display::fillRoundRect(int16_t x, int16_t y, int16_t w,
                                        int16_t h, int16_t r, uint16_t color)
{
 80a2490:	4607      	mov	r7, r0
 80a2492:	4693      	mov	fp, r2
 80a2494:	f9bd 4048 	ldrsh.w	r4, [sp, #72]	; 0x48
 80a2498:	f8bd 8050 	ldrh.w	r8, [sp, #80]	; 0x50
  r = abs(r);
 80a249c:	9605      	str	r6, [sp, #20]
 80a249e:	9106      	str	r1, [sp, #24]
 80a24a0:	b2ad      	uxth	r5, r5
  if(w > 0) {
 80a24a2:	dd6b      	ble.n	80a257c <_ZN15DFRobot_Display13fillRoundRectEssssst+0x102>
    if(h > 0) {
 80a24a4:	2c00      	cmp	r4, #0
 80a24a6:	fa1f fa83 	uxth.w	sl, r3
 80a24aa:	dd32      	ble.n	80a2512 <_ZN15DFRobot_Display13fillRoundRectEssssst+0x98>
      fillRect(x + r, y, w - 2 * r+1, h+1, color);
 80a24ac:	b2a3      	uxth	r3, r4
 80a24ae:	9307      	str	r3, [sp, #28]
 80a24b0:	9c07      	ldr	r4, [sp, #28]
 80a24b2:	006e      	lsls	r6, r5, #1
 80a24b4:	3401      	adds	r4, #1
 80a24b6:	eb01 0905 	add.w	r9, r1, r5
 80a24ba:	b2b6      	uxth	r6, r6
 80a24bc:	6801      	ldr	r1, [r0, #0]
 80a24be:	b224      	sxth	r4, r4
 80a24c0:	f10a 0301 	add.w	r3, sl, #1
 80a24c4:	fa0f f989 	sxth.w	r9, r9
 80a24c8:	f8cd 8004 	str.w	r8, [sp, #4]
 80a24cc:	9400      	str	r4, [sp, #0]
 80a24ce:	1b9b      	subs	r3, r3, r6
 80a24d0:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 80a24d2:	b21b      	sxth	r3, r3
 80a24d4:	4649      	mov	r1, r9
 80a24d6:	47a0      	blx	r4
      fillRect(x + w + r, y + h, abs(w) - 2 * r+1, abs(h)+1, color);
    }
  }
  if(w > 0) {
    if(h > 0) {
      fillCircleHelper(x + r, y + r, r, 2, h - 2 * r, color);
 80a24d8:	9b07      	ldr	r3, [sp, #28]
 80a24da:	44ab      	add	fp, r5
 80a24dc:	1b9c      	subs	r4, r3, r6
 80a24de:	fa0f fb8b 	sxth.w	fp, fp
 80a24e2:	b224      	sxth	r4, r4
 80a24e4:	2302      	movs	r3, #2
 80a24e6:	9300      	str	r3, [sp, #0]
 80a24e8:	465a      	mov	r2, fp
 80a24ea:	9b05      	ldr	r3, [sp, #20]
 80a24ec:	4649      	mov	r1, r9
 80a24ee:	f8cd 8008 	str.w	r8, [sp, #8]
 80a24f2:	9401      	str	r4, [sp, #4]
 80a24f4:	4638      	mov	r0, r7
 80a24f6:	f7ff ff2a 	bl	80a234e <_ZN15DFRobot_Display16fillCircleHelperEssshst>
      fillCircleHelper(x + w - r, y + r, r, 1, h - 2 * r, color);
 80a24fa:	9b06      	ldr	r3, [sp, #24]
 80a24fc:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80a2500:	eb03 010a 	add.w	r1, r3, sl
 80a2504:	2301      	movs	r3, #1
 80a2506:	9312      	str	r3, [sp, #72]	; 0x48
 80a2508:	1b49      	subs	r1, r1, r5
 80a250a:	9413      	str	r4, [sp, #76]	; 0x4c
 80a250c:	9b05      	ldr	r3, [sp, #20]
 80a250e:	465a      	mov	r2, fp
 80a2510:	e0a3      	b.n	80a265a <_ZN15DFRobot_Display13fillRoundRectEssssst+0x1e0>
  r = abs(r);
  if(w > 0) {
    if(h > 0) {
      fillRect(x + r, y, w - 2 * r+1, h+1, color);
    } else {
      fillRect(x + r, y + h, w - 2 * r+1, abs(h)+1, color);
 80a2512:	9b06      	ldr	r3, [sp, #24]
 80a2514:	1916      	adds	r6, r2, r4
 80a2516:	4264      	negs	r4, r4
 80a2518:	eb03 0905 	add.w	r9, r3, r5
 80a251c:	b2a3      	uxth	r3, r4
 80a251e:	9307      	str	r3, [sp, #28]
 80a2520:	9a07      	ldr	r2, [sp, #28]
 80a2522:	6801      	ldr	r1, [r0, #0]
 80a2524:	3201      	adds	r2, #1
 80a2526:	b212      	sxth	r2, r2
 80a2528:	f8cd 8004 	str.w	r8, [sp, #4]
 80a252c:	9200      	str	r2, [sp, #0]
 80a252e:	ea4f 0b45 	mov.w	fp, r5, lsl #1
 80a2532:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80a2534:	fa1f fb8b 	uxth.w	fp, fp
 80a2538:	f10a 0301 	add.w	r3, sl, #1
 80a253c:	fa0f f989 	sxth.w	r9, r9
 80a2540:	b2b6      	uxth	r6, r6
 80a2542:	ebcb 0303 	rsb	r3, fp, r3
 80a2546:	4614      	mov	r4, r2
 80a2548:	b21b      	sxth	r3, r3
 80a254a:	b232      	sxth	r2, r6
 80a254c:	4649      	mov	r1, r9
 80a254e:	47a0      	blx	r4
  if(w > 0) {
    if(h > 0) {
      fillCircleHelper(x + r, y + r, r, 2, h - 2 * r, color);
      fillCircleHelper(x + w - r, y + r, r, 1, h - 2 * r, color);
    } else {
      fillCircleHelper(x + r, y + h + r, r, 2, abs(h) - 2 * r, color);
 80a2550:	9b07      	ldr	r3, [sp, #28]
 80a2552:	442e      	add	r6, r5
 80a2554:	ebcb 0403 	rsb	r4, fp, r3
 80a2558:	b236      	sxth	r6, r6
 80a255a:	2302      	movs	r3, #2
 80a255c:	b224      	sxth	r4, r4
 80a255e:	9300      	str	r3, [sp, #0]
 80a2560:	4649      	mov	r1, r9
 80a2562:	9b05      	ldr	r3, [sp, #20]
 80a2564:	f8cd 8008 	str.w	r8, [sp, #8]
 80a2568:	9401      	str	r4, [sp, #4]
 80a256a:	4632      	mov	r2, r6
 80a256c:	4638      	mov	r0, r7
 80a256e:	f7ff feee 	bl	80a234e <_ZN15DFRobot_Display16fillCircleHelperEssshst>
      fillCircleHelper(x + w - r, y + h + r, r, 1, abs(h) - 2 * r, color);
 80a2572:	9b06      	ldr	r3, [sp, #24]
 80a2574:	eb03 010a 	add.w	r1, r3, sl
 80a2578:	1b49      	subs	r1, r1, r5
 80a257a:	e067      	b.n	80a264c <_ZN15DFRobot_Display13fillRoundRectEssssst+0x1d2>
      fillRect(x + r, y, w - 2 * r+1, h+1, color);
    } else {
      fillRect(x + r, y + h, w - 2 * r+1, abs(h)+1, color);
    }
  } else {
    if(h > 0) {
 80a257c:	2c00      	cmp	r4, #0
 80a257e:	dd34      	ble.n	80a25ea <_ZN15DFRobot_Display13fillRoundRectEssssst+0x170>
      fillRect(x + w + r, y, abs(w) - 2 * r+1, h+1, color);
 80a2580:	9906      	ldr	r1, [sp, #24]
 80a2582:	b2a4      	uxth	r4, r4
 80a2584:	eb01 0903 	add.w	r9, r1, r3
 80a2588:	1c66      	adds	r6, r4, #1
 80a258a:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 80a258e:	6801      	ldr	r1, [r0, #0]
 80a2590:	fa1f fa8a 	uxth.w	sl, sl
 80a2594:	b236      	sxth	r6, r6
 80a2596:	44a9      	add	r9, r5
 80a2598:	f1c3 0301 	rsb	r3, r3, #1
 80a259c:	fa0f f989 	sxth.w	r9, r9
 80a25a0:	f8cd 8004 	str.w	r8, [sp, #4]
 80a25a4:	9600      	str	r6, [sp, #0]
 80a25a6:	ebca 0303 	rsb	r3, sl, r3
 80a25aa:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 80a25ac:	b21b      	sxth	r3, r3
 80a25ae:	4649      	mov	r1, r9
 80a25b0:	47b0      	blx	r6
      fillCircleHelper(x + r, y + h + r, r, 2, abs(h) - 2 * r, color);
      fillCircleHelper(x + w - r, y + h + r, r, 1, abs(h) - 2 * r, color);
    }
  } else {
    if(h > 0) {
      fillCircleHelper(x - r, y + r, r, 1, h - 2 * r, color);
 80a25b2:	9b06      	ldr	r3, [sp, #24]
 80a25b4:	eb05 060b 	add.w	r6, r5, fp
 80a25b8:	ebca 0404 	rsb	r4, sl, r4
 80a25bc:	b236      	sxth	r6, r6
 80a25be:	b224      	sxth	r4, r4
 80a25c0:	1b59      	subs	r1, r3, r5
 80a25c2:	2301      	movs	r3, #1
 80a25c4:	9300      	str	r3, [sp, #0]
 80a25c6:	4632      	mov	r2, r6
 80a25c8:	9b05      	ldr	r3, [sp, #20]
 80a25ca:	b209      	sxth	r1, r1
 80a25cc:	f8cd 8008 	str.w	r8, [sp, #8]
 80a25d0:	9401      	str	r4, [sp, #4]
 80a25d2:	4638      	mov	r0, r7
 80a25d4:	f7ff febb 	bl	80a234e <_ZN15DFRobot_Display16fillCircleHelperEssshst>
      fillCircleHelper(x + w + r, y + r, r, 2, h - 2 * r, color);
 80a25d8:	2302      	movs	r3, #2
 80a25da:	9312      	str	r3, [sp, #72]	; 0x48
 80a25dc:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80a25e0:	9413      	str	r4, [sp, #76]	; 0x4c
 80a25e2:	9b05      	ldr	r3, [sp, #20]
 80a25e4:	4632      	mov	r2, r6
 80a25e6:	4649      	mov	r1, r9
 80a25e8:	e038      	b.n	80a265c <_ZN15DFRobot_Display13fillRoundRectEssssst+0x1e2>
    }
  } else {
    if(h > 0) {
      fillRect(x + w + r, y, abs(w) - 2 * r+1, h+1, color);
    } else {
      fillRect(x + w + r, y + h, abs(w) - 2 * r+1, abs(h)+1, color);
 80a25ea:	9a06      	ldr	r2, [sp, #24]
 80a25ec:	eb0b 0604 	add.w	r6, fp, r4
 80a25f0:	4264      	negs	r4, r4
 80a25f2:	b2a4      	uxth	r4, r4
 80a25f4:	eb02 0903 	add.w	r9, r2, r3
 80a25f8:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 80a25fc:	1c62      	adds	r2, r4, #1
 80a25fe:	6801      	ldr	r1, [r0, #0]
 80a2600:	fa1f fa8a 	uxth.w	sl, sl
 80a2604:	b212      	sxth	r2, r2
 80a2606:	44a9      	add	r9, r5
 80a2608:	f1c3 0301 	rsb	r3, r3, #1
 80a260c:	9200      	str	r2, [sp, #0]
 80a260e:	fa0f f989 	sxth.w	r9, r9
 80a2612:	b2b6      	uxth	r6, r6
 80a2614:	f8cd 8004 	str.w	r8, [sp, #4]
 80a2618:	ebca 0303 	rsb	r3, sl, r3
 80a261c:	b232      	sxth	r2, r6
 80a261e:	f8d1 b024 	ldr.w	fp, [r1, #36]	; 0x24
 80a2622:	b21b      	sxth	r3, r3
 80a2624:	4649      	mov	r1, r9
  } else {
    if(h > 0) {
      fillCircleHelper(x - r, y + r, r, 1, h - 2 * r, color);
      fillCircleHelper(x + w + r, y + r, r, 2, h - 2 * r, color);
    } else {
      fillCircleHelper(x + w + r, y + h + r, r, 2, abs(h) - 2 * r, color);
 80a2626:	442e      	add	r6, r5
 80a2628:	ebca 0404 	rsb	r4, sl, r4
    }
  } else {
    if(h > 0) {
      fillRect(x + w + r, y, abs(w) - 2 * r+1, h+1, color);
    } else {
      fillRect(x + w + r, y + h, abs(w) - 2 * r+1, abs(h)+1, color);
 80a262c:	47d8      	blx	fp
  } else {
    if(h > 0) {
      fillCircleHelper(x - r, y + r, r, 1, h - 2 * r, color);
      fillCircleHelper(x + w + r, y + r, r, 2, h - 2 * r, color);
    } else {
      fillCircleHelper(x + w + r, y + h + r, r, 2, abs(h) - 2 * r, color);
 80a262e:	b236      	sxth	r6, r6
 80a2630:	2302      	movs	r3, #2
 80a2632:	b224      	sxth	r4, r4
 80a2634:	9300      	str	r3, [sp, #0]
 80a2636:	4649      	mov	r1, r9
 80a2638:	9b05      	ldr	r3, [sp, #20]
 80a263a:	f8cd 8008 	str.w	r8, [sp, #8]
 80a263e:	9401      	str	r4, [sp, #4]
 80a2640:	4632      	mov	r2, r6
 80a2642:	4638      	mov	r0, r7
 80a2644:	f7ff fe83 	bl	80a234e <_ZN15DFRobot_Display16fillCircleHelperEssshst>
      fillCircleHelper(x - r, y + h + r, r, 1, abs(h) - 2 * r, color);
 80a2648:	9b06      	ldr	r3, [sp, #24]
 80a264a:	1b59      	subs	r1, r3, r5
 80a264c:	4632      	mov	r2, r6
 80a264e:	2301      	movs	r3, #1
 80a2650:	9312      	str	r3, [sp, #72]	; 0x48
 80a2652:	9b05      	ldr	r3, [sp, #20]
 80a2654:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80a2658:	9413      	str	r4, [sp, #76]	; 0x4c
 80a265a:	b209      	sxth	r1, r1
 80a265c:	4638      	mov	r0, r7
    }
  }
}
 80a265e:	b009      	add	sp, #36	; 0x24
 80a2660:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(h > 0) {
      fillCircleHelper(x - r, y + r, r, 1, h - 2 * r, color);
      fillCircleHelper(x + w + r, y + r, r, 2, h - 2 * r, color);
    } else {
      fillCircleHelper(x + w + r, y + h + r, r, 2, abs(h) - 2 * r, color);
      fillCircleHelper(x - r, y + h + r, r, 1, abs(h) - 2 * r, color);
 80a2664:	f7ff be73 	b.w	80a234e <_ZN15DFRobot_Display16fillCircleHelperEssshst>

080a2668 <_ZN15DFRobot_Display12setLineWidthEt>:
  return textSize;
}

void DFRobot_Display::setLineWidth(uint16_t w)
{
  lineWidth = w;
 80a2668:	83c1      	strh	r1, [r0, #30]
 80a266a:	4770      	bx	lr

080a266c <_ZN15DFRobot_Display12getLineWidthEv>:
}

uint16_t DFRobot_Display::getLineWidth()
{
  return lineWidth;
}
 80a266c:	8bc0      	ldrh	r0, [r0, #30]
 80a266e:	4770      	bx	lr

080a2670 <_ZN15DFRobot_Display15setDisplayShapeE6eSHAPE>:
  return height;
}

void DFRobot_Display::setDisplayShape(eSHAPE eShape)
{
  switch(eShape) {
 80a2670:	2901      	cmp	r1, #1
    case eSHAPE_CIRCLE: eShape = eSHAPE_CIRCLE; displayRadius = width / 2; break;
 80a2672:	bf01      	itttt	eq
 80a2674:	f9b0 3008 	ldrsheq.w	r3, [r0, #8]
 80a2678:	2202      	moveq	r2, #2
 80a267a:	fb93 f3f2 	sdiveq	r3, r3, r2
 80a267e:	8383      	strheq	r3, [r0, #28]
 80a2680:	4770      	bx	lr

080a2682 <_ZN15DFRobot_Display9setCursorEss>:
  return 0;
}

void DFRobot_Display::setCursor(int16_t x, int16_t y)
{
  if(x > width) {
 80a2682:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
    printfX = width;
 80a2686:	4299      	cmp	r1, r3
 80a2688:	bfa8      	it	ge
 80a268a:	4619      	movge	r1, r3
  } else {
    printfX = x;
  }
  if(y > height) {
 80a268c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
}

void DFRobot_Display::setCursor(int16_t x, int16_t y)
{
  if(x > width) {
    printfX = width;
 80a2690:	8481      	strh	r1, [r0, #36]	; 0x24
  } else {
    printfX = x;
  }
  if(y > height) {
    printfY = height;
 80a2692:	429a      	cmp	r2, r3
 80a2694:	bfa8      	it	ge
 80a2696:	461a      	movge	r2, r3
 80a2698:	84c2      	strh	r2, [r0, #38]	; 0x26
 80a269a:	4770      	bx	lr

080a269c <_ZN15DFRobot_Display8setOrignEss>:
    pfCharacterFont = GT30L_getCharacter;
}

void DFRobot_Display::setOrign(int16_t x, int16_t y)
{
  if(x > width) {
 80a269c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
    cursorX = width;
 80a26a0:	4299      	cmp	r1, r3
 80a26a2:	bfa8      	it	ge
 80a26a4:	4619      	movge	r1, r3
  } else {
    cursorX = x;
  }
  if(y > height) {
 80a26a6:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
}

void DFRobot_Display::setOrign(int16_t x, int16_t y)
{
  if(x > width) {
    cursorX = width;
 80a26aa:	8301      	strh	r1, [r0, #24]
  } else {
    cursorX = x;
  }
  if(y > height) {
    cursorY = height;
 80a26ac:	429a      	cmp	r2, r3
 80a26ae:	bfa8      	it	ge
 80a26b0:	461a      	movge	r2, r3
 80a26b2:	8342      	strh	r2, [r0, #26]
 80a26b4:	4770      	bx	lr

080a26b6 <_GLOBAL__sub_I__ZN15DFRobot_DisplayC2Ett>:
 80a26b6:	f000 b801 	b.w	80a26bc <HAL_Pin_Map>
	...

080a26bc <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a26bc:	b508      	push	{r3, lr}
 80a26be:	4b02      	ldr	r3, [pc, #8]	; (80a26c8 <HAL_Pin_Map+0xc>)
 80a26c0:	681b      	ldr	r3, [r3, #0]
 80a26c2:	681b      	ldr	r3, [r3, #0]
 80a26c4:	9301      	str	r3, [sp, #4]
 80a26c6:	bd08      	pop	{r3, pc}
 80a26c8:	080601b0 	.word	0x080601b0

080a26cc <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a26cc:	b508      	push	{r3, lr}
 80a26ce:	4b02      	ldr	r3, [pc, #8]	; (80a26d8 <HAL_Pin_Mode+0xc>)
 80a26d0:	681b      	ldr	r3, [r3, #0]
 80a26d2:	689b      	ldr	r3, [r3, #8]
 80a26d4:	9301      	str	r3, [sp, #4]
 80a26d6:	bd08      	pop	{r3, pc}
 80a26d8:	080601b0 	.word	0x080601b0

080a26dc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a26dc:	b508      	push	{r3, lr}
 80a26de:	4b02      	ldr	r3, [pc, #8]	; (80a26e8 <HAL_Get_Pin_Mode+0xc>)
 80a26e0:	681b      	ldr	r3, [r3, #0]
 80a26e2:	68db      	ldr	r3, [r3, #12]
 80a26e4:	9301      	str	r3, [sp, #4]
 80a26e6:	bd08      	pop	{r3, pc}
 80a26e8:	080601b0 	.word	0x080601b0

080a26ec <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a26ec:	b508      	push	{r3, lr}
 80a26ee:	4b02      	ldr	r3, [pc, #8]	; (80a26f8 <HAL_GPIO_Write+0xc>)
 80a26f0:	681b      	ldr	r3, [r3, #0]
 80a26f2:	691b      	ldr	r3, [r3, #16]
 80a26f4:	9301      	str	r3, [sp, #4]
 80a26f6:	bd08      	pop	{r3, pc}
 80a26f8:	080601b0 	.word	0x080601b0

080a26fc <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 80a26fc:	b508      	push	{r3, lr}
 80a26fe:	4b02      	ldr	r3, [pc, #8]	; (80a2708 <HAL_SPI_Begin+0xc>)
 80a2700:	681b      	ldr	r3, [r3, #0]
 80a2702:	681b      	ldr	r3, [r3, #0]
 80a2704:	9301      	str	r3, [sp, #4]
 80a2706:	bd08      	pop	{r3, pc}
 80a2708:	080601b4 	.word	0x080601b4

080a270c <HAL_SPI_End>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
 80a270c:	b508      	push	{r3, lr}
 80a270e:	4b02      	ldr	r3, [pc, #8]	; (80a2718 <HAL_SPI_End+0xc>)
 80a2710:	681b      	ldr	r3, [r3, #0]
 80a2712:	685b      	ldr	r3, [r3, #4]
 80a2714:	9301      	str	r3, [sp, #4]
 80a2716:	bd08      	pop	{r3, pc}
 80a2718:	080601b4 	.word	0x080601b4

080a271c <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80a271c:	b508      	push	{r3, lr}
 80a271e:	4b02      	ldr	r3, [pc, #8]	; (80a2728 <HAL_SPI_Send_Receive_Data+0xc>)
 80a2720:	681b      	ldr	r3, [r3, #0]
 80a2722:	695b      	ldr	r3, [r3, #20]
 80a2724:	9301      	str	r3, [sp, #4]
 80a2726:	bd08      	pop	{r3, pc}
 80a2728:	080601b4 	.word	0x080601b4

080a272c <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a272c:	b508      	push	{r3, lr}
 80a272e:	4b02      	ldr	r3, [pc, #8]	; (80a2738 <HAL_SPI_Init+0xc>)
 80a2730:	681b      	ldr	r3, [r3, #0]
 80a2732:	69db      	ldr	r3, [r3, #28]
 80a2734:	9301      	str	r3, [sp, #4]
 80a2736:	bd08      	pop	{r3, pc}
 80a2738:	080601b4 	.word	0x080601b4

080a273c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a273c:	b508      	push	{r3, lr}
 80a273e:	4b02      	ldr	r3, [pc, #8]	; (80a2748 <HAL_SPI_Is_Enabled+0xc>)
 80a2740:	681b      	ldr	r3, [r3, #0]
 80a2742:	6a1b      	ldr	r3, [r3, #32]
 80a2744:	9301      	str	r3, [sp, #4]
 80a2746:	bd08      	pop	{r3, pc}
 80a2748:	080601b4 	.word	0x080601b4

080a274c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a274c:	b508      	push	{r3, lr}
 80a274e:	4b02      	ldr	r3, [pc, #8]	; (80a2758 <HAL_RNG_GetRandomNumber+0xc>)
 80a2750:	681b      	ldr	r3, [r3, #0]
 80a2752:	685b      	ldr	r3, [r3, #4]
 80a2754:	9301      	str	r3, [sp, #4]
 80a2756:	bd08      	pop	{r3, pc}
 80a2758:	0806019c 	.word	0x0806019c

080a275c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a275c:	b508      	push	{r3, lr}
 80a275e:	4b02      	ldr	r3, [pc, #8]	; (80a2768 <HAL_Delay_Microseconds+0xc>)
 80a2760:	681b      	ldr	r3, [r3, #0]
 80a2762:	68db      	ldr	r3, [r3, #12]
 80a2764:	9301      	str	r3, [sp, #4]
 80a2766:	bd08      	pop	{r3, pc}
 80a2768:	0806019c 	.word	0x0806019c

080a276c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a276c:	b508      	push	{r3, lr}
 80a276e:	4b02      	ldr	r3, [pc, #8]	; (80a2778 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a2770:	681b      	ldr	r3, [r3, #0]
 80a2772:	695b      	ldr	r3, [r3, #20]
 80a2774:	9301      	str	r3, [sp, #4]
 80a2776:	bd08      	pop	{r3, pc}
 80a2778:	0806019c 	.word	0x0806019c

080a277c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a277c:	b508      	push	{r3, lr}
 80a277e:	4b02      	ldr	r3, [pc, #8]	; (80a2788 <os_mutex_recursive_create+0xc>)
 80a2780:	681b      	ldr	r3, [r3, #0]
 80a2782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a2784:	9301      	str	r3, [sp, #4]
 80a2786:	bd08      	pop	{r3, pc}
 80a2788:	080601d0 	.word	0x080601d0

080a278c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a278c:	b508      	push	{r3, lr}
 80a278e:	4b02      	ldr	r3, [pc, #8]	; (80a2798 <os_mutex_recursive_destroy+0xc>)
 80a2790:	681b      	ldr	r3, [r3, #0]
 80a2792:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a2794:	9301      	str	r3, [sp, #4]
 80a2796:	bd08      	pop	{r3, pc}
 80a2798:	080601d0 	.word	0x080601d0

080a279c <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 80a279c:	b508      	push	{r3, lr}
 80a279e:	4b02      	ldr	r3, [pc, #8]	; (80a27a8 <os_mutex_recursive_lock+0xc>)
 80a27a0:	681b      	ldr	r3, [r3, #0]
 80a27a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a27a4:	9301      	str	r3, [sp, #4]
 80a27a6:	bd08      	pop	{r3, pc}
 80a27a8:	080601d0 	.word	0x080601d0

080a27ac <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 80a27ac:	b508      	push	{r3, lr}
 80a27ae:	4b02      	ldr	r3, [pc, #8]	; (80a27b8 <os_mutex_recursive_unlock+0xc>)
 80a27b0:	681b      	ldr	r3, [r3, #0]
 80a27b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a27b4:	9301      	str	r3, [sp, #4]
 80a27b6:	bd08      	pop	{r3, pc}
 80a27b8:	080601d0 	.word	0x080601d0

080a27bc <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a27bc:	b508      	push	{r3, lr}
 80a27be:	4b02      	ldr	r3, [pc, #8]	; (80a27c8 <HAL_USART_Init+0xc>)
 80a27c0:	681b      	ldr	r3, [r3, #0]
 80a27c2:	699b      	ldr	r3, [r3, #24]
 80a27c4:	9301      	str	r3, [sp, #4]
 80a27c6:	bd08      	pop	{r3, pc}
 80a27c8:	080601c4 	.word	0x080601c4

080a27cc <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a27cc:	b508      	push	{r3, lr}
 80a27ce:	4b02      	ldr	r3, [pc, #8]	; (80a27d8 <HAL_USART_Write_Data+0xc>)
 80a27d0:	681b      	ldr	r3, [r3, #0]
 80a27d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a27d4:	9301      	str	r3, [sp, #4]
 80a27d6:	bd08      	pop	{r3, pc}
 80a27d8:	080601c4 	.word	0x080601c4

080a27dc <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a27dc:	b508      	push	{r3, lr}
 80a27de:	4b02      	ldr	r3, [pc, #8]	; (80a27e8 <HAL_USART_Available_Data+0xc>)
 80a27e0:	681b      	ldr	r3, [r3, #0]
 80a27e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a27e4:	9301      	str	r3, [sp, #4]
 80a27e6:	bd08      	pop	{r3, pc}
 80a27e8:	080601c4 	.word	0x080601c4

080a27ec <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a27ec:	b508      	push	{r3, lr}
 80a27ee:	4b02      	ldr	r3, [pc, #8]	; (80a27f8 <HAL_USART_Read_Data+0xc>)
 80a27f0:	681b      	ldr	r3, [r3, #0]
 80a27f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a27f4:	9301      	str	r3, [sp, #4]
 80a27f6:	bd08      	pop	{r3, pc}
 80a27f8:	080601c4 	.word	0x080601c4

080a27fc <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a27fc:	b508      	push	{r3, lr}
 80a27fe:	4b02      	ldr	r3, [pc, #8]	; (80a2808 <HAL_USART_Peek_Data+0xc>)
 80a2800:	681b      	ldr	r3, [r3, #0]
 80a2802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2804:	9301      	str	r3, [sp, #4]
 80a2806:	bd08      	pop	{r3, pc}
 80a2808:	080601c4 	.word	0x080601c4

080a280c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a280c:	b508      	push	{r3, lr}
 80a280e:	4b02      	ldr	r3, [pc, #8]	; (80a2818 <HAL_USART_Flush_Data+0xc>)
 80a2810:	681b      	ldr	r3, [r3, #0]
 80a2812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a2814:	9301      	str	r3, [sp, #4]
 80a2816:	bd08      	pop	{r3, pc}
 80a2818:	080601c4 	.word	0x080601c4

080a281c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a281c:	b508      	push	{r3, lr}
 80a281e:	4b02      	ldr	r3, [pc, #8]	; (80a2828 <HAL_USART_Is_Enabled+0xc>)
 80a2820:	681b      	ldr	r3, [r3, #0]
 80a2822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a2824:	9301      	str	r3, [sp, #4]
 80a2826:	bd08      	pop	{r3, pc}
 80a2828:	080601c4 	.word	0x080601c4

080a282c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a282c:	b508      	push	{r3, lr}
 80a282e:	4b02      	ldr	r3, [pc, #8]	; (80a2838 <HAL_USART_Available_Data_For_Write+0xc>)
 80a2830:	681b      	ldr	r3, [r3, #0]
 80a2832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a2834:	9301      	str	r3, [sp, #4]
 80a2836:	bd08      	pop	{r3, pc}
 80a2838:	080601c4 	.word	0x080601c4

080a283c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a283c:	b508      	push	{r3, lr}
 80a283e:	4b02      	ldr	r3, [pc, #8]	; (80a2848 <HAL_I2C_Write_Data+0xc>)
 80a2840:	681b      	ldr	r3, [r3, #0]
 80a2842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a2844:	9301      	str	r3, [sp, #4]
 80a2846:	bd08      	pop	{r3, pc}
 80a2848:	080601ac 	.word	0x080601ac

080a284c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a284c:	b508      	push	{r3, lr}
 80a284e:	4b02      	ldr	r3, [pc, #8]	; (80a2858 <HAL_I2C_Available_Data+0xc>)
 80a2850:	681b      	ldr	r3, [r3, #0]
 80a2852:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a2854:	9301      	str	r3, [sp, #4]
 80a2856:	bd08      	pop	{r3, pc}
 80a2858:	080601ac 	.word	0x080601ac

080a285c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a285c:	b508      	push	{r3, lr}
 80a285e:	4b02      	ldr	r3, [pc, #8]	; (80a2868 <HAL_I2C_Read_Data+0xc>)
 80a2860:	681b      	ldr	r3, [r3, #0]
 80a2862:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a2864:	9301      	str	r3, [sp, #4]
 80a2866:	bd08      	pop	{r3, pc}
 80a2868:	080601ac 	.word	0x080601ac

080a286c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a286c:	b508      	push	{r3, lr}
 80a286e:	4b02      	ldr	r3, [pc, #8]	; (80a2878 <HAL_I2C_Peek_Data+0xc>)
 80a2870:	681b      	ldr	r3, [r3, #0]
 80a2872:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a2874:	9301      	str	r3, [sp, #4]
 80a2876:	bd08      	pop	{r3, pc}
 80a2878:	080601ac 	.word	0x080601ac

080a287c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a287c:	b508      	push	{r3, lr}
 80a287e:	4b02      	ldr	r3, [pc, #8]	; (80a2888 <HAL_I2C_Flush_Data+0xc>)
 80a2880:	681b      	ldr	r3, [r3, #0]
 80a2882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a2884:	9301      	str	r3, [sp, #4]
 80a2886:	bd08      	pop	{r3, pc}
 80a2888:	080601ac 	.word	0x080601ac

080a288c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a288c:	b508      	push	{r3, lr}
 80a288e:	4b02      	ldr	r3, [pc, #8]	; (80a2898 <HAL_I2C_Is_Enabled+0xc>)
 80a2890:	681b      	ldr	r3, [r3, #0]
 80a2892:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a2894:	9301      	str	r3, [sp, #4]
 80a2896:	bd08      	pop	{r3, pc}
 80a2898:	080601ac 	.word	0x080601ac

080a289c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
 80a289c:	b508      	push	{r3, lr}
 80a289e:	4b03      	ldr	r3, [pc, #12]	; (80a28ac <HAL_I2C_Init+0x10>)
 80a28a0:	681b      	ldr	r3, [r3, #0]
 80a28a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a28a6:	9301      	str	r3, [sp, #4]
 80a28a8:	bd08      	pop	{r3, pc}
 80a28aa:	0000      	.short	0x0000
 80a28ac:	080601ac 	.word	0x080601ac

080a28b0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a28b0:	b508      	push	{r3, lr}
 80a28b2:	4b02      	ldr	r3, [pc, #8]	; (80a28bc <HAL_USB_USART_Init+0xc>)
 80a28b4:	681b      	ldr	r3, [r3, #0]
 80a28b6:	681b      	ldr	r3, [r3, #0]
 80a28b8:	9301      	str	r3, [sp, #4]
 80a28ba:	bd08      	pop	{r3, pc}
 80a28bc:	080601d8 	.word	0x080601d8

080a28c0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a28c0:	b508      	push	{r3, lr}
 80a28c2:	4b02      	ldr	r3, [pc, #8]	; (80a28cc <HAL_USB_USART_Begin+0xc>)
 80a28c4:	681b      	ldr	r3, [r3, #0]
 80a28c6:	685b      	ldr	r3, [r3, #4]
 80a28c8:	9301      	str	r3, [sp, #4]
 80a28ca:	bd08      	pop	{r3, pc}
 80a28cc:	080601d8 	.word	0x080601d8

080a28d0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a28d0:	b508      	push	{r3, lr}
 80a28d2:	4b02      	ldr	r3, [pc, #8]	; (80a28dc <HAL_USB_USART_Available_Data+0xc>)
 80a28d4:	681b      	ldr	r3, [r3, #0]
 80a28d6:	691b      	ldr	r3, [r3, #16]
 80a28d8:	9301      	str	r3, [sp, #4]
 80a28da:	bd08      	pop	{r3, pc}
 80a28dc:	080601d8 	.word	0x080601d8

080a28e0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a28e0:	b508      	push	{r3, lr}
 80a28e2:	4b02      	ldr	r3, [pc, #8]	; (80a28ec <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a28e4:	681b      	ldr	r3, [r3, #0]
 80a28e6:	695b      	ldr	r3, [r3, #20]
 80a28e8:	9301      	str	r3, [sp, #4]
 80a28ea:	bd08      	pop	{r3, pc}
 80a28ec:	080601d8 	.word	0x080601d8

080a28f0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a28f0:	b508      	push	{r3, lr}
 80a28f2:	4b02      	ldr	r3, [pc, #8]	; (80a28fc <HAL_USB_USART_Receive_Data+0xc>)
 80a28f4:	681b      	ldr	r3, [r3, #0]
 80a28f6:	699b      	ldr	r3, [r3, #24]
 80a28f8:	9301      	str	r3, [sp, #4]
 80a28fa:	bd08      	pop	{r3, pc}
 80a28fc:	080601d8 	.word	0x080601d8

080a2900 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a2900:	b508      	push	{r3, lr}
 80a2902:	4b02      	ldr	r3, [pc, #8]	; (80a290c <HAL_USB_USART_Send_Data+0xc>)
 80a2904:	681b      	ldr	r3, [r3, #0]
 80a2906:	69db      	ldr	r3, [r3, #28]
 80a2908:	9301      	str	r3, [sp, #4]
 80a290a:	bd08      	pop	{r3, pc}
 80a290c:	080601d8 	.word	0x080601d8

080a2910 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a2910:	b508      	push	{r3, lr}
 80a2912:	4b02      	ldr	r3, [pc, #8]	; (80a291c <HAL_USB_USART_Flush_Data+0xc>)
 80a2914:	681b      	ldr	r3, [r3, #0]
 80a2916:	6a1b      	ldr	r3, [r3, #32]
 80a2918:	9301      	str	r3, [sp, #4]
 80a291a:	bd08      	pop	{r3, pc}
 80a291c:	080601d8 	.word	0x080601d8

080a2920 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a2920:	b508      	push	{r3, lr}
 80a2922:	4b02      	ldr	r3, [pc, #8]	; (80a292c <inet_gethostbyname+0xc>)
 80a2924:	681b      	ldr	r3, [r3, #0]
 80a2926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a2928:	9301      	str	r3, [sp, #4]
 80a292a:	bd08      	pop	{r3, pc}
 80a292c:	080601c0 	.word	0x080601c0

080a2930 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 80a2930:	b508      	push	{r3, lr}
 80a2932:	4b02      	ldr	r3, [pc, #8]	; (80a293c <panic_+0xc>)
 80a2934:	681b      	ldr	r3, [r3, #0]
 80a2936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a2938:	9301      	str	r3, [sp, #4]
 80a293a:	bd08      	pop	{r3, pc}
 80a293c:	080201a8 	.word	0x080201a8

080a2940 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a2940:	b508      	push	{r3, lr}
 80a2942:	4b02      	ldr	r3, [pc, #8]	; (80a294c <set_system_mode+0xc>)
 80a2944:	681b      	ldr	r3, [r3, #0]
 80a2946:	685b      	ldr	r3, [r3, #4]
 80a2948:	9301      	str	r3, [sp, #4]
 80a294a:	bd08      	pop	{r3, pc}
 80a294c:	080601a4 	.word	0x080601a4

080a2950 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a2950:	b508      	push	{r3, lr}
 80a2952:	4b02      	ldr	r3, [pc, #8]	; (80a295c <system_delay_ms+0xc>)
 80a2954:	681b      	ldr	r3, [r3, #0]
 80a2956:	695b      	ldr	r3, [r3, #20]
 80a2958:	9301      	str	r3, [sp, #4]
 80a295a:	bd08      	pop	{r3, pc}
 80a295c:	080601a4 	.word	0x080601a4

080a2960 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a2960:	b508      	push	{r3, lr}
 80a2962:	4b03      	ldr	r3, [pc, #12]	; (80a2970 <system_ctrl_set_app_request_handler+0x10>)
 80a2964:	681b      	ldr	r3, [r3, #0]
 80a2966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a296a:	9301      	str	r3, [sp, #4]
 80a296c:	bd08      	pop	{r3, pc}
 80a296e:	0000      	.short	0x0000
 80a2970:	080601a4 	.word	0x080601a4

080a2974 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a2974:	b508      	push	{r3, lr}
 80a2976:	4b03      	ldr	r3, [pc, #12]	; (80a2984 <system_ctrl_set_result+0x10>)
 80a2978:	681b      	ldr	r3, [r3, #0]
 80a297a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a297e:	9301      	str	r3, [sp, #4]
 80a2980:	bd08      	pop	{r3, pc}
 80a2982:	0000      	.short	0x0000
 80a2984:	080601a4 	.word	0x080601a4

080a2988 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a2988:	b508      	push	{r3, lr}
 80a298a:	4b02      	ldr	r3, [pc, #8]	; (80a2994 <network_connect+0xc>)
 80a298c:	681b      	ldr	r3, [r3, #0]
 80a298e:	685b      	ldr	r3, [r3, #4]
 80a2990:	9301      	str	r3, [sp, #4]
 80a2992:	bd08      	pop	{r3, pc}
 80a2994:	080601c8 	.word	0x080601c8

080a2998 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a2998:	b508      	push	{r3, lr}
 80a299a:	4b02      	ldr	r3, [pc, #8]	; (80a29a4 <network_connecting+0xc>)
 80a299c:	681b      	ldr	r3, [r3, #0]
 80a299e:	689b      	ldr	r3, [r3, #8]
 80a29a0:	9301      	str	r3, [sp, #4]
 80a29a2:	bd08      	pop	{r3, pc}
 80a29a4:	080601c8 	.word	0x080601c8

080a29a8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a29a8:	b508      	push	{r3, lr}
 80a29aa:	4b02      	ldr	r3, [pc, #8]	; (80a29b4 <network_disconnect+0xc>)
 80a29ac:	681b      	ldr	r3, [r3, #0]
 80a29ae:	68db      	ldr	r3, [r3, #12]
 80a29b0:	9301      	str	r3, [sp, #4]
 80a29b2:	bd08      	pop	{r3, pc}
 80a29b4:	080601c8 	.word	0x080601c8

080a29b8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a29b8:	b508      	push	{r3, lr}
 80a29ba:	4b02      	ldr	r3, [pc, #8]	; (80a29c4 <network_ready+0xc>)
 80a29bc:	681b      	ldr	r3, [r3, #0]
 80a29be:	691b      	ldr	r3, [r3, #16]
 80a29c0:	9301      	str	r3, [sp, #4]
 80a29c2:	bd08      	pop	{r3, pc}
 80a29c4:	080601c8 	.word	0x080601c8

080a29c8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a29c8:	b508      	push	{r3, lr}
 80a29ca:	4b02      	ldr	r3, [pc, #8]	; (80a29d4 <network_on+0xc>)
 80a29cc:	681b      	ldr	r3, [r3, #0]
 80a29ce:	695b      	ldr	r3, [r3, #20]
 80a29d0:	9301      	str	r3, [sp, #4]
 80a29d2:	bd08      	pop	{r3, pc}
 80a29d4:	080601c8 	.word	0x080601c8

080a29d8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a29d8:	b508      	push	{r3, lr}
 80a29da:	4b02      	ldr	r3, [pc, #8]	; (80a29e4 <network_off+0xc>)
 80a29dc:	681b      	ldr	r3, [r3, #0]
 80a29de:	699b      	ldr	r3, [r3, #24]
 80a29e0:	9301      	str	r3, [sp, #4]
 80a29e2:	bd08      	pop	{r3, pc}
 80a29e4:	080601c8 	.word	0x080601c8

080a29e8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a29e8:	b508      	push	{r3, lr}
 80a29ea:	4b02      	ldr	r3, [pc, #8]	; (80a29f4 <network_listen+0xc>)
 80a29ec:	681b      	ldr	r3, [r3, #0]
 80a29ee:	69db      	ldr	r3, [r3, #28]
 80a29f0:	9301      	str	r3, [sp, #4]
 80a29f2:	bd08      	pop	{r3, pc}
 80a29f4:	080601c8 	.word	0x080601c8

080a29f8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a29f8:	b508      	push	{r3, lr}
 80a29fa:	4b02      	ldr	r3, [pc, #8]	; (80a2a04 <network_listening+0xc>)
 80a29fc:	681b      	ldr	r3, [r3, #0]
 80a29fe:	6a1b      	ldr	r3, [r3, #32]
 80a2a00:	9301      	str	r3, [sp, #4]
 80a2a02:	bd08      	pop	{r3, pc}
 80a2a04:	080601c8 	.word	0x080601c8

080a2a08 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a2a08:	b508      	push	{r3, lr}
 80a2a0a:	4b02      	ldr	r3, [pc, #8]	; (80a2a14 <network_set_listen_timeout+0xc>)
 80a2a0c:	681b      	ldr	r3, [r3, #0]
 80a2a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2a10:	9301      	str	r3, [sp, #4]
 80a2a12:	bd08      	pop	{r3, pc}
 80a2a14:	080601c8 	.word	0x080601c8

080a2a18 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a2a18:	b508      	push	{r3, lr}
 80a2a1a:	4b02      	ldr	r3, [pc, #8]	; (80a2a24 <network_get_listen_timeout+0xc>)
 80a2a1c:	681b      	ldr	r3, [r3, #0]
 80a2a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a2a20:	9301      	str	r3, [sp, #4]
 80a2a22:	bd08      	pop	{r3, pc}
 80a2a24:	080601c8 	.word	0x080601c8

080a2a28 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a2a28:	b508      	push	{r3, lr}
 80a2a2a:	4b02      	ldr	r3, [pc, #8]	; (80a2a34 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a2a2c:	681b      	ldr	r3, [r3, #0]
 80a2a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a2a30:	9301      	str	r3, [sp, #4]
 80a2a32:	bd08      	pop	{r3, pc}
 80a2a34:	080601cc 	.word	0x080601cc

080a2a38 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a2a38:	b508      	push	{r3, lr}
 80a2a3a:	4b02      	ldr	r3, [pc, #8]	; (80a2a44 <malloc+0xc>)
 80a2a3c:	681b      	ldr	r3, [r3, #0]
 80a2a3e:	681b      	ldr	r3, [r3, #0]
 80a2a40:	9301      	str	r3, [sp, #4]
 80a2a42:	bd08      	pop	{r3, pc}
 80a2a44:	080601a0 	.word	0x080601a0

080a2a48 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a2a48:	b508      	push	{r3, lr}
 80a2a4a:	4b02      	ldr	r3, [pc, #8]	; (80a2a54 <free+0xc>)
 80a2a4c:	681b      	ldr	r3, [r3, #0]
 80a2a4e:	685b      	ldr	r3, [r3, #4]
 80a2a50:	9301      	str	r3, [sp, #4]
 80a2a52:	bd08      	pop	{r3, pc}
 80a2a54:	080601a0 	.word	0x080601a0

080a2a58 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 80a2a58:	b508      	push	{r3, lr}
 80a2a5a:	4b02      	ldr	r3, [pc, #8]	; (80a2a64 <__errno+0xc>)
 80a2a5c:	681b      	ldr	r3, [r3, #0]
 80a2a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a2a60:	9301      	str	r3, [sp, #4]
 80a2a62:	bd08      	pop	{r3, pc}
 80a2a64:	080601a0 	.word	0x080601a0

080a2a68 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a2a68:	b510      	push	{r4, lr}
 80a2a6a:	4b04      	ldr	r3, [pc, #16]	; (80a2a7c <_ZN8SPIClassD1Ev+0x14>)
 80a2a6c:	4604      	mov	r4, r0
 80a2a6e:	6003      	str	r3, [r0, #0]
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a2a70:	68c0      	ldr	r0, [r0, #12]
 80a2a72:	b108      	cbz	r0, 80a2a78 <_ZN8SPIClassD1Ev+0x10>
            os_mutex_recursive_destroy(handle_);
 80a2a74:	f7ff fe8a 	bl	80a278c <os_mutex_recursive_destroy>
 80a2a78:	4620      	mov	r0, r4
 80a2a7a:	bd10      	pop	{r4, pc}
 80a2a7c:	080a5e80 	.word	0x080a5e80

080a2a80 <_ZN8SPIClassD0Ev>:
 80a2a80:	b510      	push	{r4, lr}
 80a2a82:	4604      	mov	r4, r0
 80a2a84:	f7ff fff0 	bl	80a2a68 <_ZN8SPIClassD1Ev>
 80a2a88:	4620      	mov	r0, r4
 80a2a8a:	2110      	movs	r1, #16
 80a2a8c:	f000 fd24 	bl	80a34d8 <_ZdlPvj>
 80a2a90:	4620      	mov	r0, r4
 80a2a92:	bd10      	pop	{r4, pc}

080a2a94 <_ZN14RecursiveMutex4lockEv>:
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 80a2a94:	6800      	ldr	r0, [r0, #0]
 80a2a96:	f7ff be81 	b.w	80a279c <os_mutex_recursive_lock>

080a2a9a <_ZN14RecursiveMutex6unlockEv>:
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 80a2a9a:	6800      	ldr	r0, [r0, #0]
 80a2a9c:	f7ff be86 	b.w	80a27ac <os_mutex_recursive_unlock>

080a2aa0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a2aa0:	b570      	push	{r4, r5, r6, lr}
 80a2aa2:	4604      	mov	r4, r0
 80a2aa4:	460e      	mov	r6, r1
 80a2aa6:	4b07      	ldr	r3, [pc, #28]	; (80a2ac4 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a2aa8:	2500      	movs	r5, #0
 80a2aaa:	6003      	str	r3, [r0, #0]
 80a2aac:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_recursive_create(&handle_);
 80a2ab0:	f7ff fe64 	bl	80a277c <os_mutex_recursive_create>
{
    _spi = spi;
    HAL_SPI_Init(_spi);
 80a2ab4:	4630      	mov	r0, r6
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
    _spi = spi;
 80a2ab6:	7126      	strb	r6, [r4, #4]
    HAL_SPI_Init(_spi);
 80a2ab8:	f7ff fe38 	bl	80a272c <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a2abc:	60a5      	str	r5, [r4, #8]
}
 80a2abe:	4620      	mov	r0, r4
 80a2ac0:	bd70      	pop	{r4, r5, r6, pc}
 80a2ac2:	bf00      	nop
 80a2ac4:	080a5e80 	.word	0x080a5e80

080a2ac8 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 80a2ac8:	b538      	push	{r3, r4, r5, lr}
 80a2aca:	4605      	mov	r5, r0
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 80a2acc:	f100 040c 	add.w	r4, r0, #12
 80a2ad0:	4620      	mov	r0, r4
 80a2ad2:	f7ff ffdf 	bl	80a2a94 <_ZN14RecursiveMutex4lockEv>
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 80a2ad6:	7928      	ldrb	r0, [r5, #4]
 80a2ad8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a2adc:	f7ff fe0e 	bl	80a26fc <HAL_SPI_Begin>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 80a2ae0:	4620      	mov	r0, r4
 80a2ae2:	f7ff ffda 	bl	80a2a9a <_ZN14RecursiveMutex6unlockEv>
 80a2ae6:	bd38      	pop	{r3, r4, r5, pc}

080a2ae8 <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
 80a2ae8:	b538      	push	{r3, r4, r5, lr}
 80a2aea:	4605      	mov	r5, r0
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 80a2aec:	f100 040c 	add.w	r4, r0, #12
 80a2af0:	4620      	mov	r0, r4
 80a2af2:	f7ff ffcf 	bl	80a2a94 <_ZN14RecursiveMutex4lockEv>
    if (!lock())
    {
        HAL_SPI_End(_spi);
 80a2af6:	7928      	ldrb	r0, [r5, #4]
 80a2af8:	f7ff fe08 	bl	80a270c <HAL_SPI_End>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 80a2afc:	4620      	mov	r0, r4
 80a2afe:	f7ff ffcc 	bl	80a2a9a <_ZN14RecursiveMutex6unlockEv>
 80a2b02:	bd38      	pop	{r3, r4, r5, pc}

080a2b04 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80a2b04:	b570      	push	{r4, r5, r6, lr}
 80a2b06:	4605      	mov	r5, r0
 80a2b08:	460e      	mov	r6, r1
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 80a2b0a:	f100 040c 	add.w	r4, r0, #12
 80a2b0e:	4620      	mov	r0, r4
 80a2b10:	f7ff ffc0 	bl	80a2a94 <_ZN14RecursiveMutex4lockEv>
    uint16_t result = 0;
    if (!lock())
    {
        result = HAL_SPI_Send_Receive_Data(_spi, _data);
 80a2b14:	4631      	mov	r1, r6
 80a2b16:	7928      	ldrb	r0, [r5, #4]
 80a2b18:	f7ff fe00 	bl	80a271c <HAL_SPI_Send_Receive_Data>
 80a2b1c:	4605      	mov	r5, r0
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 80a2b1e:	4620      	mov	r0, r4
 80a2b20:	f7ff ffbb 	bl	80a2a9a <_ZN14RecursiveMutex6unlockEv>
        unlock();
    }
    return static_cast<byte>(result);
}
 80a2b24:	b2e8      	uxtb	r0, r5
 80a2b26:	bd70      	pop	{r4, r5, r6, pc}

080a2b28 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
 80a2b28:	7900      	ldrb	r0, [r0, #4]
 80a2b2a:	f7ff be07 	b.w	80a273c <HAL_SPI_Is_Enabled>

080a2b2e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a2b2e:	b510      	push	{r4, lr}
 80a2b30:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a2b32:	6800      	ldr	r0, [r0, #0]
 80a2b34:	b118      	cbz	r0, 80a2b3e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
 80a2b36:	f7ff ff87 	bl	80a2a48 <free>
            wakeupSource_ = nullptr;
 80a2b3a:	2300      	movs	r3, #0
 80a2b3c:	6023      	str	r3, [r4, #0]
 80a2b3e:	bd10      	pop	{r4, pc}

080a2b40 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a2b40:	b510      	push	{r4, lr}
 80a2b42:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
 80a2b44:	f7ff fff3 	bl	80a2b2e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a2b48:	4620      	mov	r0, r4
 80a2b4a:	bd10      	pop	{r4, pc}

080a2b4c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a2b4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a2b50:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a2b52:	4c08      	ldr	r4, [pc, #32]	; (80a2b74 <_GLOBAL__sub_I_System+0x28>)
 80a2b54:	2000      	movs	r0, #0
 80a2b56:	6020      	str	r0, [r4, #0]
 80a2b58:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a2b5a:	71a0      	strb	r0, [r4, #6]
 80a2b5c:	8120      	strh	r0, [r4, #8]
 80a2b5e:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a2b60:	f7ff feee 	bl	80a2940 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a2b64:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a2b66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a2b6a:	4a03      	ldr	r2, [pc, #12]	; (80a2b78 <_GLOBAL__sub_I_System+0x2c>)
 80a2b6c:	4903      	ldr	r1, [pc, #12]	; (80a2b7c <_GLOBAL__sub_I_System+0x30>)
 80a2b6e:	f000 bca5 	b.w	80a34bc <__aeabi_atexit>
 80a2b72:	bf00      	nop
 80a2b74:	20000100 	.word	0x20000100
 80a2b78:	20000074 	.word	0x20000074
 80a2b7c:	080a2b41 	.word	0x080a2b41

080a2b80 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a2b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2b82:	4606      	mov	r6, r0
 80a2b84:	460d      	mov	r5, r1
 80a2b86:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a2b88:	2400      	movs	r4, #0
  while (size--) {
 80a2b8a:	42bd      	cmp	r5, r7
 80a2b8c:	d00c      	beq.n	80a2ba8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a2b8e:	6833      	ldr	r3, [r6, #0]
 80a2b90:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a2b94:	689b      	ldr	r3, [r3, #8]
 80a2b96:	4630      	mov	r0, r6
 80a2b98:	4798      	blx	r3
     if (chunk>=0)
 80a2b9a:	2800      	cmp	r0, #0
 80a2b9c:	db01      	blt.n	80a2ba2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a2b9e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a2ba0:	e7f3      	b.n	80a2b8a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a2ba2:	2c00      	cmp	r4, #0
 80a2ba4:	bf08      	it	eq
 80a2ba6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a2ba8:	4620      	mov	r0, r4
 80a2baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2bac <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a2bac:	b570      	push	{r4, r5, r6, lr}
 80a2bae:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a2bb0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a2bb2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a2bb4:	b149      	cbz	r1, 80a2bca <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a2bb6:	f002 ff85 	bl	80a5ac4 <strlen>
 80a2bba:	682b      	ldr	r3, [r5, #0]
 80a2bbc:	4602      	mov	r2, r0
 80a2bbe:	4621      	mov	r1, r4
 80a2bc0:	4628      	mov	r0, r5
    }
 80a2bc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a2bc6:	68db      	ldr	r3, [r3, #12]
 80a2bc8:	4718      	bx	r3
    }
 80a2bca:	bd70      	pop	{r4, r5, r6, pc}

080a2bcc <_ZN5Print5printEPKc>:
 80a2bcc:	b508      	push	{r3, lr}
 80a2bce:	f7ff ffed 	bl	80a2bac <_ZN5Print5writeEPKc>
 80a2bd2:	bd08      	pop	{r3, pc}

080a2bd4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a2bd4:	6803      	ldr	r3, [r0, #0]
 80a2bd6:	689b      	ldr	r3, [r3, #8]
 80a2bd8:	4718      	bx	r3

080a2bda <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a2bda:	2a01      	cmp	r2, #1
 80a2bdc:	bf98      	it	ls
 80a2bde:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a2be0:	b530      	push	{r4, r5, lr}
 80a2be2:	460b      	mov	r3, r1
 80a2be4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a2be6:	2100      	movs	r1, #0
 80a2be8:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a2bec:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 80a2bf0:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 80a2bf4:	fb05 3312 	mls	r3, r5, r2, r3
 80a2bf8:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a2bfa:	2b09      	cmp	r3, #9
 80a2bfc:	bf94      	ite	ls
 80a2bfe:	3330      	addls	r3, #48	; 0x30
 80a2c00:	3337      	addhi	r3, #55	; 0x37
 80a2c02:	b2db      	uxtb	r3, r3
 80a2c04:	4621      	mov	r1, r4
 80a2c06:	f804 3901 	strb.w	r3, [r4], #-1
 80a2c0a:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a2c0c:	2d00      	cmp	r5, #0
 80a2c0e:	d1ef      	bne.n	80a2bf0 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a2c10:	f7ff ffcc 	bl	80a2bac <_ZN5Print5writeEPKc>
}
 80a2c14:	b00b      	add	sp, #44	; 0x2c
 80a2c16:	bd30      	pop	{r4, r5, pc}

080a2c18 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a2c18:	2300      	movs	r3, #0
 80a2c1a:	461a      	mov	r2, r3
 80a2c1c:	4619      	mov	r1, r3
 80a2c1e:	6840      	ldr	r0, [r0, #4]
 80a2c20:	f7ff bed2 	b.w	80a29c8 <network_on>

080a2c24 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a2c24:	4a01      	ldr	r2, [pc, #4]	; (80a2c2c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a2c26:	4b02      	ldr	r3, [pc, #8]	; (80a2c30 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a2c28:	601a      	str	r2, [r3, #0]
 80a2c2a:	4770      	bx	lr
 80a2c2c:	080a5efe 	.word	0x080a5efe
 80a2c30:	2000010c 	.word	0x2000010c

080a2c34 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a2c34:	4b02      	ldr	r3, [pc, #8]	; (80a2c40 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a2c36:	681a      	ldr	r2, [r3, #0]
 80a2c38:	4b02      	ldr	r3, [pc, #8]	; (80a2c44 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a2c3a:	601a      	str	r2, [r3, #0]
 80a2c3c:	4770      	bx	lr
 80a2c3e:	bf00      	nop
 80a2c40:	20000008 	.word	0x20000008
 80a2c44:	20000110 	.word	0x20000110

080a2c48 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a2c48:	2100      	movs	r1, #0
 80a2c4a:	f7ff be81 	b.w	80a2950 <system_delay_ms>

080a2c4e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a2c4e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a2c50:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a2c52:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a2c54:	b113      	cbz	r3, 80a2c5c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a2c56:	2203      	movs	r2, #3
 80a2c58:	4601      	mov	r1, r0
 80a2c5a:	4798      	blx	r3
    }
 80a2c5c:	4620      	mov	r0, r4
 80a2c5e:	bd10      	pop	{r4, pc}

080a2c60 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a2c60:	b510      	push	{r4, lr}
 80a2c62:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2c64:	f7ff fff3 	bl	80a2c4e <_ZNSt14_Function_baseD1Ev>
 80a2c68:	4620      	mov	r0, r4
 80a2c6a:	bd10      	pop	{r4, pc}

080a2c6c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2c6c:	4803      	ldr	r0, [pc, #12]	; (80a2c7c <_GLOBAL__sub_I_RGB+0x10>)
 80a2c6e:	2300      	movs	r3, #0
 80a2c70:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a2c72:	4a03      	ldr	r2, [pc, #12]	; (80a2c80 <_GLOBAL__sub_I_RGB+0x14>)
 80a2c74:	4903      	ldr	r1, [pc, #12]	; (80a2c84 <_GLOBAL__sub_I_RGB+0x18>)
 80a2c76:	f000 bc21 	b.w	80a34bc <__aeabi_atexit>
 80a2c7a:	bf00      	nop
 80a2c7c:	20000114 	.word	0x20000114
 80a2c80:	20000074 	.word	0x20000074
 80a2c84:	080a2c61 	.word	0x080a2c61

080a2c88 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a2c88:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a2c8a:	4b14      	ldr	r3, [pc, #80]	; (80a2cdc <serialEventRun+0x54>)
 80a2c8c:	b133      	cbz	r3, 80a2c9c <serialEventRun+0x14>
 80a2c8e:	f000 f96b 	bl	80a2f68 <_Z16_fetch_usbserialv>
 80a2c92:	6803      	ldr	r3, [r0, #0]
 80a2c94:	691b      	ldr	r3, [r3, #16]
 80a2c96:	4798      	blx	r3
 80a2c98:	2800      	cmp	r0, #0
 80a2c9a:	dc16      	bgt.n	80a2cca <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a2c9c:	4b10      	ldr	r3, [pc, #64]	; (80a2ce0 <serialEventRun+0x58>)
 80a2c9e:	b133      	cbz	r3, 80a2cae <serialEventRun+0x26>
 80a2ca0:	f000 fa20 	bl	80a30e4 <_Z22__fetch_global_Serial1v>
 80a2ca4:	6803      	ldr	r3, [r0, #0]
 80a2ca6:	691b      	ldr	r3, [r3, #16]
 80a2ca8:	4798      	blx	r3
 80a2caa:	2800      	cmp	r0, #0
 80a2cac:	dc10      	bgt.n	80a2cd0 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a2cae:	4b0d      	ldr	r3, [pc, #52]	; (80a2ce4 <serialEventRun+0x5c>)
 80a2cb0:	b10b      	cbz	r3, 80a2cb6 <serialEventRun+0x2e>
 80a2cb2:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a2cb6:	4b0c      	ldr	r3, [pc, #48]	; (80a2ce8 <serialEventRun+0x60>)
 80a2cb8:	b17b      	cbz	r3, 80a2cda <serialEventRun+0x52>
 80a2cba:	f000 f991 	bl	80a2fe0 <_Z17_fetch_usbserial1v>
 80a2cbe:	6803      	ldr	r3, [r0, #0]
 80a2cc0:	691b      	ldr	r3, [r3, #16]
 80a2cc2:	4798      	blx	r3
 80a2cc4:	2800      	cmp	r0, #0
 80a2cc6:	dc06      	bgt.n	80a2cd6 <serialEventRun+0x4e>
 80a2cc8:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a2cca:	f3af 8000 	nop.w
 80a2cce:	e7e5      	b.n	80a2c9c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a2cd0:	f3af 8000 	nop.w
 80a2cd4:	e7eb      	b.n	80a2cae <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a2cd6:	f3af 8000 	nop.w
 80a2cda:	bd08      	pop	{r3, pc}
	...

080a2cec <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a2cec:	b508      	push	{r3, lr}
	serialEventRun();
 80a2cee:	f7ff ffcb 	bl	80a2c88 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a2cf2:	f7ff fd3b 	bl	80a276c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a2cf6:	4b01      	ldr	r3, [pc, #4]	; (80a2cfc <_post_loop+0x10>)
 80a2cf8:	6018      	str	r0, [r3, #0]
 80a2cfa:	bd08      	pop	{r3, pc}
 80a2cfc:	200005ac 	.word	0x200005ac

080a2d00 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2d00:	4802      	ldr	r0, [pc, #8]	; (80a2d0c <_Z33system_initialize_user_backup_ramv+0xc>)
 80a2d02:	4a03      	ldr	r2, [pc, #12]	; (80a2d10 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a2d04:	4903      	ldr	r1, [pc, #12]	; (80a2d14 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a2d06:	1a12      	subs	r2, r2, r0
 80a2d08:	f002 bea0 	b.w	80a5a4c <memcpy>
 80a2d0c:	40024000 	.word	0x40024000
 80a2d10:	40024004 	.word	0x40024004
 80a2d14:	080a6330 	.word	0x080a6330

080a2d18 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a2d18:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2d1a:	2300      	movs	r3, #0
 80a2d1c:	9300      	str	r3, [sp, #0]
 80a2d1e:	461a      	mov	r2, r3
 80a2d20:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2d24:	f7ff fe26 	bl	80a2974 <system_ctrl_set_result>
}
 80a2d28:	b003      	add	sp, #12
 80a2d2a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2d30 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a2d30:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a2d32:	8843      	ldrh	r3, [r0, #2]
 80a2d34:	2b0a      	cmp	r3, #10
 80a2d36:	d008      	beq.n	80a2d4a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a2d38:	2b50      	cmp	r3, #80	; 0x50
 80a2d3a:	d109      	bne.n	80a2d50 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a2d3c:	4b09      	ldr	r3, [pc, #36]	; (80a2d64 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a2d3e:	681b      	ldr	r3, [r3, #0]
 80a2d40:	b13b      	cbz	r3, 80a2d52 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a2d42:	b003      	add	sp, #12
 80a2d44:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a2d48:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a2d4a:	f7ff ffe5 	bl	80a2d18 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a2d4e:	e006      	b.n	80a2d5e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2d50:	2300      	movs	r3, #0
 80a2d52:	9300      	str	r3, [sp, #0]
 80a2d54:	461a      	mov	r2, r3
 80a2d56:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2d5a:	f7ff fe0b 	bl	80a2974 <system_ctrl_set_result>
        break;
    }
}
 80a2d5e:	b003      	add	sp, #12
 80a2d60:	f85d fb04 	ldr.w	pc, [sp], #4
 80a2d64:	20000124 	.word	0x20000124

080a2d68 <module_user_init_hook>:

void module_user_init_hook()
{
 80a2d68:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a2d6a:	4c10      	ldr	r4, [pc, #64]	; (80a2dac <module_user_init_hook+0x44>)
 80a2d6c:	4d10      	ldr	r5, [pc, #64]	; (80a2db0 <module_user_init_hook+0x48>)
 80a2d6e:	6823      	ldr	r3, [r4, #0]
 80a2d70:	42ab      	cmp	r3, r5
 80a2d72:	4b10      	ldr	r3, [pc, #64]	; (80a2db4 <module_user_init_hook+0x4c>)
 80a2d74:	bf0c      	ite	eq
 80a2d76:	2201      	moveq	r2, #1
 80a2d78:	2200      	movne	r2, #0
 80a2d7a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a2d7c:	d002      	beq.n	80a2d84 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a2d7e:	f7ff ffbf 	bl	80a2d00 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a2d82:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a2d84:	f7ff fce2 	bl	80a274c <HAL_RNG_GetRandomNumber>
 80a2d88:	4604      	mov	r4, r0
    srand(seed);
 80a2d8a:	f002 fe73 	bl	80a5a74 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a2d8e:	4b0a      	ldr	r3, [pc, #40]	; (80a2db8 <module_user_init_hook+0x50>)
 80a2d90:	b113      	cbz	r3, 80a2d98 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a2d92:	4620      	mov	r0, r4
 80a2d94:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a2d98:	2100      	movs	r1, #0
 80a2d9a:	4807      	ldr	r0, [pc, #28]	; (80a2db8 <module_user_init_hook+0x50>)
 80a2d9c:	f7ff fe44 	bl	80a2a28 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a2da0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a2da4:	2100      	movs	r1, #0
 80a2da6:	4805      	ldr	r0, [pc, #20]	; (80a2dbc <module_user_init_hook+0x54>)
 80a2da8:	f7ff bdda 	b.w	80a2960 <system_ctrl_set_app_request_handler>
 80a2dac:	40024000 	.word	0x40024000
 80a2db0:	9a271c1e 	.word	0x9a271c1e
 80a2db4:	20000128 	.word	0x20000128
 80a2db8:	00000000 	.word	0x00000000
 80a2dbc:	080a2d31 	.word	0x080a2d31

080a2dc0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a2dc0:	4770      	bx	lr

080a2dc2 <_ZN9IPAddressD0Ev>:
 80a2dc2:	b510      	push	{r4, lr}
 80a2dc4:	4604      	mov	r4, r0
 80a2dc6:	2118      	movs	r1, #24
 80a2dc8:	f000 fb86 	bl	80a34d8 <_ZdlPvj>
 80a2dcc:	4620      	mov	r0, r4
 80a2dce:	bd10      	pop	{r4, pc}

080a2dd0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a2dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2dd2:	460f      	mov	r7, r1
 80a2dd4:	f100 0608 	add.w	r6, r0, #8
 80a2dd8:	1d05      	adds	r5, r0, #4
 80a2dda:	2400      	movs	r4, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a2ddc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a2de0:	220a      	movs	r2, #10
 80a2de2:	4638      	mov	r0, r7
 80a2de4:	f7ff fef9 	bl	80a2bda <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a2de8:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a2dea:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a2dec:	d007      	beq.n	80a2dfe <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a2dee:	2c00      	cmp	r4, #0
 80a2df0:	d0f4      	beq.n	80a2ddc <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a2df2:	212e      	movs	r1, #46	; 0x2e
 80a2df4:	4638      	mov	r0, r7
 80a2df6:	f7ff feed 	bl	80a2bd4 <_ZN5Print5printEc>
 80a2dfa:	4404      	add	r4, r0
 80a2dfc:	e7ee      	b.n	80a2ddc <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a2dfe:	4620      	mov	r0, r4
 80a2e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a2e04 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a2e04:	b510      	push	{r4, lr}
 80a2e06:	4604      	mov	r4, r0
 80a2e08:	4b04      	ldr	r3, [pc, #16]	; (80a2e1c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a2e0a:	2211      	movs	r2, #17
 80a2e0c:	f840 3b04 	str.w	r3, [r0], #4
 80a2e10:	2100      	movs	r1, #0
 80a2e12:	f002 fe26 	bl	80a5a62 <memset>
{
    clear();
}
 80a2e16:	4620      	mov	r0, r4
 80a2e18:	bd10      	pop	{r4, pc}
 80a2e1a:	bf00      	nop
 80a2e1c:	080a5fa0 	.word	0x080a5fa0

080a2e20 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a2e20:	4603      	mov	r3, r0
 80a2e22:	4a07      	ldr	r2, [pc, #28]	; (80a2e40 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a2e24:	b510      	push	{r4, lr}
 80a2e26:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a2e2a:	f101 0210 	add.w	r2, r1, #16
 80a2e2e:	f851 4b04 	ldr.w	r4, [r1], #4
 80a2e32:	4291      	cmp	r1, r2
 80a2e34:	f843 4b04 	str.w	r4, [r3], #4
 80a2e38:	d1f9      	bne.n	80a2e2e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a2e3a:	780a      	ldrb	r2, [r1, #0]
 80a2e3c:	701a      	strb	r2, [r3, #0]
}
 80a2e3e:	bd10      	pop	{r4, pc}
 80a2e40:	080a5fa0 	.word	0x080a5fa0

080a2e44 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a2e44:	4a02      	ldr	r2, [pc, #8]	; (80a2e50 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a2e46:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a2e48:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a2e4a:	2204      	movs	r2, #4
 80a2e4c:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a2e4e:	4770      	bx	lr
 80a2e50:	080a5fa0 	.word	0x080a5fa0

080a2e54 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a2e54:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a2e56:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a2e5a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a2e5e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a2e62:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a2e66:	2304      	movs	r3, #4
 80a2e68:	6041      	str	r1, [r0, #4]
 80a2e6a:	7503      	strb	r3, [r0, #20]
 80a2e6c:	bd10      	pop	{r4, pc}
	...

080a2e70 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a2e70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a2e72:	4d04      	ldr	r5, [pc, #16]	; (80a2e84 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a2e74:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a2e76:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a2e7a:	9500      	str	r5, [sp, #0]
 80a2e7c:	f7ff ffea 	bl	80a2e54 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a2e80:	b003      	add	sp, #12
 80a2e82:	bd30      	pop	{r4, r5, pc}
 80a2e84:	080a5fa0 	.word	0x080a5fa0

080a2e88 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2e88:	7441      	strb	r1, [r0, #17]
 80a2e8a:	4770      	bx	lr

080a2e8c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a2e8c:	4770      	bx	lr

080a2e8e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a2e8e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a2e90:	2100      	movs	r1, #0
 80a2e92:	7c00      	ldrb	r0, [r0, #16]
 80a2e94:	f7ff fd2c 	bl	80a28f0 <HAL_USB_USART_Receive_Data>
}
 80a2e98:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2e9c:	bf28      	it	cs
 80a2e9e:	f04f 30ff 	movcs.w	r0, #4294967295
 80a2ea2:	bd08      	pop	{r3, pc}

080a2ea4 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a2ea4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a2ea6:	2101      	movs	r1, #1
 80a2ea8:	7c00      	ldrb	r0, [r0, #16]
 80a2eaa:	f7ff fd21 	bl	80a28f0 <HAL_USB_USART_Receive_Data>
}
 80a2eae:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2eb2:	bf28      	it	cs
 80a2eb4:	f04f 30ff 	movcs.w	r0, #4294967295
 80a2eb8:	bd08      	pop	{r3, pc}

080a2eba <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a2eba:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a2ebc:	7c00      	ldrb	r0, [r0, #16]
 80a2ebe:	f7ff fd0f 	bl	80a28e0 <HAL_USB_USART_Available_Data_For_Write>
}
 80a2ec2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2ec6:	bd08      	pop	{r3, pc}

080a2ec8 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a2ec8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a2eca:	7c00      	ldrb	r0, [r0, #16]
 80a2ecc:	f7ff fd00 	bl	80a28d0 <HAL_USB_USART_Available_Data>
}
 80a2ed0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2ed4:	bd08      	pop	{r3, pc}

080a2ed6 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a2ed6:	7c00      	ldrb	r0, [r0, #16]
 80a2ed8:	f7ff bd1a 	b.w	80a2910 <HAL_USB_USART_Flush_Data>

080a2edc <_ZN9USBSerialD0Ev>:
 80a2edc:	b510      	push	{r4, lr}
 80a2ede:	4604      	mov	r4, r0
 80a2ee0:	2114      	movs	r1, #20
 80a2ee2:	f000 faf9 	bl	80a34d8 <_ZdlPvj>
 80a2ee6:	4620      	mov	r0, r4
 80a2ee8:	bd10      	pop	{r4, pc}

080a2eea <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a2eea:	b538      	push	{r3, r4, r5, lr}
 80a2eec:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2eee:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a2ef0:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2ef2:	f7ff fcf5 	bl	80a28e0 <HAL_USB_USART_Available_Data_For_Write>
 80a2ef6:	2800      	cmp	r0, #0
 80a2ef8:	dc01      	bgt.n	80a2efe <_ZN9USBSerial5writeEh+0x14>
 80a2efa:	7c60      	ldrb	r0, [r4, #17]
 80a2efc:	b128      	cbz	r0, 80a2f0a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a2efe:	4629      	mov	r1, r5
 80a2f00:	7c20      	ldrb	r0, [r4, #16]
 80a2f02:	f7ff fcfd 	bl	80a2900 <HAL_USB_USART_Send_Data>
 80a2f06:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a2f0a:	bd38      	pop	{r3, r4, r5, pc}

080a2f0c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2f0c:	b510      	push	{r4, lr}
 80a2f0e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a2f10:	2300      	movs	r3, #0
 80a2f12:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a2f14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2f18:	60a3      	str	r3, [r4, #8]
 80a2f1a:	4b05      	ldr	r3, [pc, #20]	; (80a2f30 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a2f1c:	4608      	mov	r0, r1
 80a2f1e:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a2f20:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a2f22:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a2f24:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a2f26:	4611      	mov	r1, r2
 80a2f28:	f7ff fcc2 	bl	80a28b0 <HAL_USB_USART_Init>
}
 80a2f2c:	4620      	mov	r0, r4
 80a2f2e:	bd10      	pop	{r4, pc}
 80a2f30:	080a5fb4 	.word	0x080a5fb4

080a2f34 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a2f34:	2200      	movs	r2, #0
 80a2f36:	7c00      	ldrb	r0, [r0, #16]
 80a2f38:	f7ff bcc2 	b.w	80a28c0 <HAL_USB_USART_Begin>

080a2f3c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a2f3c:	b510      	push	{r4, lr}
 80a2f3e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2f40:	2214      	movs	r2, #20
 80a2f42:	2100      	movs	r1, #0
 80a2f44:	f002 fd8d 	bl	80a5a62 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2f48:	4b05      	ldr	r3, [pc, #20]	; (80a2f60 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2f4a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2f4c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a2f4e:	4b05      	ldr	r3, [pc, #20]	; (80a2f64 <_Z19acquireSerialBufferv+0x28>)
 80a2f50:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2f52:	f240 1301 	movw	r3, #257	; 0x101
 80a2f56:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2f58:	2381      	movs	r3, #129	; 0x81
 80a2f5a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2f5c:	bd10      	pop	{r4, pc}
 80a2f5e:	bf00      	nop
 80a2f60:	200001b1 	.word	0x200001b1
 80a2f64:	20000130 	.word	0x20000130

080a2f68 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a2f68:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2f6a:	4d0e      	ldr	r5, [pc, #56]	; (80a2fa4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a2f6c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a2f6e:	a801      	add	r0, sp, #4
 80a2f70:	f7ff ffe4 	bl	80a2f3c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2f74:	6829      	ldr	r1, [r5, #0]
 80a2f76:	f011 0401 	ands.w	r4, r1, #1
 80a2f7a:	d110      	bne.n	80a2f9e <_Z16_fetch_usbserialv+0x36>
 80a2f7c:	4628      	mov	r0, r5
 80a2f7e:	f7fd f89b 	bl	80a00b8 <__cxa_guard_acquire>
 80a2f82:	b160      	cbz	r0, 80a2f9e <_Z16_fetch_usbserialv+0x36>
 80a2f84:	aa01      	add	r2, sp, #4
 80a2f86:	4621      	mov	r1, r4
 80a2f88:	4807      	ldr	r0, [pc, #28]	; (80a2fa8 <_Z16_fetch_usbserialv+0x40>)
 80a2f8a:	f7ff ffbf 	bl	80a2f0c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2f8e:	4628      	mov	r0, r5
 80a2f90:	f7fd f897 	bl	80a00c2 <__cxa_guard_release>
 80a2f94:	4a05      	ldr	r2, [pc, #20]	; (80a2fac <_Z16_fetch_usbserialv+0x44>)
 80a2f96:	4906      	ldr	r1, [pc, #24]	; (80a2fb0 <_Z16_fetch_usbserialv+0x48>)
 80a2f98:	4803      	ldr	r0, [pc, #12]	; (80a2fa8 <_Z16_fetch_usbserialv+0x40>)
 80a2f9a:	f000 fa8f 	bl	80a34bc <__aeabi_atexit>
	return _usbserial;
}
 80a2f9e:	4802      	ldr	r0, [pc, #8]	; (80a2fa8 <_Z16_fetch_usbserialv+0x40>)
 80a2fa0:	b007      	add	sp, #28
 80a2fa2:	bd30      	pop	{r4, r5, pc}
 80a2fa4:	2000012c 	.word	0x2000012c
 80a2fa8:	200002b4 	.word	0x200002b4
 80a2fac:	20000074 	.word	0x20000074
 80a2fb0:	080a2e8d 	.word	0x080a2e8d

080a2fb4 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a2fb4:	b510      	push	{r4, lr}
 80a2fb6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2fb8:	2214      	movs	r2, #20
 80a2fba:	2100      	movs	r1, #0
 80a2fbc:	f002 fd51 	bl	80a5a62 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2fc0:	4b05      	ldr	r3, [pc, #20]	; (80a2fd8 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2fc2:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2fc4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a2fc6:	4b05      	ldr	r3, [pc, #20]	; (80a2fdc <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a2fc8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2fca:	f240 1301 	movw	r3, #257	; 0x101
 80a2fce:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2fd0:	2381      	movs	r3, #129	; 0x81
 80a2fd2:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2fd4:	bd10      	pop	{r4, pc}
 80a2fd6:	bf00      	nop
 80a2fd8:	20000364 	.word	0x20000364
 80a2fdc:	200002cc 	.word	0x200002cc

080a2fe0 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a2fe0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2fe2:	4c0e      	ldr	r4, [pc, #56]	; (80a301c <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a2fe4:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a2fe6:	a801      	add	r0, sp, #4
 80a2fe8:	f7ff ffe4 	bl	80a2fb4 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2fec:	6823      	ldr	r3, [r4, #0]
 80a2fee:	07db      	lsls	r3, r3, #31
 80a2ff0:	d410      	bmi.n	80a3014 <_Z17_fetch_usbserial1v+0x34>
 80a2ff2:	4620      	mov	r0, r4
 80a2ff4:	f7fd f860 	bl	80a00b8 <__cxa_guard_acquire>
 80a2ff8:	b160      	cbz	r0, 80a3014 <_Z17_fetch_usbserial1v+0x34>
 80a2ffa:	aa01      	add	r2, sp, #4
 80a2ffc:	2101      	movs	r1, #1
 80a2ffe:	4808      	ldr	r0, [pc, #32]	; (80a3020 <_Z17_fetch_usbserial1v+0x40>)
 80a3000:	f7ff ff84 	bl	80a2f0c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a3004:	4620      	mov	r0, r4
 80a3006:	f7fd f85c 	bl	80a00c2 <__cxa_guard_release>
 80a300a:	4a06      	ldr	r2, [pc, #24]	; (80a3024 <_Z17_fetch_usbserial1v+0x44>)
 80a300c:	4906      	ldr	r1, [pc, #24]	; (80a3028 <_Z17_fetch_usbserial1v+0x48>)
 80a300e:	4804      	ldr	r0, [pc, #16]	; (80a3020 <_Z17_fetch_usbserial1v+0x40>)
 80a3010:	f000 fa54 	bl	80a34bc <__aeabi_atexit>
  return _usbserial1;
}
 80a3014:	4802      	ldr	r0, [pc, #8]	; (80a3020 <_Z17_fetch_usbserial1v+0x40>)
 80a3016:	b006      	add	sp, #24
 80a3018:	bd10      	pop	{r4, pc}
 80a301a:	bf00      	nop
 80a301c:	200002c8 	.word	0x200002c8
 80a3020:	20000350 	.word	0x20000350
 80a3024:	20000074 	.word	0x20000074
 80a3028:	080a2e8d 	.word	0x080a2e8d

080a302c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a302c:	4770      	bx	lr

080a302e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a302e:	7441      	strb	r1, [r0, #17]
 80a3030:	4770      	bx	lr

080a3032 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a3032:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a3034:	7c00      	ldrb	r0, [r0, #16]
 80a3036:	f7ff fbf9 	bl	80a282c <HAL_USART_Available_Data_For_Write>
}
 80a303a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a303e:	bd08      	pop	{r3, pc}

080a3040 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a3040:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a3042:	7c00      	ldrb	r0, [r0, #16]
 80a3044:	f7ff fbca 	bl	80a27dc <HAL_USART_Available_Data>
}
 80a3048:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a304c:	bd08      	pop	{r3, pc}

080a304e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a304e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a3050:	7c00      	ldrb	r0, [r0, #16]
 80a3052:	f7ff fbd3 	bl	80a27fc <HAL_USART_Peek_Data>
}
 80a3056:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a305a:	bf28      	it	cs
 80a305c:	f04f 30ff 	movcs.w	r0, #4294967295
 80a3060:	bd08      	pop	{r3, pc}

080a3062 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a3062:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a3064:	7c00      	ldrb	r0, [r0, #16]
 80a3066:	f7ff fbc1 	bl	80a27ec <HAL_USART_Read_Data>
}
 80a306a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a306e:	bf28      	it	cs
 80a3070:	f04f 30ff 	movcs.w	r0, #4294967295
 80a3074:	bd08      	pop	{r3, pc}

080a3076 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a3076:	7c00      	ldrb	r0, [r0, #16]
 80a3078:	f7ff bbc8 	b.w	80a280c <HAL_USART_Flush_Data>

080a307c <_ZN11USARTSerialD0Ev>:
 80a307c:	b510      	push	{r4, lr}
 80a307e:	4604      	mov	r4, r0
 80a3080:	2114      	movs	r1, #20
 80a3082:	f000 fa29 	bl	80a34d8 <_ZdlPvj>
 80a3086:	4620      	mov	r0, r4
 80a3088:	bd10      	pop	{r4, pc}

080a308a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a308a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a308c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a308e:	4604      	mov	r4, r0
 80a3090:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a3092:	b925      	cbnz	r5, 80a309e <_ZN11USARTSerial5writeEh+0x14>
 80a3094:	7c00      	ldrb	r0, [r0, #16]
 80a3096:	f7ff fbc9 	bl	80a282c <HAL_USART_Available_Data_For_Write>
 80a309a:	2800      	cmp	r0, #0
 80a309c:	dd05      	ble.n	80a30aa <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a309e:	4631      	mov	r1, r6
 80a30a0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a30a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a30a6:	f7ff bb91 	b.w	80a27cc <HAL_USART_Write_Data>
  }
  return 0;
}
 80a30aa:	4628      	mov	r0, r5
 80a30ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080a30b0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a30b0:	b510      	push	{r4, lr}
 80a30b2:	4604      	mov	r4, r0
 80a30b4:	4608      	mov	r0, r1
 80a30b6:	4611      	mov	r1, r2
 80a30b8:	2200      	movs	r2, #0
 80a30ba:	6062      	str	r2, [r4, #4]
 80a30bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a30c0:	60a2      	str	r2, [r4, #8]
 80a30c2:	4a05      	ldr	r2, [pc, #20]	; (80a30d8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a30c4:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a30c6:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a30c8:	2201      	movs	r2, #1
 80a30ca:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a30cc:	461a      	mov	r2, r3
 80a30ce:	f7ff fb75 	bl	80a27bc <HAL_USART_Init>
}
 80a30d2:	4620      	mov	r0, r4
 80a30d4:	bd10      	pop	{r4, pc}
 80a30d6:	bf00      	nop
 80a30d8:	080a5fe4 	.word	0x080a5fe4

080a30dc <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a30dc:	7c00      	ldrb	r0, [r0, #16]
 80a30de:	f7ff bb9d 	b.w	80a281c <HAL_USART_Is_Enabled>
	...

080a30e4 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a30e4:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a30e6:	4d0c      	ldr	r5, [pc, #48]	; (80a3118 <_Z22__fetch_global_Serial1v+0x34>)
 80a30e8:	6829      	ldr	r1, [r5, #0]
 80a30ea:	f011 0401 	ands.w	r4, r1, #1
 80a30ee:	d111      	bne.n	80a3114 <_Z22__fetch_global_Serial1v+0x30>
 80a30f0:	4628      	mov	r0, r5
 80a30f2:	f7fc ffe1 	bl	80a00b8 <__cxa_guard_acquire>
 80a30f6:	b168      	cbz	r0, 80a3114 <_Z22__fetch_global_Serial1v+0x30>
 80a30f8:	4a08      	ldr	r2, [pc, #32]	; (80a311c <_Z22__fetch_global_Serial1v+0x38>)
 80a30fa:	4621      	mov	r1, r4
 80a30fc:	4b08      	ldr	r3, [pc, #32]	; (80a3120 <_Z22__fetch_global_Serial1v+0x3c>)
 80a30fe:	4809      	ldr	r0, [pc, #36]	; (80a3124 <_Z22__fetch_global_Serial1v+0x40>)
 80a3100:	f7ff ffd6 	bl	80a30b0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a3104:	4628      	mov	r0, r5
 80a3106:	f7fc ffdc 	bl	80a00c2 <__cxa_guard_release>
 80a310a:	4a07      	ldr	r2, [pc, #28]	; (80a3128 <_Z22__fetch_global_Serial1v+0x44>)
 80a310c:	4907      	ldr	r1, [pc, #28]	; (80a312c <_Z22__fetch_global_Serial1v+0x48>)
 80a310e:	4805      	ldr	r0, [pc, #20]	; (80a3124 <_Z22__fetch_global_Serial1v+0x40>)
 80a3110:	f000 f9d4 	bl	80a34bc <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a3114:	4803      	ldr	r0, [pc, #12]	; (80a3124 <_Z22__fetch_global_Serial1v+0x40>)
 80a3116:	bd38      	pop	{r3, r4, r5, pc}
 80a3118:	20000500 	.word	0x20000500
 80a311c:	20000504 	.word	0x20000504
 80a3120:	2000047c 	.word	0x2000047c
 80a3124:	20000468 	.word	0x20000468
 80a3128:	20000074 	.word	0x20000074
 80a312c:	080a302d 	.word	0x080a302d

080a3130 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
 80a3130:	4770      	bx	lr

080a3132 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a3132:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3134:	4606      	mov	r6, r0
 80a3136:	4615      	mov	r5, r2
 80a3138:	460c      	mov	r4, r1
 80a313a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a313c:	42bc      	cmp	r4, r7
 80a313e:	d006      	beq.n	80a314e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a3140:	6833      	ldr	r3, [r6, #0]
 80a3142:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a3146:	689b      	ldr	r3, [r3, #8]
 80a3148:	4630      	mov	r0, r6
 80a314a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a314c:	e7f6      	b.n	80a313c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a314e:	4628      	mov	r0, r5
 80a3150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a3152 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a3152:	2200      	movs	r2, #0
 80a3154:	7c00      	ldrb	r0, [r0, #16]
 80a3156:	f7ff bb71 	b.w	80a283c <HAL_I2C_Write_Data>

080a315a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a315a:	2100      	movs	r1, #0
 80a315c:	7c00      	ldrb	r0, [r0, #16]
 80a315e:	f7ff bb75 	b.w	80a284c <HAL_I2C_Available_Data>

080a3162 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a3162:	2100      	movs	r1, #0
 80a3164:	7c00      	ldrb	r0, [r0, #16]
 80a3166:	f7ff bb79 	b.w	80a285c <HAL_I2C_Read_Data>

080a316a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a316a:	2100      	movs	r1, #0
 80a316c:	7c00      	ldrb	r0, [r0, #16]
 80a316e:	f7ff bb7d 	b.w	80a286c <HAL_I2C_Peek_Data>

080a3172 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a3172:	2100      	movs	r1, #0
 80a3174:	7c00      	ldrb	r0, [r0, #16]
 80a3176:	f7ff bb81 	b.w	80a287c <HAL_I2C_Flush_Data>

080a317a <_ZN7TwoWireD0Ev>:
 80a317a:	b510      	push	{r4, lr}
 80a317c:	4604      	mov	r4, r0
 80a317e:	2114      	movs	r1, #20
 80a3180:	f000 f9aa 	bl	80a34d8 <_ZdlPvj>
 80a3184:	4620      	mov	r0, r4
 80a3186:	bd10      	pop	{r4, pc}

080a3188 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a3188:	b510      	push	{r4, lr}
 80a318a:	4604      	mov	r4, r0
 80a318c:	2300      	movs	r3, #0
 80a318e:	6063      	str	r3, [r4, #4]
 80a3190:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a3194:	60a3      	str	r3, [r4, #8]
 80a3196:	4b04      	ldr	r3, [pc, #16]	; (80a31a8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
 80a3198:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a319a:	4608      	mov	r0, r1
 80a319c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
 80a319e:	4611      	mov	r1, r2
 80a31a0:	f7ff fb7c 	bl	80a289c <HAL_I2C_Init>
}
 80a31a4:	4620      	mov	r0, r4
 80a31a6:	bd10      	pop	{r4, pc}
 80a31a8:	080a6014 	.word	0x080a6014

080a31ac <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a31ac:	2100      	movs	r1, #0
 80a31ae:	7c00      	ldrb	r0, [r0, #16]
 80a31b0:	f7ff bb6c 	b.w	80a288c <HAL_I2C_Is_Enabled>

080a31b4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a31b4:	2200      	movs	r2, #0
 80a31b6:	4611      	mov	r1, r2
 80a31b8:	6840      	ldr	r0, [r0, #4]
 80a31ba:	f7ff bbfd 	b.w	80a29b8 <network_ready>

080a31be <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a31be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a31c0:	4616      	mov	r6, r2
 80a31c2:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a31c4:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a31c6:	460f      	mov	r7, r1
 80a31c8:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a31ca:	2100      	movs	r1, #0
 80a31cc:	a803      	add	r0, sp, #12
 80a31ce:	f002 fc48 	bl	80a5a62 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a31d2:	4630      	mov	r0, r6
 80a31d4:	f002 fc76 	bl	80a5ac4 <strlen>
 80a31d8:	2500      	movs	r5, #0
 80a31da:	9500      	str	r5, [sp, #0]
 80a31dc:	b281      	uxth	r1, r0
 80a31de:	687b      	ldr	r3, [r7, #4]
 80a31e0:	aa03      	add	r2, sp, #12
 80a31e2:	4630      	mov	r0, r6
 80a31e4:	f7ff fb9c 	bl	80a2920 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a31e8:	b120      	cbz	r0, 80a31f4 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a31ea:	4629      	mov	r1, r5
 80a31ec:	4620      	mov	r0, r4
 80a31ee:	f7ff fe29 	bl	80a2e44 <_ZN9IPAddressC1Em>
 80a31f2:	e003      	b.n	80a31fc <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a31f4:	a903      	add	r1, sp, #12
 80a31f6:	4620      	mov	r0, r4
 80a31f8:	f7ff fe12 	bl	80a2e20 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a31fc:	4620      	mov	r0, r4
 80a31fe:	b009      	add	sp, #36	; 0x24
 80a3200:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a3202 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a3202:	2200      	movs	r2, #0
 80a3204:	4611      	mov	r1, r2
 80a3206:	6840      	ldr	r0, [r0, #4]
 80a3208:	f7ff bbf6 	b.w	80a29f8 <network_listening>

080a320c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a320c:	2200      	movs	r2, #0
 80a320e:	4611      	mov	r1, r2
 80a3210:	6840      	ldr	r0, [r0, #4]
 80a3212:	f7ff bc01 	b.w	80a2a18 <network_get_listen_timeout>

080a3216 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a3216:	2200      	movs	r2, #0
 80a3218:	6840      	ldr	r0, [r0, #4]
 80a321a:	f7ff bbf5 	b.w	80a2a08 <network_set_listen_timeout>

080a321e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a321e:	2200      	movs	r2, #0
 80a3220:	f081 0101 	eor.w	r1, r1, #1
 80a3224:	6840      	ldr	r0, [r0, #4]
 80a3226:	f7ff bbdf 	b.w	80a29e8 <network_listen>

080a322a <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a322a:	2300      	movs	r3, #0
 80a322c:	461a      	mov	r2, r3
 80a322e:	4619      	mov	r1, r3
 80a3230:	6840      	ldr	r0, [r0, #4]
 80a3232:	f7ff bbd1 	b.w	80a29d8 <network_off>

080a3236 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a3236:	2200      	movs	r2, #0
 80a3238:	4611      	mov	r1, r2
 80a323a:	6840      	ldr	r0, [r0, #4]
 80a323c:	f7ff bbac 	b.w	80a2998 <network_connecting>

080a3240 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a3240:	2200      	movs	r2, #0
 80a3242:	2102      	movs	r1, #2
 80a3244:	6840      	ldr	r0, [r0, #4]
 80a3246:	f7ff bbaf 	b.w	80a29a8 <network_disconnect>

080a324a <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a324a:	2300      	movs	r3, #0
 80a324c:	461a      	mov	r2, r3
 80a324e:	6840      	ldr	r0, [r0, #4]
 80a3250:	f7ff bb9a 	b.w	80a2988 <network_connect>

080a3254 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a3254:	4b02      	ldr	r3, [pc, #8]	; (80a3260 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a3256:	2204      	movs	r2, #4
 80a3258:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a325a:	4a02      	ldr	r2, [pc, #8]	; (80a3264 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a325c:	601a      	str	r2, [r3, #0]
 80a325e:	4770      	bx	lr
 80a3260:	20000588 	.word	0x20000588
 80a3264:	080a603c 	.word	0x080a603c

080a3268 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a3268:	2300      	movs	r3, #0
 80a326a:	461a      	mov	r2, r3
 80a326c:	6840      	ldr	r0, [r0, #4]
 80a326e:	f7ff bb8b 	b.w	80a2988 <network_connect>

080a3272 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a3272:	2200      	movs	r2, #0
 80a3274:	2102      	movs	r1, #2
 80a3276:	6840      	ldr	r0, [r0, #4]
 80a3278:	f7ff bb96 	b.w	80a29a8 <network_disconnect>

080a327c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a327c:	2200      	movs	r2, #0
 80a327e:	4611      	mov	r1, r2
 80a3280:	6840      	ldr	r0, [r0, #4]
 80a3282:	f7ff bb89 	b.w	80a2998 <network_connecting>

080a3286 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a3286:	2200      	movs	r2, #0
 80a3288:	4611      	mov	r1, r2
 80a328a:	6840      	ldr	r0, [r0, #4]
 80a328c:	f7ff bb94 	b.w	80a29b8 <network_ready>

080a3290 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a3290:	2300      	movs	r3, #0
 80a3292:	461a      	mov	r2, r3
 80a3294:	4619      	mov	r1, r3
 80a3296:	6840      	ldr	r0, [r0, #4]
 80a3298:	f7ff bb96 	b.w	80a29c8 <network_on>

080a329c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a329c:	2300      	movs	r3, #0
 80a329e:	461a      	mov	r2, r3
 80a32a0:	4619      	mov	r1, r3
 80a32a2:	6840      	ldr	r0, [r0, #4]
 80a32a4:	f7ff bb98 	b.w	80a29d8 <network_off>

080a32a8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a32a8:	2200      	movs	r2, #0
 80a32aa:	f081 0101 	eor.w	r1, r1, #1
 80a32ae:	6840      	ldr	r0, [r0, #4]
 80a32b0:	f7ff bb9a 	b.w	80a29e8 <network_listen>

080a32b4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a32b4:	2200      	movs	r2, #0
 80a32b6:	6840      	ldr	r0, [r0, #4]
 80a32b8:	f7ff bba6 	b.w	80a2a08 <network_set_listen_timeout>

080a32bc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a32bc:	2200      	movs	r2, #0
 80a32be:	4611      	mov	r1, r2
 80a32c0:	6840      	ldr	r0, [r0, #4]
 80a32c2:	f7ff bba9 	b.w	80a2a18 <network_get_listen_timeout>

080a32c6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a32c6:	2200      	movs	r2, #0
 80a32c8:	4611      	mov	r1, r2
 80a32ca:	6840      	ldr	r0, [r0, #4]
 80a32cc:	f7ff bb94 	b.w	80a29f8 <network_listening>

080a32d0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a32d0:	b570      	push	{r4, r5, r6, lr}
 80a32d2:	4616      	mov	r6, r2
 80a32d4:	b08e      	sub	sp, #56	; 0x38
 80a32d6:	4604      	mov	r4, r0
    IPAddress addr;
 80a32d8:	a808      	add	r0, sp, #32
 80a32da:	f7ff fd93 	bl	80a2e04 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a32de:	2211      	movs	r2, #17
 80a32e0:	2100      	movs	r1, #0
 80a32e2:	a803      	add	r0, sp, #12
 80a32e4:	f002 fbbd 	bl	80a5a62 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a32e8:	4630      	mov	r0, r6
 80a32ea:	f002 fbeb 	bl	80a5ac4 <strlen>
 80a32ee:	2500      	movs	r5, #0
 80a32f0:	4b0a      	ldr	r3, [pc, #40]	; (80a331c <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a32f2:	9500      	str	r5, [sp, #0]
 80a32f4:	b281      	uxth	r1, r0
 80a32f6:	685b      	ldr	r3, [r3, #4]
 80a32f8:	aa03      	add	r2, sp, #12
 80a32fa:	4630      	mov	r0, r6
 80a32fc:	f7ff fb10 	bl	80a2920 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a3300:	b120      	cbz	r0, 80a330c <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a3302:	4629      	mov	r1, r5
 80a3304:	4620      	mov	r0, r4
 80a3306:	f7ff fd9d 	bl	80a2e44 <_ZN9IPAddressC1Em>
 80a330a:	e003      	b.n	80a3314 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a330c:	a903      	add	r1, sp, #12
 80a330e:	4620      	mov	r0, r4
 80a3310:	f7ff fd86 	bl	80a2e20 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a3314:	4620      	mov	r0, r4
 80a3316:	b00e      	add	sp, #56	; 0x38
 80a3318:	bd70      	pop	{r4, r5, r6, pc}
 80a331a:	bf00      	nop
 80a331c:	20000588 	.word	0x20000588

080a3320 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a3320:	4b02      	ldr	r3, [pc, #8]	; (80a332c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a3322:	4a03      	ldr	r2, [pc, #12]	; (80a3330 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a3324:	601a      	str	r2, [r3, #0]
 80a3326:	2200      	movs	r2, #0
 80a3328:	605a      	str	r2, [r3, #4]
 80a332a:	4770      	bx	lr
 80a332c:	20000590 	.word	0x20000590
 80a3330:	080a6070 	.word	0x080a6070

080a3334 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a3334:	b510      	push	{r4, lr}
 80a3336:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a3338:	f000 f848 	bl	80a33cc <_ZN8particle7globals11instanceSpiEv>
 80a333c:	f7ff fbf4 	bl	80a2b28 <_ZN8SPIClass9isEnabledEv>
 80a3340:	b128      	cbz	r0, 80a334e <pinAvailable+0x1a>
 80a3342:	f1a4 030d 	sub.w	r3, r4, #13
 80a3346:	2b02      	cmp	r3, #2
 80a3348:	d801      	bhi.n	80a334e <pinAvailable+0x1a>
  {
    return 0; // 'pin' is used
 80a334a:	2000      	movs	r0, #0
 80a334c:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a334e:	f000 f88f 	bl	80a3470 <_Z19__fetch_global_Wirev>
 80a3352:	f7ff ff2b 	bl	80a31ac <_ZN7TwoWire9isEnabledEv>
 80a3356:	b108      	cbz	r0, 80a335c <pinAvailable+0x28>
 80a3358:	2c01      	cmp	r4, #1
 80a335a:	d9f6      	bls.n	80a334a <pinAvailable+0x16>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a335c:	f7ff fec2 	bl	80a30e4 <_Z22__fetch_global_Serial1v>
 80a3360:	f7ff febc 	bl	80a30dc <_ZN11USARTSerial9isEnabledEv>
 80a3364:	b118      	cbz	r0, 80a336e <pinAvailable+0x3a>
 80a3366:	f1a4 0312 	sub.w	r3, r4, #18
 80a336a:	2b01      	cmp	r3, #1
 80a336c:	d9ed      	bls.n	80a334a <pinAvailable+0x16>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a336e:	2c17      	cmp	r4, #23
 80a3370:	bf8c      	ite	hi
 80a3372:	2000      	movhi	r0, #0
 80a3374:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a3376:	bd10      	pop	{r4, pc}

080a3378 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a3378:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a337a:	b538      	push	{r3, r4, r5, lr}
 80a337c:	4604      	mov	r4, r0
 80a337e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a3380:	d80a      	bhi.n	80a3398 <pinMode+0x20>
 80a3382:	29ff      	cmp	r1, #255	; 0xff
 80a3384:	d008      	beq.n	80a3398 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a3386:	f7ff ffd5 	bl	80a3334 <pinAvailable>
 80a338a:	b128      	cbz	r0, 80a3398 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a338c:	4629      	mov	r1, r5
 80a338e:	4620      	mov	r0, r4
}
 80a3390:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a3394:	f7ff b99a 	b.w	80a26cc <HAL_Pin_Mode>
 80a3398:	bd38      	pop	{r3, r4, r5, pc}

080a339a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a339a:	b538      	push	{r3, r4, r5, lr}
 80a339c:	4604      	mov	r4, r0
 80a339e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a33a0:	f7ff f99c 	bl	80a26dc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a33a4:	28ff      	cmp	r0, #255	; 0xff
 80a33a6:	d010      	beq.n	80a33ca <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a33a8:	2806      	cmp	r0, #6
 80a33aa:	d804      	bhi.n	80a33b6 <digitalWrite+0x1c>
 80a33ac:	234d      	movs	r3, #77	; 0x4d
 80a33ae:	fa23 f000 	lsr.w	r0, r3, r0
 80a33b2:	07c3      	lsls	r3, r0, #31
 80a33b4:	d409      	bmi.n	80a33ca <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a33b6:	4620      	mov	r0, r4
 80a33b8:	f7ff ffbc 	bl	80a3334 <pinAvailable>
 80a33bc:	b128      	cbz	r0, 80a33ca <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a33be:	4629      	mov	r1, r5
 80a33c0:	4620      	mov	r0, r4
}
 80a33c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a33c6:	f7ff b991 	b.w	80a26ec <HAL_GPIO_Write>
 80a33ca:	bd38      	pop	{r3, r4, r5, pc}

080a33cc <_ZN8particle7globals11instanceSpiEv>:
#ifndef SPARK_WIRING_NO_SPI

namespace particle {
namespace globals {

SPIClass& instanceSpi() {
 80a33cc:	b538      	push	{r3, r4, r5, lr}
    static SPIClass instance(HAL_SPI_INTERFACE1);
 80a33ce:	4d0b      	ldr	r5, [pc, #44]	; (80a33fc <_ZN8particle7globals11instanceSpiEv+0x30>)
 80a33d0:	6829      	ldr	r1, [r5, #0]
 80a33d2:	f011 0401 	ands.w	r4, r1, #1
 80a33d6:	d10f      	bne.n	80a33f8 <_ZN8particle7globals11instanceSpiEv+0x2c>
 80a33d8:	4628      	mov	r0, r5
 80a33da:	f7fc fe6d 	bl	80a00b8 <__cxa_guard_acquire>
 80a33de:	b158      	cbz	r0, 80a33f8 <_ZN8particle7globals11instanceSpiEv+0x2c>
 80a33e0:	4621      	mov	r1, r4
 80a33e2:	4807      	ldr	r0, [pc, #28]	; (80a3400 <_ZN8particle7globals11instanceSpiEv+0x34>)
 80a33e4:	f7ff fb5c 	bl	80a2aa0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a33e8:	4628      	mov	r0, r5
 80a33ea:	f7fc fe6a 	bl	80a00c2 <__cxa_guard_release>
 80a33ee:	4a05      	ldr	r2, [pc, #20]	; (80a3404 <_ZN8particle7globals11instanceSpiEv+0x38>)
 80a33f0:	4905      	ldr	r1, [pc, #20]	; (80a3408 <_ZN8particle7globals11instanceSpiEv+0x3c>)
 80a33f2:	4803      	ldr	r0, [pc, #12]	; (80a3400 <_ZN8particle7globals11instanceSpiEv+0x34>)
 80a33f4:	f000 f862 	bl	80a34bc <__aeabi_atexit>
    return instance;
}
 80a33f8:	4801      	ldr	r0, [pc, #4]	; (80a3400 <_ZN8particle7globals11instanceSpiEv+0x34>)
 80a33fa:	bd38      	pop	{r3, r4, r5, pc}
 80a33fc:	200005a8 	.word	0x200005a8
 80a3400:	20000598 	.word	0x20000598
 80a3404:	20000074 	.word	0x20000074
 80a3408:	080a2a69 	.word	0x080a2a69

080a340c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a340c:	b513      	push	{r0, r1, r4, lr}
 80a340e:	4c08      	ldr	r4, [pc, #32]	; (80a3430 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a3410:	2300      	movs	r3, #0
 80a3412:	461a      	mov	r2, r3
 80a3414:	4619      	mov	r1, r3
 80a3416:	9300      	str	r3, [sp, #0]
 80a3418:	4620      	mov	r0, r4
 80a341a:	f7ff fd29 	bl	80a2e70 <_ZN9IPAddressC1Ehhhh>
 80a341e:	4620      	mov	r0, r4
 80a3420:	4a04      	ldr	r2, [pc, #16]	; (80a3434 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a3422:	4905      	ldr	r1, [pc, #20]	; (80a3438 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a3424:	b002      	add	sp, #8
 80a3426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a342a:	f000 b847 	b.w	80a34bc <__aeabi_atexit>
 80a342e:	bf00      	nop
 80a3430:	200005b0 	.word	0x200005b0
 80a3434:	20000074 	.word	0x20000074
 80a3438:	080a2dc1 	.word	0x080a2dc1

080a343c <_Z17acquireWireBufferv>:
}

} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
 80a343c:	b570      	push	{r4, r5, r6, lr}
 80a343e:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a3440:	2514      	movs	r5, #20
 80a3442:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3444:	4e09      	ldr	r6, [pc, #36]	; (80a346c <_Z17acquireWireBufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a3446:	2100      	movs	r1, #0
 80a3448:	f002 fb0b 	bl	80a5a62 <memset>
 80a344c:	8025      	strh	r5, [r4, #0]
 80a344e:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3450:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a3452:	60a5      	str	r5, [r4, #8]
 80a3454:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3456:	4628      	mov	r0, r5
 80a3458:	f000 f840 	bl	80a34dc <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a345c:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a345e:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3460:	4628      	mov	r0, r5
 80a3462:	f000 f83b 	bl	80a34dc <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a3466:	60e0      	str	r0, [r4, #12]
} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
	return defaultWireConfig();
}
 80a3468:	4620      	mov	r0, r4
 80a346a:	bd70      	pop	{r4, r5, r6, pc}
 80a346c:	080a609c 	.word	0x080a609c

080a3470 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a3470:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a3472:	4d0e      	ldr	r5, [pc, #56]	; (80a34ac <_Z19__fetch_global_Wirev+0x3c>)
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a3474:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a3476:	6829      	ldr	r1, [r5, #0]
 80a3478:	f011 0401 	ands.w	r4, r1, #1
 80a347c:	d113      	bne.n	80a34a6 <_Z19__fetch_global_Wirev+0x36>
 80a347e:	4628      	mov	r0, r5
 80a3480:	f7fc fe1a 	bl	80a00b8 <__cxa_guard_acquire>
 80a3484:	b178      	cbz	r0, 80a34a6 <_Z19__fetch_global_Wirev+0x36>
 80a3486:	a801      	add	r0, sp, #4
 80a3488:	f7ff ffd8 	bl	80a343c <_Z17acquireWireBufferv>
 80a348c:	aa01      	add	r2, sp, #4
 80a348e:	4621      	mov	r1, r4
 80a3490:	4807      	ldr	r0, [pc, #28]	; (80a34b0 <_Z19__fetch_global_Wirev+0x40>)
 80a3492:	f7ff fe79 	bl	80a3188 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 80a3496:	4628      	mov	r0, r5
 80a3498:	f7fc fe13 	bl	80a00c2 <__cxa_guard_release>
 80a349c:	4a05      	ldr	r2, [pc, #20]	; (80a34b4 <_Z19__fetch_global_Wirev+0x44>)
 80a349e:	4906      	ldr	r1, [pc, #24]	; (80a34b8 <_Z19__fetch_global_Wirev+0x48>)
 80a34a0:	4803      	ldr	r0, [pc, #12]	; (80a34b0 <_Z19__fetch_global_Wirev+0x40>)
 80a34a2:	f000 f80b 	bl	80a34bc <__aeabi_atexit>
	return wire;
}
 80a34a6:	4802      	ldr	r0, [pc, #8]	; (80a34b0 <_Z19__fetch_global_Wirev+0x40>)
 80a34a8:	b007      	add	sp, #28
 80a34aa:	bd30      	pop	{r4, r5, pc}
 80a34ac:	200005c8 	.word	0x200005c8
 80a34b0:	200005cc 	.word	0x200005cc
 80a34b4:	20000074 	.word	0x20000074
 80a34b8:	080a3131 	.word	0x080a3131

080a34bc <__aeabi_atexit>:
 80a34bc:	460b      	mov	r3, r1
 80a34be:	4601      	mov	r1, r0
 80a34c0:	4618      	mov	r0, r3
 80a34c2:	f002 bab5 	b.w	80a5a30 <__cxa_atexit>
	...

080a34c8 <_ZSt15get_new_handlerv>:
 80a34c8:	4b02      	ldr	r3, [pc, #8]	; (80a34d4 <_ZSt15get_new_handlerv+0xc>)
 80a34ca:	6818      	ldr	r0, [r3, #0]
 80a34cc:	f3bf 8f5f 	dmb	sy
 80a34d0:	4770      	bx	lr
 80a34d2:	bf00      	nop
 80a34d4:	200005e0 	.word	0x200005e0

080a34d8 <_ZdlPvj>:
 80a34d8:	f7fc bde1 	b.w	80a009e <_ZdlPv>

080a34dc <_ZnajRKSt9nothrow_t>:
 80a34dc:	f000 b800 	b.w	80a34e0 <_ZnwjRKSt9nothrow_t>

080a34e0 <_ZnwjRKSt9nothrow_t>:
 80a34e0:	b510      	push	{r4, lr}
 80a34e2:	2800      	cmp	r0, #0
 80a34e4:	bf14      	ite	ne
 80a34e6:	4604      	movne	r4, r0
 80a34e8:	2401      	moveq	r4, #1
 80a34ea:	4620      	mov	r0, r4
 80a34ec:	f7ff faa4 	bl	80a2a38 <malloc>
 80a34f0:	b920      	cbnz	r0, 80a34fc <_ZnwjRKSt9nothrow_t+0x1c>
 80a34f2:	f7ff ffe9 	bl	80a34c8 <_ZSt15get_new_handlerv>
 80a34f6:	b108      	cbz	r0, 80a34fc <_ZnwjRKSt9nothrow_t+0x1c>
 80a34f8:	4780      	blx	r0
 80a34fa:	e7f6      	b.n	80a34ea <_ZnwjRKSt9nothrow_t+0xa>
 80a34fc:	bd10      	pop	{r4, pc}
	...

080a3500 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a3500:	4b18      	ldr	r3, [pc, #96]	; (80a3564 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a3502:	681a      	ldr	r2, [r3, #0]
 80a3504:	07d1      	lsls	r1, r2, #31
 80a3506:	bf5c      	itt	pl
 80a3508:	2201      	movpl	r2, #1
 80a350a:	601a      	strpl	r2, [r3, #0]
 80a350c:	4b16      	ldr	r3, [pc, #88]	; (80a3568 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a350e:	681a      	ldr	r2, [r3, #0]
 80a3510:	07d2      	lsls	r2, r2, #31
 80a3512:	bf5c      	itt	pl
 80a3514:	2201      	movpl	r2, #1
 80a3516:	601a      	strpl	r2, [r3, #0]
 80a3518:	4b14      	ldr	r3, [pc, #80]	; (80a356c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a351a:	681a      	ldr	r2, [r3, #0]
 80a351c:	07d0      	lsls	r0, r2, #31
 80a351e:	bf5c      	itt	pl
 80a3520:	2201      	movpl	r2, #1
 80a3522:	601a      	strpl	r2, [r3, #0]
 80a3524:	4b12      	ldr	r3, [pc, #72]	; (80a3570 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a3526:	681a      	ldr	r2, [r3, #0]
 80a3528:	07d1      	lsls	r1, r2, #31
 80a352a:	bf5c      	itt	pl
 80a352c:	2201      	movpl	r2, #1
 80a352e:	601a      	strpl	r2, [r3, #0]
 80a3530:	4b10      	ldr	r3, [pc, #64]	; (80a3574 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a3532:	681a      	ldr	r2, [r3, #0]
 80a3534:	07d2      	lsls	r2, r2, #31
 80a3536:	bf5c      	itt	pl
 80a3538:	2201      	movpl	r2, #1
 80a353a:	601a      	strpl	r2, [r3, #0]
 80a353c:	4b0e      	ldr	r3, [pc, #56]	; (80a3578 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a353e:	681a      	ldr	r2, [r3, #0]
 80a3540:	07d0      	lsls	r0, r2, #31
 80a3542:	bf5c      	itt	pl
 80a3544:	2201      	movpl	r2, #1
 80a3546:	601a      	strpl	r2, [r3, #0]
 80a3548:	4b0c      	ldr	r3, [pc, #48]	; (80a357c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a354a:	681a      	ldr	r2, [r3, #0]
 80a354c:	07d1      	lsls	r1, r2, #31
 80a354e:	bf5c      	itt	pl
 80a3550:	2201      	movpl	r2, #1
 80a3552:	601a      	strpl	r2, [r3, #0]
 80a3554:	4b0a      	ldr	r3, [pc, #40]	; (80a3580 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a3556:	681a      	ldr	r2, [r3, #0]
 80a3558:	07d2      	lsls	r2, r2, #31
 80a355a:	bf5c      	itt	pl
 80a355c:	2201      	movpl	r2, #1
 80a355e:	601a      	strpl	r2, [r3, #0]
 80a3560:	4770      	bx	lr
 80a3562:	bf00      	nop
 80a3564:	20000600 	.word	0x20000600
 80a3568:	200005fc 	.word	0x200005fc
 80a356c:	200005f8 	.word	0x200005f8
 80a3570:	200005f4 	.word	0x200005f4
 80a3574:	200005f0 	.word	0x200005f0
 80a3578:	200005ec 	.word	0x200005ec
 80a357c:	200005e8 	.word	0x200005e8
 80a3580:	200005e4 	.word	0x200005e4

080a3584 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a3584:	4b24      	ldr	r3, [pc, #144]	; (80a3618 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a3586:	681a      	ldr	r2, [r3, #0]
 80a3588:	07d0      	lsls	r0, r2, #31
 80a358a:	bf5c      	itt	pl
 80a358c:	2201      	movpl	r2, #1
 80a358e:	601a      	strpl	r2, [r3, #0]
 80a3590:	4b22      	ldr	r3, [pc, #136]	; (80a361c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a3592:	681a      	ldr	r2, [r3, #0]
 80a3594:	07d1      	lsls	r1, r2, #31
 80a3596:	bf5c      	itt	pl
 80a3598:	2201      	movpl	r2, #1
 80a359a:	601a      	strpl	r2, [r3, #0]
 80a359c:	4b20      	ldr	r3, [pc, #128]	; (80a3620 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a359e:	681a      	ldr	r2, [r3, #0]
 80a35a0:	07d2      	lsls	r2, r2, #31
 80a35a2:	bf5c      	itt	pl
 80a35a4:	2201      	movpl	r2, #1
 80a35a6:	601a      	strpl	r2, [r3, #0]
 80a35a8:	4b1e      	ldr	r3, [pc, #120]	; (80a3624 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a35aa:	681a      	ldr	r2, [r3, #0]
 80a35ac:	07d0      	lsls	r0, r2, #31
 80a35ae:	bf5c      	itt	pl
 80a35b0:	2201      	movpl	r2, #1
 80a35b2:	601a      	strpl	r2, [r3, #0]
 80a35b4:	4b1c      	ldr	r3, [pc, #112]	; (80a3628 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a35b6:	681a      	ldr	r2, [r3, #0]
 80a35b8:	07d1      	lsls	r1, r2, #31
 80a35ba:	bf5c      	itt	pl
 80a35bc:	2201      	movpl	r2, #1
 80a35be:	601a      	strpl	r2, [r3, #0]
 80a35c0:	4b1a      	ldr	r3, [pc, #104]	; (80a362c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a35c2:	681a      	ldr	r2, [r3, #0]
 80a35c4:	07d2      	lsls	r2, r2, #31
 80a35c6:	bf5c      	itt	pl
 80a35c8:	2201      	movpl	r2, #1
 80a35ca:	601a      	strpl	r2, [r3, #0]
 80a35cc:	4b18      	ldr	r3, [pc, #96]	; (80a3630 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a35ce:	681a      	ldr	r2, [r3, #0]
 80a35d0:	07d0      	lsls	r0, r2, #31
 80a35d2:	bf5c      	itt	pl
 80a35d4:	2201      	movpl	r2, #1
 80a35d6:	601a      	strpl	r2, [r3, #0]
 80a35d8:	4b16      	ldr	r3, [pc, #88]	; (80a3634 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a35da:	681a      	ldr	r2, [r3, #0]
 80a35dc:	07d1      	lsls	r1, r2, #31
 80a35de:	bf5c      	itt	pl
 80a35e0:	2201      	movpl	r2, #1
 80a35e2:	601a      	strpl	r2, [r3, #0]
 80a35e4:	4b14      	ldr	r3, [pc, #80]	; (80a3638 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a35e6:	681a      	ldr	r2, [r3, #0]
 80a35e8:	07d2      	lsls	r2, r2, #31
 80a35ea:	bf5c      	itt	pl
 80a35ec:	2201      	movpl	r2, #1
 80a35ee:	601a      	strpl	r2, [r3, #0]
 80a35f0:	4b12      	ldr	r3, [pc, #72]	; (80a363c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a35f2:	681a      	ldr	r2, [r3, #0]
 80a35f4:	07d0      	lsls	r0, r2, #31
 80a35f6:	bf5c      	itt	pl
 80a35f8:	2201      	movpl	r2, #1
 80a35fa:	601a      	strpl	r2, [r3, #0]
 80a35fc:	4b10      	ldr	r3, [pc, #64]	; (80a3640 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a35fe:	681a      	ldr	r2, [r3, #0]
 80a3600:	07d1      	lsls	r1, r2, #31
 80a3602:	bf5c      	itt	pl
 80a3604:	2201      	movpl	r2, #1
 80a3606:	601a      	strpl	r2, [r3, #0]
 80a3608:	4b0e      	ldr	r3, [pc, #56]	; (80a3644 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a360a:	681a      	ldr	r2, [r3, #0]
 80a360c:	07d2      	lsls	r2, r2, #31
 80a360e:	bf5c      	itt	pl
 80a3610:	2201      	movpl	r2, #1
 80a3612:	601a      	strpl	r2, [r3, #0]
 80a3614:	4770      	bx	lr
 80a3616:	bf00      	nop
 80a3618:	20000630 	.word	0x20000630
 80a361c:	2000062c 	.word	0x2000062c
 80a3620:	20000628 	.word	0x20000628
 80a3624:	20000624 	.word	0x20000624
 80a3628:	20000620 	.word	0x20000620
 80a362c:	2000061c 	.word	0x2000061c
 80a3630:	20000618 	.word	0x20000618
 80a3634:	20000614 	.word	0x20000614
 80a3638:	20000610 	.word	0x20000610
 80a363c:	2000060c 	.word	0x2000060c
 80a3640:	20000608 	.word	0x20000608
 80a3644:	20000604 	.word	0x20000604

080a3648 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a3648:	4b24      	ldr	r3, [pc, #144]	; (80a36dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a364a:	681a      	ldr	r2, [r3, #0]
 80a364c:	07d0      	lsls	r0, r2, #31
 80a364e:	bf5c      	itt	pl
 80a3650:	2201      	movpl	r2, #1
 80a3652:	601a      	strpl	r2, [r3, #0]
 80a3654:	4b22      	ldr	r3, [pc, #136]	; (80a36e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a3656:	681a      	ldr	r2, [r3, #0]
 80a3658:	07d1      	lsls	r1, r2, #31
 80a365a:	bf5c      	itt	pl
 80a365c:	2201      	movpl	r2, #1
 80a365e:	601a      	strpl	r2, [r3, #0]
 80a3660:	4b20      	ldr	r3, [pc, #128]	; (80a36e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a3662:	681a      	ldr	r2, [r3, #0]
 80a3664:	07d2      	lsls	r2, r2, #31
 80a3666:	bf5c      	itt	pl
 80a3668:	2201      	movpl	r2, #1
 80a366a:	601a      	strpl	r2, [r3, #0]
 80a366c:	4b1e      	ldr	r3, [pc, #120]	; (80a36e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a366e:	681a      	ldr	r2, [r3, #0]
 80a3670:	07d0      	lsls	r0, r2, #31
 80a3672:	bf5c      	itt	pl
 80a3674:	2201      	movpl	r2, #1
 80a3676:	601a      	strpl	r2, [r3, #0]
 80a3678:	4b1c      	ldr	r3, [pc, #112]	; (80a36ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a367a:	681a      	ldr	r2, [r3, #0]
 80a367c:	07d1      	lsls	r1, r2, #31
 80a367e:	bf5c      	itt	pl
 80a3680:	2201      	movpl	r2, #1
 80a3682:	601a      	strpl	r2, [r3, #0]
 80a3684:	4b1a      	ldr	r3, [pc, #104]	; (80a36f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a3686:	681a      	ldr	r2, [r3, #0]
 80a3688:	07d2      	lsls	r2, r2, #31
 80a368a:	bf5c      	itt	pl
 80a368c:	2201      	movpl	r2, #1
 80a368e:	601a      	strpl	r2, [r3, #0]
 80a3690:	4b18      	ldr	r3, [pc, #96]	; (80a36f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a3692:	681a      	ldr	r2, [r3, #0]
 80a3694:	07d0      	lsls	r0, r2, #31
 80a3696:	bf5c      	itt	pl
 80a3698:	2201      	movpl	r2, #1
 80a369a:	601a      	strpl	r2, [r3, #0]
 80a369c:	4b16      	ldr	r3, [pc, #88]	; (80a36f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a369e:	681a      	ldr	r2, [r3, #0]
 80a36a0:	07d1      	lsls	r1, r2, #31
 80a36a2:	bf5c      	itt	pl
 80a36a4:	2201      	movpl	r2, #1
 80a36a6:	601a      	strpl	r2, [r3, #0]
 80a36a8:	4b14      	ldr	r3, [pc, #80]	; (80a36fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a36aa:	681a      	ldr	r2, [r3, #0]
 80a36ac:	07d2      	lsls	r2, r2, #31
 80a36ae:	bf5c      	itt	pl
 80a36b0:	2201      	movpl	r2, #1
 80a36b2:	601a      	strpl	r2, [r3, #0]
 80a36b4:	4b12      	ldr	r3, [pc, #72]	; (80a3700 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a36b6:	681a      	ldr	r2, [r3, #0]
 80a36b8:	07d0      	lsls	r0, r2, #31
 80a36ba:	bf5c      	itt	pl
 80a36bc:	2201      	movpl	r2, #1
 80a36be:	601a      	strpl	r2, [r3, #0]
 80a36c0:	4b10      	ldr	r3, [pc, #64]	; (80a3704 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a36c2:	681a      	ldr	r2, [r3, #0]
 80a36c4:	07d1      	lsls	r1, r2, #31
 80a36c6:	bf5c      	itt	pl
 80a36c8:	2201      	movpl	r2, #1
 80a36ca:	601a      	strpl	r2, [r3, #0]
 80a36cc:	4b0e      	ldr	r3, [pc, #56]	; (80a3708 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a36ce:	681a      	ldr	r2, [r3, #0]
 80a36d0:	07d2      	lsls	r2, r2, #31
 80a36d2:	bf5c      	itt	pl
 80a36d4:	2201      	movpl	r2, #1
 80a36d6:	601a      	strpl	r2, [r3, #0]
 80a36d8:	4770      	bx	lr
 80a36da:	bf00      	nop
 80a36dc:	20000660 	.word	0x20000660
 80a36e0:	2000065c 	.word	0x2000065c
 80a36e4:	20000658 	.word	0x20000658
 80a36e8:	20000654 	.word	0x20000654
 80a36ec:	20000650 	.word	0x20000650
 80a36f0:	2000064c 	.word	0x2000064c
 80a36f4:	20000648 	.word	0x20000648
 80a36f8:	20000644 	.word	0x20000644
 80a36fc:	20000640 	.word	0x20000640
 80a3700:	2000063c 	.word	0x2000063c
 80a3704:	20000638 	.word	0x20000638
 80a3708:	20000634 	.word	0x20000634

080a370c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a370c:	4b18      	ldr	r3, [pc, #96]	; (80a3770 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a370e:	681a      	ldr	r2, [r3, #0]
 80a3710:	07d1      	lsls	r1, r2, #31
 80a3712:	bf5c      	itt	pl
 80a3714:	2201      	movpl	r2, #1
 80a3716:	601a      	strpl	r2, [r3, #0]
 80a3718:	4b16      	ldr	r3, [pc, #88]	; (80a3774 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a371a:	681a      	ldr	r2, [r3, #0]
 80a371c:	07d2      	lsls	r2, r2, #31
 80a371e:	bf5c      	itt	pl
 80a3720:	2201      	movpl	r2, #1
 80a3722:	601a      	strpl	r2, [r3, #0]
 80a3724:	4b14      	ldr	r3, [pc, #80]	; (80a3778 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a3726:	681a      	ldr	r2, [r3, #0]
 80a3728:	07d0      	lsls	r0, r2, #31
 80a372a:	bf5c      	itt	pl
 80a372c:	2201      	movpl	r2, #1
 80a372e:	601a      	strpl	r2, [r3, #0]
 80a3730:	4b12      	ldr	r3, [pc, #72]	; (80a377c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a3732:	681a      	ldr	r2, [r3, #0]
 80a3734:	07d1      	lsls	r1, r2, #31
 80a3736:	bf5c      	itt	pl
 80a3738:	2201      	movpl	r2, #1
 80a373a:	601a      	strpl	r2, [r3, #0]
 80a373c:	4b10      	ldr	r3, [pc, #64]	; (80a3780 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a373e:	681a      	ldr	r2, [r3, #0]
 80a3740:	07d2      	lsls	r2, r2, #31
 80a3742:	bf5c      	itt	pl
 80a3744:	2201      	movpl	r2, #1
 80a3746:	601a      	strpl	r2, [r3, #0]
 80a3748:	4b0e      	ldr	r3, [pc, #56]	; (80a3784 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a374a:	681a      	ldr	r2, [r3, #0]
 80a374c:	07d0      	lsls	r0, r2, #31
 80a374e:	bf5c      	itt	pl
 80a3750:	2201      	movpl	r2, #1
 80a3752:	601a      	strpl	r2, [r3, #0]
 80a3754:	4b0c      	ldr	r3, [pc, #48]	; (80a3788 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a3756:	681a      	ldr	r2, [r3, #0]
 80a3758:	07d1      	lsls	r1, r2, #31
 80a375a:	bf5c      	itt	pl
 80a375c:	2201      	movpl	r2, #1
 80a375e:	601a      	strpl	r2, [r3, #0]
 80a3760:	4b0a      	ldr	r3, [pc, #40]	; (80a378c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a3762:	681a      	ldr	r2, [r3, #0]
 80a3764:	07d2      	lsls	r2, r2, #31
 80a3766:	bf5c      	itt	pl
 80a3768:	2201      	movpl	r2, #1
 80a376a:	601a      	strpl	r2, [r3, #0]
 80a376c:	4770      	bx	lr
 80a376e:	bf00      	nop
 80a3770:	20000680 	.word	0x20000680
 80a3774:	2000067c 	.word	0x2000067c
 80a3778:	20000678 	.word	0x20000678
 80a377c:	20000674 	.word	0x20000674
 80a3780:	20000670 	.word	0x20000670
 80a3784:	2000066c 	.word	0x2000066c
 80a3788:	20000668 	.word	0x20000668
 80a378c:	20000664 	.word	0x20000664

080a3790 <cos>:
 80a3790:	b530      	push	{r4, r5, lr}
 80a3792:	4a21      	ldr	r2, [pc, #132]	; (80a3818 <cos+0x88>)
 80a3794:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a3798:	4293      	cmp	r3, r2
 80a379a:	b087      	sub	sp, #28
 80a379c:	dd1b      	ble.n	80a37d6 <cos+0x46>
 80a379e:	4a1f      	ldr	r2, [pc, #124]	; (80a381c <cos+0x8c>)
 80a37a0:	4293      	cmp	r3, r2
 80a37a2:	dd05      	ble.n	80a37b0 <cos+0x20>
 80a37a4:	4602      	mov	r2, r0
 80a37a6:	460b      	mov	r3, r1
 80a37a8:	f001 fa58 	bl	80a4c5c <__aeabi_dsub>
 80a37ac:	b007      	add	sp, #28
 80a37ae:	bd30      	pop	{r4, r5, pc}
 80a37b0:	aa02      	add	r2, sp, #8
 80a37b2:	f000 f891 	bl	80a38d8 <__ieee754_rem_pio2>
 80a37b6:	f000 0003 	and.w	r0, r0, #3
 80a37ba:	2801      	cmp	r0, #1
 80a37bc:	d01a      	beq.n	80a37f4 <cos+0x64>
 80a37be:	2802      	cmp	r0, #2
 80a37c0:	d00f      	beq.n	80a37e2 <cos+0x52>
 80a37c2:	b308      	cbz	r0, 80a3808 <cos+0x78>
 80a37c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a37c8:	2301      	movs	r3, #1
 80a37ca:	9300      	str	r3, [sp, #0]
 80a37cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a37d0:	f001 f87e 	bl	80a48d0 <__kernel_sin>
 80a37d4:	e7ea      	b.n	80a37ac <cos+0x1c>
 80a37d6:	2200      	movs	r2, #0
 80a37d8:	2300      	movs	r3, #0
 80a37da:	f000 fb59 	bl	80a3e90 <__kernel_cos>
 80a37de:	b007      	add	sp, #28
 80a37e0:	bd30      	pop	{r4, r5, pc}
 80a37e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a37e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a37ea:	f000 fb51 	bl	80a3e90 <__kernel_cos>
 80a37ee:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80a37f2:	e7db      	b.n	80a37ac <cos+0x1c>
 80a37f4:	9000      	str	r0, [sp, #0]
 80a37f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a37fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a37fe:	f001 f867 	bl	80a48d0 <__kernel_sin>
 80a3802:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80a3806:	e7d1      	b.n	80a37ac <cos+0x1c>
 80a3808:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a380c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a3810:	f000 fb3e 	bl	80a3e90 <__kernel_cos>
 80a3814:	e7ca      	b.n	80a37ac <cos+0x1c>
 80a3816:	bf00      	nop
 80a3818:	3fe921fb 	.word	0x3fe921fb
 80a381c:	7fefffff 	.word	0x7fefffff

080a3820 <sqrt>:
 80a3820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3824:	b08b      	sub	sp, #44	; 0x2c
 80a3826:	4604      	mov	r4, r0
 80a3828:	460d      	mov	r5, r1
 80a382a:	f000 fa6b 	bl	80a3d04 <__ieee754_sqrt>
 80a382e:	4b28      	ldr	r3, [pc, #160]	; (80a38d0 <sqrt+0xb0>)
 80a3830:	4606      	mov	r6, r0
 80a3832:	f993 a000 	ldrsb.w	sl, [r3]
 80a3836:	460f      	mov	r7, r1
 80a3838:	f1ba 3fff 	cmp.w	sl, #4294967295
 80a383c:	d012      	beq.n	80a3864 <sqrt+0x44>
 80a383e:	4622      	mov	r2, r4
 80a3840:	462b      	mov	r3, r5
 80a3842:	4620      	mov	r0, r4
 80a3844:	4629      	mov	r1, r5
 80a3846:	f001 fe57 	bl	80a54f8 <__aeabi_dcmpun>
 80a384a:	4683      	mov	fp, r0
 80a384c:	b950      	cbnz	r0, 80a3864 <sqrt+0x44>
 80a384e:	f04f 0800 	mov.w	r8, #0
 80a3852:	f04f 0900 	mov.w	r9, #0
 80a3856:	4620      	mov	r0, r4
 80a3858:	4629      	mov	r1, r5
 80a385a:	4642      	mov	r2, r8
 80a385c:	464b      	mov	r3, r9
 80a385e:	f001 fe23 	bl	80a54a8 <__aeabi_dcmplt>
 80a3862:	b920      	cbnz	r0, 80a386e <sqrt+0x4e>
 80a3864:	4630      	mov	r0, r6
 80a3866:	4639      	mov	r1, r7
 80a3868:	b00b      	add	sp, #44	; 0x2c
 80a386a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a386e:	4a19      	ldr	r2, [pc, #100]	; (80a38d4 <sqrt+0xb4>)
 80a3870:	2301      	movs	r3, #1
 80a3872:	f8cd b020 	str.w	fp, [sp, #32]
 80a3876:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80a387a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80a387e:	9201      	str	r2, [sp, #4]
 80a3880:	9300      	str	r3, [sp, #0]
 80a3882:	f1ba 0f00 	cmp.w	sl, #0
 80a3886:	d015      	beq.n	80a38b4 <sqrt+0x94>
 80a3888:	4642      	mov	r2, r8
 80a388a:	464b      	mov	r3, r9
 80a388c:	4640      	mov	r0, r8
 80a388e:	4649      	mov	r1, r9
 80a3890:	f001 fcc2 	bl	80a5218 <__aeabi_ddiv>
 80a3894:	f1ba 0f02 	cmp.w	sl, #2
 80a3898:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a389c:	d10c      	bne.n	80a38b8 <sqrt+0x98>
 80a389e:	f7ff f8db 	bl	80a2a58 <__errno>
 80a38a2:	2321      	movs	r3, #33	; 0x21
 80a38a4:	6003      	str	r3, [r0, #0]
 80a38a6:	9b08      	ldr	r3, [sp, #32]
 80a38a8:	b963      	cbnz	r3, 80a38c4 <sqrt+0xa4>
 80a38aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a38ae:	b00b      	add	sp, #44	; 0x2c
 80a38b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a38b4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80a38b8:	4668      	mov	r0, sp
 80a38ba:	f001 f94d 	bl	80a4b58 <matherr>
 80a38be:	2800      	cmp	r0, #0
 80a38c0:	d1f1      	bne.n	80a38a6 <sqrt+0x86>
 80a38c2:	e7ec      	b.n	80a389e <sqrt+0x7e>
 80a38c4:	f7ff f8c8 	bl	80a2a58 <__errno>
 80a38c8:	9b08      	ldr	r3, [sp, #32]
 80a38ca:	6003      	str	r3, [r0, #0]
 80a38cc:	e7ed      	b.n	80a38aa <sqrt+0x8a>
 80a38ce:	bf00      	nop
 80a38d0:	2000000c 	.word	0x2000000c
 80a38d4:	080a60a0 	.word	0x080a60a0

080a38d8 <__ieee754_rem_pio2>:
 80a38d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a38dc:	4c94      	ldr	r4, [pc, #592]	; (80a3b30 <__ieee754_rem_pio2+0x258>)
 80a38de:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80a38e2:	42a7      	cmp	r7, r4
 80a38e4:	b08f      	sub	sp, #60	; 0x3c
 80a38e6:	f340 8081 	ble.w	80a39ec <__ieee754_rem_pio2+0x114>
 80a38ea:	4614      	mov	r4, r2
 80a38ec:	4a91      	ldr	r2, [pc, #580]	; (80a3b34 <__ieee754_rem_pio2+0x25c>)
 80a38ee:	460e      	mov	r6, r1
 80a38f0:	4297      	cmp	r7, r2
 80a38f2:	dc26      	bgt.n	80a3942 <__ieee754_rem_pio2+0x6a>
 80a38f4:	a384      	add	r3, pc, #528	; (adr r3, 80a3b08 <__ieee754_rem_pio2+0x230>)
 80a38f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a38fa:	2900      	cmp	r1, #0
 80a38fc:	f340 81a0 	ble.w	80a3c40 <__ieee754_rem_pio2+0x368>
 80a3900:	f001 f9ac 	bl	80a4c5c <__aeabi_dsub>
 80a3904:	4b8c      	ldr	r3, [pc, #560]	; (80a3b38 <__ieee754_rem_pio2+0x260>)
 80a3906:	4680      	mov	r8, r0
 80a3908:	429f      	cmp	r7, r3
 80a390a:	4689      	mov	r9, r1
 80a390c:	f000 8083 	beq.w	80a3a16 <__ieee754_rem_pio2+0x13e>
 80a3910:	a37f      	add	r3, pc, #508	; (adr r3, 80a3b10 <__ieee754_rem_pio2+0x238>)
 80a3912:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3916:	f001 f9a1 	bl	80a4c5c <__aeabi_dsub>
 80a391a:	4602      	mov	r2, r0
 80a391c:	460b      	mov	r3, r1
 80a391e:	4640      	mov	r0, r8
 80a3920:	e9c4 2300 	strd	r2, r3, [r4]
 80a3924:	4649      	mov	r1, r9
 80a3926:	f001 f999 	bl	80a4c5c <__aeabi_dsub>
 80a392a:	a379      	add	r3, pc, #484	; (adr r3, 80a3b10 <__ieee754_rem_pio2+0x238>)
 80a392c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3930:	f001 f994 	bl	80a4c5c <__aeabi_dsub>
 80a3934:	2501      	movs	r5, #1
 80a3936:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a393a:	4628      	mov	r0, r5
 80a393c:	b00f      	add	sp, #60	; 0x3c
 80a393e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3942:	4a7e      	ldr	r2, [pc, #504]	; (80a3b3c <__ieee754_rem_pio2+0x264>)
 80a3944:	4297      	cmp	r7, r2
 80a3946:	f340 8083 	ble.w	80a3a50 <__ieee754_rem_pio2+0x178>
 80a394a:	4a7d      	ldr	r2, [pc, #500]	; (80a3b40 <__ieee754_rem_pio2+0x268>)
 80a394c:	4297      	cmp	r7, r2
 80a394e:	dc58      	bgt.n	80a3a02 <__ieee754_rem_pio2+0x12a>
 80a3950:	153d      	asrs	r5, r7, #20
 80a3952:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80a3956:	eba7 5105 	sub.w	r1, r7, r5, lsl #20
 80a395a:	468b      	mov	fp, r1
 80a395c:	4682      	mov	sl, r0
 80a395e:	f001 fde1 	bl	80a5524 <__aeabi_d2iz>
 80a3962:	f001 fac9 	bl	80a4ef8 <__aeabi_i2d>
 80a3966:	4680      	mov	r8, r0
 80a3968:	4689      	mov	r9, r1
 80a396a:	4642      	mov	r2, r8
 80a396c:	464b      	mov	r3, r9
 80a396e:	4650      	mov	r0, sl
 80a3970:	4659      	mov	r1, fp
 80a3972:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80a3976:	f001 f971 	bl	80a4c5c <__aeabi_dsub>
 80a397a:	2200      	movs	r2, #0
 80a397c:	4b71      	ldr	r3, [pc, #452]	; (80a3b44 <__ieee754_rem_pio2+0x26c>)
 80a397e:	f001 fb21 	bl	80a4fc4 <__aeabi_dmul>
 80a3982:	468b      	mov	fp, r1
 80a3984:	4682      	mov	sl, r0
 80a3986:	f001 fdcd 	bl	80a5524 <__aeabi_d2iz>
 80a398a:	f001 fab5 	bl	80a4ef8 <__aeabi_i2d>
 80a398e:	4680      	mov	r8, r0
 80a3990:	4689      	mov	r9, r1
 80a3992:	4642      	mov	r2, r8
 80a3994:	464b      	mov	r3, r9
 80a3996:	4650      	mov	r0, sl
 80a3998:	4659      	mov	r1, fp
 80a399a:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80a399e:	f001 f95d 	bl	80a4c5c <__aeabi_dsub>
 80a39a2:	2200      	movs	r2, #0
 80a39a4:	4b67      	ldr	r3, [pc, #412]	; (80a3b44 <__ieee754_rem_pio2+0x26c>)
 80a39a6:	f001 fb0d 	bl	80a4fc4 <__aeabi_dmul>
 80a39aa:	2200      	movs	r2, #0
 80a39ac:	2300      	movs	r3, #0
 80a39ae:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80a39b2:	f001 fd6f 	bl	80a5494 <__aeabi_dcmpeq>
 80a39b6:	2800      	cmp	r0, #0
 80a39b8:	f000 816a 	beq.w	80a3c90 <__ieee754_rem_pio2+0x3b8>
 80a39bc:	2300      	movs	r3, #0
 80a39be:	4640      	mov	r0, r8
 80a39c0:	4649      	mov	r1, r9
 80a39c2:	2200      	movs	r2, #0
 80a39c4:	f001 fd66 	bl	80a5494 <__aeabi_dcmpeq>
 80a39c8:	2800      	cmp	r0, #0
 80a39ca:	bf14      	ite	ne
 80a39cc:	2301      	movne	r3, #1
 80a39ce:	2302      	moveq	r3, #2
 80a39d0:	485d      	ldr	r0, [pc, #372]	; (80a3b48 <__ieee754_rem_pio2+0x270>)
 80a39d2:	2102      	movs	r1, #2
 80a39d4:	9001      	str	r0, [sp, #4]
 80a39d6:	9100      	str	r1, [sp, #0]
 80a39d8:	462a      	mov	r2, r5
 80a39da:	4621      	mov	r1, r4
 80a39dc:	a808      	add	r0, sp, #32
 80a39de:	f000 fb7b 	bl	80a40d8 <__kernel_rem_pio2>
 80a39e2:	2e00      	cmp	r6, #0
 80a39e4:	f2c0 814a 	blt.w	80a3c7c <__ieee754_rem_pio2+0x3a4>
 80a39e8:	4605      	mov	r5, r0
 80a39ea:	e006      	b.n	80a39fa <__ieee754_rem_pio2+0x122>
 80a39ec:	e9c2 0100 	strd	r0, r1, [r2]
 80a39f0:	2500      	movs	r5, #0
 80a39f2:	2400      	movs	r4, #0
 80a39f4:	e9c2 4502 	strd	r4, r5, [r2, #8]
 80a39f8:	2500      	movs	r5, #0
 80a39fa:	4628      	mov	r0, r5
 80a39fc:	b00f      	add	sp, #60	; 0x3c
 80a39fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3a02:	4602      	mov	r2, r0
 80a3a04:	460b      	mov	r3, r1
 80a3a06:	f001 f929 	bl	80a4c5c <__aeabi_dsub>
 80a3a0a:	2500      	movs	r5, #0
 80a3a0c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a3a10:	e9c4 0100 	strd	r0, r1, [r4]
 80a3a14:	e7f1      	b.n	80a39fa <__ieee754_rem_pio2+0x122>
 80a3a16:	a340      	add	r3, pc, #256	; (adr r3, 80a3b18 <__ieee754_rem_pio2+0x240>)
 80a3a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3a1c:	f001 f91e 	bl	80a4c5c <__aeabi_dsub>
 80a3a20:	a33f      	add	r3, pc, #252	; (adr r3, 80a3b20 <__ieee754_rem_pio2+0x248>)
 80a3a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3a26:	4606      	mov	r6, r0
 80a3a28:	460f      	mov	r7, r1
 80a3a2a:	f001 f917 	bl	80a4c5c <__aeabi_dsub>
 80a3a2e:	4602      	mov	r2, r0
 80a3a30:	460b      	mov	r3, r1
 80a3a32:	4630      	mov	r0, r6
 80a3a34:	e9c4 2300 	strd	r2, r3, [r4]
 80a3a38:	4639      	mov	r1, r7
 80a3a3a:	f001 f90f 	bl	80a4c5c <__aeabi_dsub>
 80a3a3e:	a338      	add	r3, pc, #224	; (adr r3, 80a3b20 <__ieee754_rem_pio2+0x248>)
 80a3a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3a44:	f001 f90a 	bl	80a4c5c <__aeabi_dsub>
 80a3a48:	2501      	movs	r5, #1
 80a3a4a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a3a4e:	e7d4      	b.n	80a39fa <__ieee754_rem_pio2+0x122>
 80a3a50:	f000 fff4 	bl	80a4a3c <fabs>
 80a3a54:	a334      	add	r3, pc, #208	; (adr r3, 80a3b28 <__ieee754_rem_pio2+0x250>)
 80a3a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3a5a:	4680      	mov	r8, r0
 80a3a5c:	4689      	mov	r9, r1
 80a3a5e:	f001 fab1 	bl	80a4fc4 <__aeabi_dmul>
 80a3a62:	2200      	movs	r2, #0
 80a3a64:	4b39      	ldr	r3, [pc, #228]	; (80a3b4c <__ieee754_rem_pio2+0x274>)
 80a3a66:	f001 f8fb 	bl	80a4c60 <__adddf3>
 80a3a6a:	f001 fd5b 	bl	80a5524 <__aeabi_d2iz>
 80a3a6e:	4605      	mov	r5, r0
 80a3a70:	f001 fa42 	bl	80a4ef8 <__aeabi_i2d>
 80a3a74:	a324      	add	r3, pc, #144	; (adr r3, 80a3b08 <__ieee754_rem_pio2+0x230>)
 80a3a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3a7a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80a3a7e:	f001 faa1 	bl	80a4fc4 <__aeabi_dmul>
 80a3a82:	4602      	mov	r2, r0
 80a3a84:	460b      	mov	r3, r1
 80a3a86:	4640      	mov	r0, r8
 80a3a88:	4649      	mov	r1, r9
 80a3a8a:	f001 f8e7 	bl	80a4c5c <__aeabi_dsub>
 80a3a8e:	a320      	add	r3, pc, #128	; (adr r3, 80a3b10 <__ieee754_rem_pio2+0x238>)
 80a3a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3a94:	4682      	mov	sl, r0
 80a3a96:	468b      	mov	fp, r1
 80a3a98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a3a9c:	f001 fa92 	bl	80a4fc4 <__aeabi_dmul>
 80a3aa0:	2d1f      	cmp	r5, #31
 80a3aa2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a3aa6:	dc55      	bgt.n	80a3b54 <__ieee754_rem_pio2+0x27c>
 80a3aa8:	4b29      	ldr	r3, [pc, #164]	; (80a3b50 <__ieee754_rem_pio2+0x278>)
 80a3aaa:	1e6a      	subs	r2, r5, #1
 80a3aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a3ab0:	429f      	cmp	r7, r3
 80a3ab2:	d04f      	beq.n	80a3b54 <__ieee754_rem_pio2+0x27c>
 80a3ab4:	4602      	mov	r2, r0
 80a3ab6:	460b      	mov	r3, r1
 80a3ab8:	4650      	mov	r0, sl
 80a3aba:	4659      	mov	r1, fp
 80a3abc:	f001 f8ce 	bl	80a4c5c <__aeabi_dsub>
 80a3ac0:	4602      	mov	r2, r0
 80a3ac2:	460b      	mov	r3, r1
 80a3ac4:	4681      	mov	r9, r0
 80a3ac6:	4688      	mov	r8, r1
 80a3ac8:	e9c4 2300 	strd	r2, r3, [r4]
 80a3acc:	464a      	mov	r2, r9
 80a3ace:	4643      	mov	r3, r8
 80a3ad0:	4650      	mov	r0, sl
 80a3ad2:	4659      	mov	r1, fp
 80a3ad4:	f001 f8c2 	bl	80a4c5c <__aeabi_dsub>
 80a3ad8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a3adc:	f001 f8be 	bl	80a4c5c <__aeabi_dsub>
 80a3ae0:	4602      	mov	r2, r0
 80a3ae2:	460b      	mov	r3, r1
 80a3ae4:	2e00      	cmp	r6, #0
 80a3ae6:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80a3aea:	da86      	bge.n	80a39fa <__ieee754_rem_pio2+0x122>
 80a3aec:	464a      	mov	r2, r9
 80a3aee:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80a3af2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80a3af6:	e884 000c 	stmia.w	r4, {r2, r3}
 80a3afa:	60e1      	str	r1, [r4, #12]
 80a3afc:	60a0      	str	r0, [r4, #8]
 80a3afe:	426d      	negs	r5, r5
 80a3b00:	e77b      	b.n	80a39fa <__ieee754_rem_pio2+0x122>
 80a3b02:	bf00      	nop
 80a3b04:	f3af 8000 	nop.w
 80a3b08:	54400000 	.word	0x54400000
 80a3b0c:	3ff921fb 	.word	0x3ff921fb
 80a3b10:	1a626331 	.word	0x1a626331
 80a3b14:	3dd0b461 	.word	0x3dd0b461
 80a3b18:	1a600000 	.word	0x1a600000
 80a3b1c:	3dd0b461 	.word	0x3dd0b461
 80a3b20:	2e037073 	.word	0x2e037073
 80a3b24:	3ba3198a 	.word	0x3ba3198a
 80a3b28:	6dc9c883 	.word	0x6dc9c883
 80a3b2c:	3fe45f30 	.word	0x3fe45f30
 80a3b30:	3fe921fb 	.word	0x3fe921fb
 80a3b34:	4002d97b 	.word	0x4002d97b
 80a3b38:	3ff921fb 	.word	0x3ff921fb
 80a3b3c:	413921fb 	.word	0x413921fb
 80a3b40:	7fefffff 	.word	0x7fefffff
 80a3b44:	41700000 	.word	0x41700000
 80a3b48:	080a6128 	.word	0x080a6128
 80a3b4c:	3fe00000 	.word	0x3fe00000
 80a3b50:	080a60a8 	.word	0x080a60a8
 80a3b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a3b58:	4650      	mov	r0, sl
 80a3b5a:	4659      	mov	r1, fp
 80a3b5c:	f001 f87e 	bl	80a4c5c <__aeabi_dsub>
 80a3b60:	153f      	asrs	r7, r7, #20
 80a3b62:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80a3b66:	1afb      	subs	r3, r7, r3
 80a3b68:	2b10      	cmp	r3, #16
 80a3b6a:	4681      	mov	r9, r0
 80a3b6c:	4688      	mov	r8, r1
 80a3b6e:	e9c4 0100 	strd	r0, r1, [r4]
 80a3b72:	ddab      	ble.n	80a3acc <__ieee754_rem_pio2+0x1f4>
 80a3b74:	a358      	add	r3, pc, #352	; (adr r3, 80a3cd8 <__ieee754_rem_pio2+0x400>)
 80a3b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3b7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a3b7e:	f001 fa21 	bl	80a4fc4 <__aeabi_dmul>
 80a3b82:	4680      	mov	r8, r0
 80a3b84:	4689      	mov	r9, r1
 80a3b86:	4602      	mov	r2, r0
 80a3b88:	460b      	mov	r3, r1
 80a3b8a:	4650      	mov	r0, sl
 80a3b8c:	4659      	mov	r1, fp
 80a3b8e:	f001 f865 	bl	80a4c5c <__aeabi_dsub>
 80a3b92:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a3b96:	4602      	mov	r2, r0
 80a3b98:	460b      	mov	r3, r1
 80a3b9a:	4650      	mov	r0, sl
 80a3b9c:	4659      	mov	r1, fp
 80a3b9e:	f001 f85d 	bl	80a4c5c <__aeabi_dsub>
 80a3ba2:	4642      	mov	r2, r8
 80a3ba4:	464b      	mov	r3, r9
 80a3ba6:	f001 f859 	bl	80a4c5c <__aeabi_dsub>
 80a3baa:	a34d      	add	r3, pc, #308	; (adr r3, 80a3ce0 <__ieee754_rem_pio2+0x408>)
 80a3bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3bb0:	4680      	mov	r8, r0
 80a3bb2:	4689      	mov	r9, r1
 80a3bb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a3bb8:	f001 fa04 	bl	80a4fc4 <__aeabi_dmul>
 80a3bbc:	4642      	mov	r2, r8
 80a3bbe:	464b      	mov	r3, r9
 80a3bc0:	f001 f84c 	bl	80a4c5c <__aeabi_dsub>
 80a3bc4:	4602      	mov	r2, r0
 80a3bc6:	460b      	mov	r3, r1
 80a3bc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a3bcc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a3bd0:	f001 f844 	bl	80a4c5c <__aeabi_dsub>
 80a3bd4:	460b      	mov	r3, r1
 80a3bd6:	4602      	mov	r2, r0
 80a3bd8:	4688      	mov	r8, r1
 80a3bda:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80a3bde:	1a7f      	subs	r7, r7, r1
 80a3be0:	2f31      	cmp	r7, #49	; 0x31
 80a3be2:	4681      	mov	r9, r0
 80a3be4:	e9c4 2300 	strd	r2, r3, [r4]
 80a3be8:	dd72      	ble.n	80a3cd0 <__ieee754_rem_pio2+0x3f8>
 80a3bea:	a33f      	add	r3, pc, #252	; (adr r3, 80a3ce8 <__ieee754_rem_pio2+0x410>)
 80a3bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3bf0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a3bf4:	f001 f9e6 	bl	80a4fc4 <__aeabi_dmul>
 80a3bf8:	4680      	mov	r8, r0
 80a3bfa:	4689      	mov	r9, r1
 80a3bfc:	4602      	mov	r2, r0
 80a3bfe:	460b      	mov	r3, r1
 80a3c00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a3c04:	f001 f82a 	bl	80a4c5c <__aeabi_dsub>
 80a3c08:	4602      	mov	r2, r0
 80a3c0a:	460b      	mov	r3, r1
 80a3c0c:	4682      	mov	sl, r0
 80a3c0e:	468b      	mov	fp, r1
 80a3c10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a3c14:	f001 f822 	bl	80a4c5c <__aeabi_dsub>
 80a3c18:	4642      	mov	r2, r8
 80a3c1a:	464b      	mov	r3, r9
 80a3c1c:	f001 f81e 	bl	80a4c5c <__aeabi_dsub>
 80a3c20:	a333      	add	r3, pc, #204	; (adr r3, 80a3cf0 <__ieee754_rem_pio2+0x418>)
 80a3c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3c26:	4680      	mov	r8, r0
 80a3c28:	4689      	mov	r9, r1
 80a3c2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a3c2e:	f001 f9c9 	bl	80a4fc4 <__aeabi_dmul>
 80a3c32:	4642      	mov	r2, r8
 80a3c34:	464b      	mov	r3, r9
 80a3c36:	f001 f811 	bl	80a4c5c <__aeabi_dsub>
 80a3c3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a3c3e:	e739      	b.n	80a3ab4 <__ieee754_rem_pio2+0x1dc>
 80a3c40:	f001 f80e 	bl	80a4c60 <__adddf3>
 80a3c44:	4b2e      	ldr	r3, [pc, #184]	; (80a3d00 <__ieee754_rem_pio2+0x428>)
 80a3c46:	4680      	mov	r8, r0
 80a3c48:	429f      	cmp	r7, r3
 80a3c4a:	4689      	mov	r9, r1
 80a3c4c:	d022      	beq.n	80a3c94 <__ieee754_rem_pio2+0x3bc>
 80a3c4e:	a32a      	add	r3, pc, #168	; (adr r3, 80a3cf8 <__ieee754_rem_pio2+0x420>)
 80a3c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3c54:	f001 f804 	bl	80a4c60 <__adddf3>
 80a3c58:	4602      	mov	r2, r0
 80a3c5a:	460b      	mov	r3, r1
 80a3c5c:	4640      	mov	r0, r8
 80a3c5e:	e9c4 2300 	strd	r2, r3, [r4]
 80a3c62:	4649      	mov	r1, r9
 80a3c64:	f000 fffa 	bl	80a4c5c <__aeabi_dsub>
 80a3c68:	a323      	add	r3, pc, #140	; (adr r3, 80a3cf8 <__ieee754_rem_pio2+0x420>)
 80a3c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3c6e:	f000 fff7 	bl	80a4c60 <__adddf3>
 80a3c72:	f04f 35ff 	mov.w	r5, #4294967295
 80a3c76:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a3c7a:	e6be      	b.n	80a39fa <__ieee754_rem_pio2+0x122>
 80a3c7c:	6862      	ldr	r2, [r4, #4]
 80a3c7e:	68e3      	ldr	r3, [r4, #12]
 80a3c80:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80a3c84:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80a3c88:	4245      	negs	r5, r0
 80a3c8a:	6062      	str	r2, [r4, #4]
 80a3c8c:	60e3      	str	r3, [r4, #12]
 80a3c8e:	e6b4      	b.n	80a39fa <__ieee754_rem_pio2+0x122>
 80a3c90:	2303      	movs	r3, #3
 80a3c92:	e69d      	b.n	80a39d0 <__ieee754_rem_pio2+0xf8>
 80a3c94:	a310      	add	r3, pc, #64	; (adr r3, 80a3cd8 <__ieee754_rem_pio2+0x400>)
 80a3c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3c9a:	f000 ffe1 	bl	80a4c60 <__adddf3>
 80a3c9e:	a310      	add	r3, pc, #64	; (adr r3, 80a3ce0 <__ieee754_rem_pio2+0x408>)
 80a3ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3ca4:	4606      	mov	r6, r0
 80a3ca6:	460f      	mov	r7, r1
 80a3ca8:	f000 ffda 	bl	80a4c60 <__adddf3>
 80a3cac:	4602      	mov	r2, r0
 80a3cae:	460b      	mov	r3, r1
 80a3cb0:	4630      	mov	r0, r6
 80a3cb2:	e9c4 2300 	strd	r2, r3, [r4]
 80a3cb6:	4639      	mov	r1, r7
 80a3cb8:	f000 ffd0 	bl	80a4c5c <__aeabi_dsub>
 80a3cbc:	a308      	add	r3, pc, #32	; (adr r3, 80a3ce0 <__ieee754_rem_pio2+0x408>)
 80a3cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3cc2:	f000 ffcd 	bl	80a4c60 <__adddf3>
 80a3cc6:	f04f 35ff 	mov.w	r5, #4294967295
 80a3cca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a3cce:	e694      	b.n	80a39fa <__ieee754_rem_pio2+0x122>
 80a3cd0:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 80a3cd4:	e6fa      	b.n	80a3acc <__ieee754_rem_pio2+0x1f4>
 80a3cd6:	bf00      	nop
 80a3cd8:	1a600000 	.word	0x1a600000
 80a3cdc:	3dd0b461 	.word	0x3dd0b461
 80a3ce0:	2e037073 	.word	0x2e037073
 80a3ce4:	3ba3198a 	.word	0x3ba3198a
 80a3ce8:	2e000000 	.word	0x2e000000
 80a3cec:	3ba3198a 	.word	0x3ba3198a
 80a3cf0:	252049c1 	.word	0x252049c1
 80a3cf4:	397b839a 	.word	0x397b839a
 80a3cf8:	1a626331 	.word	0x1a626331
 80a3cfc:	3dd0b461 	.word	0x3dd0b461
 80a3d00:	3ff921fb 	.word	0x3ff921fb

080a3d04 <__ieee754_sqrt>:
 80a3d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a3d08:	4e5f      	ldr	r6, [pc, #380]	; (80a3e88 <__ieee754_sqrt+0x184>)
 80a3d0a:	460c      	mov	r4, r1
 80a3d0c:	46b6      	mov	lr, r6
 80a3d0e:	400e      	ands	r6, r1
 80a3d10:	4576      	cmp	r6, lr
 80a3d12:	4605      	mov	r5, r0
 80a3d14:	f000 8098 	beq.w	80a3e48 <__ieee754_sqrt+0x144>
 80a3d18:	2900      	cmp	r1, #0
 80a3d1a:	460b      	mov	r3, r1
 80a3d1c:	4602      	mov	r2, r0
 80a3d1e:	dd74      	ble.n	80a3e0a <__ieee754_sqrt+0x106>
 80a3d20:	ea5f 5e21 	movs.w	lr, r1, asr #20
 80a3d24:	d07f      	beq.n	80a3e26 <__ieee754_sqrt+0x122>
 80a3d26:	f2ae 3eff 	subw	lr, lr, #1023	; 0x3ff
 80a3d2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a3d2e:	f01e 0f01 	tst.w	lr, #1
 80a3d32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a3d36:	d163      	bne.n	80a3e00 <__ieee754_sqrt+0xfc>
 80a3d38:	2700      	movs	r7, #0
 80a3d3a:	463e      	mov	r6, r7
 80a3d3c:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
 80a3d40:	440b      	add	r3, r1
 80a3d42:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 80a3d46:	0052      	lsls	r2, r2, #1
 80a3d48:	2016      	movs	r0, #22
 80a3d4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80a3d4e:	1874      	adds	r4, r6, r1
 80a3d50:	429c      	cmp	r4, r3
 80a3d52:	ea4f 75d2 	mov.w	r5, r2, lsr #31
 80a3d56:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80a3d5a:	dc02      	bgt.n	80a3d62 <__ieee754_sqrt+0x5e>
 80a3d5c:	1b1b      	subs	r3, r3, r4
 80a3d5e:	1866      	adds	r6, r4, r1
 80a3d60:	440f      	add	r7, r1
 80a3d62:	3801      	subs	r0, #1
 80a3d64:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80a3d68:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80a3d6c:	d1ef      	bne.n	80a3d4e <__ieee754_sqrt+0x4a>
 80a3d6e:	4684      	mov	ip, r0
 80a3d70:	2420      	movs	r4, #32
 80a3d72:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80a3d76:	e009      	b.n	80a3d8c <__ieee754_sqrt+0x88>
 80a3d78:	d020      	beq.n	80a3dbc <__ieee754_sqrt+0xb8>
 80a3d7a:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
 80a3d7e:	3c01      	subs	r4, #1
 80a3d80:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80a3d84:	442b      	add	r3, r5
 80a3d86:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80a3d8a:	d020      	beq.n	80a3dce <__ieee754_sqrt+0xca>
 80a3d8c:	429e      	cmp	r6, r3
 80a3d8e:	eb01 050c 	add.w	r5, r1, ip
 80a3d92:	daf1      	bge.n	80a3d78 <__ieee754_sqrt+0x74>
 80a3d94:	2d00      	cmp	r5, #0
 80a3d96:	eb05 0c01 	add.w	ip, r5, r1
 80a3d9a:	db09      	blt.n	80a3db0 <__ieee754_sqrt+0xac>
 80a3d9c:	46b0      	mov	r8, r6
 80a3d9e:	4295      	cmp	r5, r2
 80a3da0:	eba3 0306 	sub.w	r3, r3, r6
 80a3da4:	d900      	bls.n	80a3da8 <__ieee754_sqrt+0xa4>
 80a3da6:	3b01      	subs	r3, #1
 80a3da8:	4646      	mov	r6, r8
 80a3daa:	1b52      	subs	r2, r2, r5
 80a3dac:	4408      	add	r0, r1
 80a3dae:	e7e4      	b.n	80a3d7a <__ieee754_sqrt+0x76>
 80a3db0:	f1bc 0f00 	cmp.w	ip, #0
 80a3db4:	dbf2      	blt.n	80a3d9c <__ieee754_sqrt+0x98>
 80a3db6:	f106 0801 	add.w	r8, r6, #1
 80a3dba:	e7f0      	b.n	80a3d9e <__ieee754_sqrt+0x9a>
 80a3dbc:	4295      	cmp	r5, r2
 80a3dbe:	d817      	bhi.n	80a3df0 <__ieee754_sqrt+0xec>
 80a3dc0:	2d00      	cmp	r5, #0
 80a3dc2:	eb05 0c01 	add.w	ip, r5, r1
 80a3dc6:	db49      	blt.n	80a3e5c <__ieee754_sqrt+0x158>
 80a3dc8:	4698      	mov	r8, r3
 80a3dca:	2300      	movs	r3, #0
 80a3dcc:	e7ec      	b.n	80a3da8 <__ieee754_sqrt+0xa4>
 80a3dce:	4313      	orrs	r3, r2
 80a3dd0:	d110      	bne.n	80a3df4 <__ieee754_sqrt+0xf0>
 80a3dd2:	0840      	lsrs	r0, r0, #1
 80a3dd4:	107b      	asrs	r3, r7, #1
 80a3dd6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80a3dda:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80a3dde:	07fa      	lsls	r2, r7, #31
 80a3de0:	eb03 570e 	add.w	r7, r3, lr, lsl #20
 80a3de4:	4639      	mov	r1, r7
 80a3de6:	bf48      	it	mi
 80a3de8:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
 80a3dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a3df0:	4633      	mov	r3, r6
 80a3df2:	e7c2      	b.n	80a3d7a <__ieee754_sqrt+0x76>
 80a3df4:	1c41      	adds	r1, r0, #1
 80a3df6:	d035      	beq.n	80a3e64 <__ieee754_sqrt+0x160>
 80a3df8:	f000 0301 	and.w	r3, r0, #1
 80a3dfc:	4418      	add	r0, r3
 80a3dfe:	e7e8      	b.n	80a3dd2 <__ieee754_sqrt+0xce>
 80a3e00:	005b      	lsls	r3, r3, #1
 80a3e02:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80a3e06:	0052      	lsls	r2, r2, #1
 80a3e08:	e796      	b.n	80a3d38 <__ieee754_sqrt+0x34>
 80a3e0a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80a3e0e:	4306      	orrs	r6, r0
 80a3e10:	d0ec      	beq.n	80a3dec <__ieee754_sqrt+0xe8>
 80a3e12:	bb79      	cbnz	r1, 80a3e74 <__ieee754_sqrt+0x170>
 80a3e14:	468e      	mov	lr, r1
 80a3e16:	0ad3      	lsrs	r3, r2, #11
 80a3e18:	f1ae 0e15 	sub.w	lr, lr, #21
 80a3e1c:	0552      	lsls	r2, r2, #21
 80a3e1e:	2b00      	cmp	r3, #0
 80a3e20:	d0f9      	beq.n	80a3e16 <__ieee754_sqrt+0x112>
 80a3e22:	02dd      	lsls	r5, r3, #11
 80a3e24:	d421      	bmi.n	80a3e6a <__ieee754_sqrt+0x166>
 80a3e26:	2100      	movs	r1, #0
 80a3e28:	e000      	b.n	80a3e2c <__ieee754_sqrt+0x128>
 80a3e2a:	4601      	mov	r1, r0
 80a3e2c:	005b      	lsls	r3, r3, #1
 80a3e2e:	02dc      	lsls	r4, r3, #11
 80a3e30:	f101 0001 	add.w	r0, r1, #1
 80a3e34:	d5f9      	bpl.n	80a3e2a <__ieee754_sqrt+0x126>
 80a3e36:	f1c0 0420 	rsb	r4, r0, #32
 80a3e3a:	fa22 f404 	lsr.w	r4, r2, r4
 80a3e3e:	4323      	orrs	r3, r4
 80a3e40:	ebc1 0e0e 	rsb	lr, r1, lr
 80a3e44:	4082      	lsls	r2, r0
 80a3e46:	e76e      	b.n	80a3d26 <__ieee754_sqrt+0x22>
 80a3e48:	4602      	mov	r2, r0
 80a3e4a:	460b      	mov	r3, r1
 80a3e4c:	f001 f8ba 	bl	80a4fc4 <__aeabi_dmul>
 80a3e50:	462a      	mov	r2, r5
 80a3e52:	4623      	mov	r3, r4
 80a3e54:	f000 ff04 	bl	80a4c60 <__adddf3>
 80a3e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a3e5c:	f1bc 0f00 	cmp.w	ip, #0
 80a3e60:	daa9      	bge.n	80a3db6 <__ieee754_sqrt+0xb2>
 80a3e62:	e7b1      	b.n	80a3dc8 <__ieee754_sqrt+0xc4>
 80a3e64:	3701      	adds	r7, #1
 80a3e66:	4620      	mov	r0, r4
 80a3e68:	e7b4      	b.n	80a3dd4 <__ieee754_sqrt+0xd0>
 80a3e6a:	2420      	movs	r4, #32
 80a3e6c:	f04f 31ff 	mov.w	r1, #4294967295
 80a3e70:	2000      	movs	r0, #0
 80a3e72:	e7e2      	b.n	80a3e3a <__ieee754_sqrt+0x136>
 80a3e74:	4602      	mov	r2, r0
 80a3e76:	460b      	mov	r3, r1
 80a3e78:	f000 fef0 	bl	80a4c5c <__aeabi_dsub>
 80a3e7c:	4602      	mov	r2, r0
 80a3e7e:	460b      	mov	r3, r1
 80a3e80:	f001 f9ca 	bl	80a5218 <__aeabi_ddiv>
 80a3e84:	e7b2      	b.n	80a3dec <__ieee754_sqrt+0xe8>
 80a3e86:	bf00      	nop
 80a3e88:	7ff00000 	.word	0x7ff00000
 80a3e8c:	00000000 	.word	0x00000000

080a3e90 <__kernel_cos>:
 80a3e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3e94:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80a3e98:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80a3e9c:	b085      	sub	sp, #20
 80a3e9e:	460c      	mov	r4, r1
 80a3ea0:	4692      	mov	sl, r2
 80a3ea2:	469b      	mov	fp, r3
 80a3ea4:	4605      	mov	r5, r0
 80a3ea6:	da6b      	bge.n	80a3f80 <__kernel_cos+0xf0>
 80a3ea8:	f001 fb3c 	bl	80a5524 <__aeabi_d2iz>
 80a3eac:	2800      	cmp	r0, #0
 80a3eae:	f000 80e7 	beq.w	80a4080 <__kernel_cos+0x1f0>
 80a3eb2:	462a      	mov	r2, r5
 80a3eb4:	4623      	mov	r3, r4
 80a3eb6:	4628      	mov	r0, r5
 80a3eb8:	4621      	mov	r1, r4
 80a3eba:	f001 f883 	bl	80a4fc4 <__aeabi_dmul>
 80a3ebe:	a374      	add	r3, pc, #464	; (adr r3, 80a4090 <__kernel_cos+0x200>)
 80a3ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3ec4:	4680      	mov	r8, r0
 80a3ec6:	4689      	mov	r9, r1
 80a3ec8:	f001 f87c 	bl	80a4fc4 <__aeabi_dmul>
 80a3ecc:	a372      	add	r3, pc, #456	; (adr r3, 80a4098 <__kernel_cos+0x208>)
 80a3ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3ed2:	f000 fec5 	bl	80a4c60 <__adddf3>
 80a3ed6:	4642      	mov	r2, r8
 80a3ed8:	464b      	mov	r3, r9
 80a3eda:	f001 f873 	bl	80a4fc4 <__aeabi_dmul>
 80a3ede:	a370      	add	r3, pc, #448	; (adr r3, 80a40a0 <__kernel_cos+0x210>)
 80a3ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3ee4:	f000 feba 	bl	80a4c5c <__aeabi_dsub>
 80a3ee8:	4642      	mov	r2, r8
 80a3eea:	464b      	mov	r3, r9
 80a3eec:	f001 f86a 	bl	80a4fc4 <__aeabi_dmul>
 80a3ef0:	a36d      	add	r3, pc, #436	; (adr r3, 80a40a8 <__kernel_cos+0x218>)
 80a3ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3ef6:	f000 feb3 	bl	80a4c60 <__adddf3>
 80a3efa:	4642      	mov	r2, r8
 80a3efc:	464b      	mov	r3, r9
 80a3efe:	f001 f861 	bl	80a4fc4 <__aeabi_dmul>
 80a3f02:	a36b      	add	r3, pc, #428	; (adr r3, 80a40b0 <__kernel_cos+0x220>)
 80a3f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3f08:	f000 fea8 	bl	80a4c5c <__aeabi_dsub>
 80a3f0c:	4642      	mov	r2, r8
 80a3f0e:	464b      	mov	r3, r9
 80a3f10:	f001 f858 	bl	80a4fc4 <__aeabi_dmul>
 80a3f14:	a368      	add	r3, pc, #416	; (adr r3, 80a40b8 <__kernel_cos+0x228>)
 80a3f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3f1a:	f000 fea1 	bl	80a4c60 <__adddf3>
 80a3f1e:	4642      	mov	r2, r8
 80a3f20:	464b      	mov	r3, r9
 80a3f22:	f001 f84f 	bl	80a4fc4 <__aeabi_dmul>
 80a3f26:	e9cd 0100 	strd	r0, r1, [sp]
 80a3f2a:	2200      	movs	r2, #0
 80a3f2c:	4b64      	ldr	r3, [pc, #400]	; (80a40c0 <__kernel_cos+0x230>)
 80a3f2e:	4640      	mov	r0, r8
 80a3f30:	4649      	mov	r1, r9
 80a3f32:	f001 f847 	bl	80a4fc4 <__aeabi_dmul>
 80a3f36:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a3f3a:	4606      	mov	r6, r0
 80a3f3c:	460f      	mov	r7, r1
 80a3f3e:	4640      	mov	r0, r8
 80a3f40:	4649      	mov	r1, r9
 80a3f42:	f001 f83f 	bl	80a4fc4 <__aeabi_dmul>
 80a3f46:	4652      	mov	r2, sl
 80a3f48:	4680      	mov	r8, r0
 80a3f4a:	4689      	mov	r9, r1
 80a3f4c:	465b      	mov	r3, fp
 80a3f4e:	4628      	mov	r0, r5
 80a3f50:	4621      	mov	r1, r4
 80a3f52:	f001 f837 	bl	80a4fc4 <__aeabi_dmul>
 80a3f56:	4602      	mov	r2, r0
 80a3f58:	460b      	mov	r3, r1
 80a3f5a:	4640      	mov	r0, r8
 80a3f5c:	4649      	mov	r1, r9
 80a3f5e:	f000 fe7d 	bl	80a4c5c <__aeabi_dsub>
 80a3f62:	4602      	mov	r2, r0
 80a3f64:	460b      	mov	r3, r1
 80a3f66:	4630      	mov	r0, r6
 80a3f68:	4639      	mov	r1, r7
 80a3f6a:	f000 fe77 	bl	80a4c5c <__aeabi_dsub>
 80a3f6e:	4602      	mov	r2, r0
 80a3f70:	460b      	mov	r3, r1
 80a3f72:	2000      	movs	r0, #0
 80a3f74:	4953      	ldr	r1, [pc, #332]	; (80a40c4 <__kernel_cos+0x234>)
 80a3f76:	f000 fe71 	bl	80a4c5c <__aeabi_dsub>
 80a3f7a:	b005      	add	sp, #20
 80a3f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3f80:	4602      	mov	r2, r0
 80a3f82:	460b      	mov	r3, r1
 80a3f84:	f001 f81e 	bl	80a4fc4 <__aeabi_dmul>
 80a3f88:	a341      	add	r3, pc, #260	; (adr r3, 80a4090 <__kernel_cos+0x200>)
 80a3f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3f8e:	4680      	mov	r8, r0
 80a3f90:	4689      	mov	r9, r1
 80a3f92:	f001 f817 	bl	80a4fc4 <__aeabi_dmul>
 80a3f96:	a340      	add	r3, pc, #256	; (adr r3, 80a4098 <__kernel_cos+0x208>)
 80a3f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3f9c:	f000 fe60 	bl	80a4c60 <__adddf3>
 80a3fa0:	4642      	mov	r2, r8
 80a3fa2:	464b      	mov	r3, r9
 80a3fa4:	f001 f80e 	bl	80a4fc4 <__aeabi_dmul>
 80a3fa8:	a33d      	add	r3, pc, #244	; (adr r3, 80a40a0 <__kernel_cos+0x210>)
 80a3faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3fae:	f000 fe55 	bl	80a4c5c <__aeabi_dsub>
 80a3fb2:	4642      	mov	r2, r8
 80a3fb4:	464b      	mov	r3, r9
 80a3fb6:	f001 f805 	bl	80a4fc4 <__aeabi_dmul>
 80a3fba:	a33b      	add	r3, pc, #236	; (adr r3, 80a40a8 <__kernel_cos+0x218>)
 80a3fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3fc0:	f000 fe4e 	bl	80a4c60 <__adddf3>
 80a3fc4:	4642      	mov	r2, r8
 80a3fc6:	464b      	mov	r3, r9
 80a3fc8:	f000 fffc 	bl	80a4fc4 <__aeabi_dmul>
 80a3fcc:	a338      	add	r3, pc, #224	; (adr r3, 80a40b0 <__kernel_cos+0x220>)
 80a3fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3fd2:	f000 fe43 	bl	80a4c5c <__aeabi_dsub>
 80a3fd6:	4642      	mov	r2, r8
 80a3fd8:	464b      	mov	r3, r9
 80a3fda:	f000 fff3 	bl	80a4fc4 <__aeabi_dmul>
 80a3fde:	a336      	add	r3, pc, #216	; (adr r3, 80a40b8 <__kernel_cos+0x228>)
 80a3fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3fe4:	f000 fe3c 	bl	80a4c60 <__adddf3>
 80a3fe8:	464b      	mov	r3, r9
 80a3fea:	4642      	mov	r2, r8
 80a3fec:	f000 ffea 	bl	80a4fc4 <__aeabi_dmul>
 80a3ff0:	4b35      	ldr	r3, [pc, #212]	; (80a40c8 <__kernel_cos+0x238>)
 80a3ff2:	e9cd 0100 	strd	r0, r1, [sp]
 80a3ff6:	429e      	cmp	r6, r3
 80a3ff8:	dd97      	ble.n	80a3f2a <__kernel_cos+0x9a>
 80a3ffa:	4b34      	ldr	r3, [pc, #208]	; (80a40cc <__kernel_cos+0x23c>)
 80a3ffc:	2200      	movs	r2, #0
 80a3ffe:	429e      	cmp	r6, r3
 80a4000:	dc38      	bgt.n	80a4074 <__kernel_cos+0x1e4>
 80a4002:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
 80a4006:	2000      	movs	r0, #0
 80a4008:	492e      	ldr	r1, [pc, #184]	; (80a40c4 <__kernel_cos+0x234>)
 80a400a:	4616      	mov	r6, r2
 80a400c:	461f      	mov	r7, r3
 80a400e:	f000 fe25 	bl	80a4c5c <__aeabi_dsub>
 80a4012:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a4016:	2200      	movs	r2, #0
 80a4018:	4b29      	ldr	r3, [pc, #164]	; (80a40c0 <__kernel_cos+0x230>)
 80a401a:	4640      	mov	r0, r8
 80a401c:	4649      	mov	r1, r9
 80a401e:	f000 ffd1 	bl	80a4fc4 <__aeabi_dmul>
 80a4022:	4632      	mov	r2, r6
 80a4024:	463b      	mov	r3, r7
 80a4026:	f000 fe19 	bl	80a4c5c <__aeabi_dsub>
 80a402a:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a402e:	4606      	mov	r6, r0
 80a4030:	460f      	mov	r7, r1
 80a4032:	4640      	mov	r0, r8
 80a4034:	4649      	mov	r1, r9
 80a4036:	f000 ffc5 	bl	80a4fc4 <__aeabi_dmul>
 80a403a:	4652      	mov	r2, sl
 80a403c:	4680      	mov	r8, r0
 80a403e:	4689      	mov	r9, r1
 80a4040:	465b      	mov	r3, fp
 80a4042:	4628      	mov	r0, r5
 80a4044:	4621      	mov	r1, r4
 80a4046:	f000 ffbd 	bl	80a4fc4 <__aeabi_dmul>
 80a404a:	4602      	mov	r2, r0
 80a404c:	460b      	mov	r3, r1
 80a404e:	4640      	mov	r0, r8
 80a4050:	4649      	mov	r1, r9
 80a4052:	f000 fe03 	bl	80a4c5c <__aeabi_dsub>
 80a4056:	4602      	mov	r2, r0
 80a4058:	460b      	mov	r3, r1
 80a405a:	4630      	mov	r0, r6
 80a405c:	4639      	mov	r1, r7
 80a405e:	f000 fdfd 	bl	80a4c5c <__aeabi_dsub>
 80a4062:	4602      	mov	r2, r0
 80a4064:	460b      	mov	r3, r1
 80a4066:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a406a:	f000 fdf7 	bl	80a4c5c <__aeabi_dsub>
 80a406e:	b005      	add	sp, #20
 80a4070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4074:	4b16      	ldr	r3, [pc, #88]	; (80a40d0 <__kernel_cos+0x240>)
 80a4076:	2600      	movs	r6, #0
 80a4078:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80a407c:	4f15      	ldr	r7, [pc, #84]	; (80a40d4 <__kernel_cos+0x244>)
 80a407e:	e7ca      	b.n	80a4016 <__kernel_cos+0x186>
 80a4080:	4910      	ldr	r1, [pc, #64]	; (80a40c4 <__kernel_cos+0x234>)
 80a4082:	2000      	movs	r0, #0
 80a4084:	b005      	add	sp, #20
 80a4086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a408a:	bf00      	nop
 80a408c:	f3af 8000 	nop.w
 80a4090:	be8838d4 	.word	0xbe8838d4
 80a4094:	bda8fae9 	.word	0xbda8fae9
 80a4098:	bdb4b1c4 	.word	0xbdb4b1c4
 80a409c:	3e21ee9e 	.word	0x3e21ee9e
 80a40a0:	809c52ad 	.word	0x809c52ad
 80a40a4:	3e927e4f 	.word	0x3e927e4f
 80a40a8:	19cb1590 	.word	0x19cb1590
 80a40ac:	3efa01a0 	.word	0x3efa01a0
 80a40b0:	16c15177 	.word	0x16c15177
 80a40b4:	3f56c16c 	.word	0x3f56c16c
 80a40b8:	5555554c 	.word	0x5555554c
 80a40bc:	3fa55555 	.word	0x3fa55555
 80a40c0:	3fe00000 	.word	0x3fe00000
 80a40c4:	3ff00000 	.word	0x3ff00000
 80a40c8:	3fd33332 	.word	0x3fd33332
 80a40cc:	3fe90000 	.word	0x3fe90000
 80a40d0:	3fe70000 	.word	0x3fe70000
 80a40d4:	3fd20000 	.word	0x3fd20000

080a40d8 <__kernel_rem_pio2>:
 80a40d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a40dc:	4c7a      	ldr	r4, [pc, #488]	; (80a42c8 <__kernel_rem_pio2+0x1f0>)
 80a40de:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
 80a40e2:	461f      	mov	r7, r3
 80a40e4:	930c      	str	r3, [sp, #48]	; 0x30
 80a40e6:	1ed3      	subs	r3, r2, #3
 80a40e8:	fb84 5403 	smull	r5, r4, r4, r3
 80a40ec:	17db      	asrs	r3, r3, #31
 80a40ee:	ebc3 03a4 	rsb	r3, r3, r4, asr #2
 80a40f2:	9ea6      	ldr	r6, [sp, #664]	; 0x298
 80a40f4:	4c75      	ldr	r4, [pc, #468]	; (80a42cc <__kernel_rem_pio2+0x1f4>)
 80a40f6:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80a40fa:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
 80a40fe:	1c6b      	adds	r3, r5, #1
 80a4100:	4626      	mov	r6, r4
 80a4102:	9409      	str	r4, [sp, #36]	; 0x24
 80a4104:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 80a4108:	1e7c      	subs	r4, r7, #1
 80a410a:	950d      	str	r5, [sp, #52]	; 0x34
 80a410c:	9402      	str	r4, [sp, #8]
 80a410e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80a4112:	1b2d      	subs	r5, r5, r4
 80a4114:	1934      	adds	r4, r6, r4
 80a4116:	9004      	str	r0, [sp, #16]
 80a4118:	910a      	str	r1, [sp, #40]	; 0x28
 80a411a:	9308      	str	r3, [sp, #32]
 80a411c:	d416      	bmi.n	80a414c <__kernel_rem_pio2+0x74>
 80a411e:	442c      	add	r4, r5
 80a4120:	3401      	adds	r4, #1
 80a4122:	ae22      	add	r6, sp, #136	; 0x88
 80a4124:	9fa7      	ldr	r7, [sp, #668]	; 0x29c
 80a4126:	e008      	b.n	80a413a <__kernel_rem_pio2+0x62>
 80a4128:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 80a412c:	f000 fee4 	bl	80a4ef8 <__aeabi_i2d>
 80a4130:	3501      	adds	r5, #1
 80a4132:	42a5      	cmp	r5, r4
 80a4134:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 80a4138:	d008      	beq.n	80a414c <__kernel_rem_pio2+0x74>
 80a413a:	2d00      	cmp	r5, #0
 80a413c:	daf4      	bge.n	80a4128 <__kernel_rem_pio2+0x50>
 80a413e:	3501      	adds	r5, #1
 80a4140:	2000      	movs	r0, #0
 80a4142:	2100      	movs	r1, #0
 80a4144:	42a5      	cmp	r5, r4
 80a4146:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 80a414a:	d1f6      	bne.n	80a413a <__kernel_rem_pio2+0x62>
 80a414c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a414e:	2b00      	cmp	r3, #0
 80a4150:	db31      	blt.n	80a41b6 <__kernel_rem_pio2+0xde>
 80a4152:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a4154:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a4156:	a974      	add	r1, sp, #464	; 0x1d0
 80a4158:	eb01 0bc2 	add.w	fp, r1, r2, lsl #3
 80a415c:	ebc3 7343 	rsb	r3, r3, r3, lsl #29
 80a4160:	9a02      	ldr	r2, [sp, #8]
 80a4162:	a924      	add	r1, sp, #144	; 0x90
 80a4164:	00db      	lsls	r3, r3, #3
 80a4166:	eb01 09c2 	add.w	r9, r1, r2, lsl #3
 80a416a:	9301      	str	r3, [sp, #4]
 80a416c:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
 80a4170:	9b02      	ldr	r3, [sp, #8]
 80a4172:	2b00      	cmp	r3, #0
 80a4174:	f2c0 8190 	blt.w	80a4498 <__kernel_rem_pio2+0x3c0>
 80a4178:	464c      	mov	r4, r9
 80a417a:	9b04      	ldr	r3, [sp, #16]
 80a417c:	2600      	movs	r6, #0
 80a417e:	f1a3 0508 	sub.w	r5, r3, #8
 80a4182:	9b01      	ldr	r3, [sp, #4]
 80a4184:	2700      	movs	r7, #0
 80a4186:	eb09 0803 	add.w	r8, r9, r3
 80a418a:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 80a418e:	e874 0102 	ldrd	r0, r1, [r4], #-8
 80a4192:	f000 ff17 	bl	80a4fc4 <__aeabi_dmul>
 80a4196:	4602      	mov	r2, r0
 80a4198:	460b      	mov	r3, r1
 80a419a:	4630      	mov	r0, r6
 80a419c:	4639      	mov	r1, r7
 80a419e:	f000 fd5f 	bl	80a4c60 <__adddf3>
 80a41a2:	4544      	cmp	r4, r8
 80a41a4:	4606      	mov	r6, r0
 80a41a6:	460f      	mov	r7, r1
 80a41a8:	d1ef      	bne.n	80a418a <__kernel_rem_pio2+0xb2>
 80a41aa:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 80a41ae:	45da      	cmp	sl, fp
 80a41b0:	f109 0908 	add.w	r9, r9, #8
 80a41b4:	d1dc      	bne.n	80a4170 <__kernel_rem_pio2+0x98>
 80a41b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a41b8:	a910      	add	r1, sp, #64	; 0x40
 80a41ba:	461d      	mov	r5, r3
 80a41bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80a41c0:	3b02      	subs	r3, #2
 80a41c2:	009b      	lsls	r3, r3, #2
 80a41c4:	1d1a      	adds	r2, r3, #4
 80a41c6:	440a      	add	r2, r1
 80a41c8:	440b      	add	r3, r1
 80a41ca:	920f      	str	r2, [sp, #60]	; 0x3c
 80a41cc:	930e      	str	r3, [sp, #56]	; 0x38
 80a41ce:	ab9c      	add	r3, sp, #624	; 0x270
 80a41d0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80a41d4:	2d00      	cmp	r5, #0
 80a41d6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80a41da:	dd2b      	ble.n	80a4234 <__kernel_rem_pio2+0x15c>
 80a41dc:	ab9c      	add	r3, sp, #624	; 0x270
 80a41de:	eb03 04c5 	add.w	r4, r3, r5, lsl #3
 80a41e2:	3ca8      	subs	r4, #168	; 0xa8
 80a41e4:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 80a41e8:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80a41ec:	2200      	movs	r2, #0
 80a41ee:	4b38      	ldr	r3, [pc, #224]	; (80a42d0 <__kernel_rem_pio2+0x1f8>)
 80a41f0:	4630      	mov	r0, r6
 80a41f2:	4639      	mov	r1, r7
 80a41f4:	f000 fee6 	bl	80a4fc4 <__aeabi_dmul>
 80a41f8:	f001 f994 	bl	80a5524 <__aeabi_d2iz>
 80a41fc:	f000 fe7c 	bl	80a4ef8 <__aeabi_i2d>
 80a4200:	2200      	movs	r2, #0
 80a4202:	4b34      	ldr	r3, [pc, #208]	; (80a42d4 <__kernel_rem_pio2+0x1fc>)
 80a4204:	4680      	mov	r8, r0
 80a4206:	4689      	mov	r9, r1
 80a4208:	f000 fedc 	bl	80a4fc4 <__aeabi_dmul>
 80a420c:	4602      	mov	r2, r0
 80a420e:	460b      	mov	r3, r1
 80a4210:	4630      	mov	r0, r6
 80a4212:	4639      	mov	r1, r7
 80a4214:	f000 fd22 	bl	80a4c5c <__aeabi_dsub>
 80a4218:	f001 f984 	bl	80a5524 <__aeabi_d2iz>
 80a421c:	e874 2302 	ldrd	r2, r3, [r4], #-8
 80a4220:	f84a 0f04 	str.w	r0, [sl, #4]!
 80a4224:	4649      	mov	r1, r9
 80a4226:	4640      	mov	r0, r8
 80a4228:	f000 fd1a 	bl	80a4c60 <__adddf3>
 80a422c:	455c      	cmp	r4, fp
 80a422e:	4606      	mov	r6, r0
 80a4230:	460f      	mov	r7, r1
 80a4232:	d1db      	bne.n	80a41ec <__kernel_rem_pio2+0x114>
 80a4234:	9c08      	ldr	r4, [sp, #32]
 80a4236:	4630      	mov	r0, r6
 80a4238:	4639      	mov	r1, r7
 80a423a:	4622      	mov	r2, r4
 80a423c:	f000 fc90 	bl	80a4b60 <scalbn>
 80a4240:	2200      	movs	r2, #0
 80a4242:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80a4246:	4606      	mov	r6, r0
 80a4248:	460f      	mov	r7, r1
 80a424a:	f000 febb 	bl	80a4fc4 <__aeabi_dmul>
 80a424e:	f000 fbfb 	bl	80a4a48 <floor>
 80a4252:	2200      	movs	r2, #0
 80a4254:	4b20      	ldr	r3, [pc, #128]	; (80a42d8 <__kernel_rem_pio2+0x200>)
 80a4256:	f000 feb5 	bl	80a4fc4 <__aeabi_dmul>
 80a425a:	4602      	mov	r2, r0
 80a425c:	460b      	mov	r3, r1
 80a425e:	4630      	mov	r0, r6
 80a4260:	4639      	mov	r1, r7
 80a4262:	f000 fcfb 	bl	80a4c5c <__aeabi_dsub>
 80a4266:	460f      	mov	r7, r1
 80a4268:	4606      	mov	r6, r0
 80a426a:	f001 f95b 	bl	80a5524 <__aeabi_d2iz>
 80a426e:	4681      	mov	r9, r0
 80a4270:	f000 fe42 	bl	80a4ef8 <__aeabi_i2d>
 80a4274:	4602      	mov	r2, r0
 80a4276:	460b      	mov	r3, r1
 80a4278:	4630      	mov	r0, r6
 80a427a:	4639      	mov	r1, r7
 80a427c:	f000 fcee 	bl	80a4c5c <__aeabi_dsub>
 80a4280:	2c00      	cmp	r4, #0
 80a4282:	4606      	mov	r6, r0
 80a4284:	460f      	mov	r7, r1
 80a4286:	f340 80ee 	ble.w	80a4466 <__kernel_rem_pio2+0x38e>
 80a428a:	1e68      	subs	r0, r5, #1
 80a428c:	ab10      	add	r3, sp, #64	; 0x40
 80a428e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80a4292:	f1c4 0218 	rsb	r2, r4, #24
 80a4296:	fa43 f102 	asr.w	r1, r3, r2
 80a429a:	fa01 f202 	lsl.w	r2, r1, r2
 80a429e:	1a9b      	subs	r3, r3, r2
 80a42a0:	f1c4 0817 	rsb	r8, r4, #23
 80a42a4:	aa10      	add	r2, sp, #64	; 0x40
 80a42a6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80a42aa:	4489      	add	r9, r1
 80a42ac:	fa43 f808 	asr.w	r8, r3, r8
 80a42b0:	f1b8 0f00 	cmp.w	r8, #0
 80a42b4:	dd3d      	ble.n	80a4332 <__kernel_rem_pio2+0x25a>
 80a42b6:	2d00      	cmp	r5, #0
 80a42b8:	f109 0901 	add.w	r9, r9, #1
 80a42bc:	f340 82d5 	ble.w	80a486a <__kernel_rem_pio2+0x792>
 80a42c0:	2200      	movs	r2, #0
 80a42c2:	4614      	mov	r4, r2
 80a42c4:	a90f      	add	r1, sp, #60	; 0x3c
 80a42c6:	e011      	b.n	80a42ec <__kernel_rem_pio2+0x214>
 80a42c8:	2aaaaaab 	.word	0x2aaaaaab
 80a42cc:	080a6230 	.word	0x080a6230
 80a42d0:	3e700000 	.word	0x3e700000
 80a42d4:	41700000 	.word	0x41700000
 80a42d8:	40200000 	.word	0x40200000
 80a42dc:	f1c3 7080 	rsb	r0, r3, #16777216	; 0x1000000
 80a42e0:	b10b      	cbz	r3, 80a42e6 <__kernel_rem_pio2+0x20e>
 80a42e2:	6008      	str	r0, [r1, #0]
 80a42e4:	2401      	movs	r4, #1
 80a42e6:	3201      	adds	r2, #1
 80a42e8:	4295      	cmp	r5, r2
 80a42ea:	dd0d      	ble.n	80a4308 <__kernel_rem_pio2+0x230>
 80a42ec:	f851 3f04 	ldr.w	r3, [r1, #4]!
 80a42f0:	2c00      	cmp	r4, #0
 80a42f2:	d0f3      	beq.n	80a42dc <__kernel_rem_pio2+0x204>
 80a42f4:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
 80a42f8:	3201      	adds	r2, #1
 80a42fa:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80a42fe:	4295      	cmp	r5, r2
 80a4300:	600b      	str	r3, [r1, #0]
 80a4302:	f04f 0401 	mov.w	r4, #1
 80a4306:	dcf1      	bgt.n	80a42ec <__kernel_rem_pio2+0x214>
 80a4308:	9b08      	ldr	r3, [sp, #32]
 80a430a:	2b00      	cmp	r3, #0
 80a430c:	dd0d      	ble.n	80a432a <__kernel_rem_pio2+0x252>
 80a430e:	2b01      	cmp	r3, #1
 80a4310:	f000 80b1 	beq.w	80a4476 <__kernel_rem_pio2+0x39e>
 80a4314:	2b02      	cmp	r3, #2
 80a4316:	d108      	bne.n	80a432a <__kernel_rem_pio2+0x252>
 80a4318:	1e6a      	subs	r2, r5, #1
 80a431a:	ab10      	add	r3, sp, #64	; 0x40
 80a431c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a4320:	a910      	add	r1, sp, #64	; 0x40
 80a4322:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80a4326:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80a432a:	f1b8 0f02 	cmp.w	r8, #2
 80a432e:	f000 8081 	beq.w	80a4434 <__kernel_rem_pio2+0x35c>
 80a4332:	2200      	movs	r2, #0
 80a4334:	2300      	movs	r3, #0
 80a4336:	4630      	mov	r0, r6
 80a4338:	4639      	mov	r1, r7
 80a433a:	f001 f8ab 	bl	80a5494 <__aeabi_dcmpeq>
 80a433e:	2800      	cmp	r0, #0
 80a4340:	f000 825d 	beq.w	80a47fe <__kernel_rem_pio2+0x726>
 80a4344:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a4346:	f105 3bff 	add.w	fp, r5, #4294967295
 80a434a:	455b      	cmp	r3, fp
 80a434c:	dc10      	bgt.n	80a4370 <__kernel_rem_pio2+0x298>
 80a434e:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
 80a4352:	aa10      	add	r2, sp, #64	; 0x40
 80a4354:	3b01      	subs	r3, #1
 80a4356:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80a4358:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80a435c:	2200      	movs	r2, #0
 80a435e:	f853 1904 	ldr.w	r1, [r3], #-4
 80a4362:	4283      	cmp	r3, r0
 80a4364:	ea42 0201 	orr.w	r2, r2, r1
 80a4368:	d1f9      	bne.n	80a435e <__kernel_rem_pio2+0x286>
 80a436a:	2a00      	cmp	r2, #0
 80a436c:	f040 80b1 	bne.w	80a44d2 <__kernel_rem_pio2+0x3fa>
 80a4370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a4372:	aa10      	add	r2, sp, #64	; 0x40
 80a4374:	3b01      	subs	r3, #1
 80a4376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80a437a:	2b00      	cmp	r3, #0
 80a437c:	f040 8273 	bne.w	80a4866 <__kernel_rem_pio2+0x78e>
 80a4380:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80a4382:	2301      	movs	r3, #1
 80a4384:	f852 1904 	ldr.w	r1, [r2], #-4
 80a4388:	3301      	adds	r3, #1
 80a438a:	2900      	cmp	r1, #0
 80a438c:	d0fa      	beq.n	80a4384 <__kernel_rem_pio2+0x2ac>
 80a438e:	18e9      	adds	r1, r5, r3
 80a4390:	1c6a      	adds	r2, r5, #1
 80a4392:	428a      	cmp	r2, r1
 80a4394:	910b      	str	r1, [sp, #44]	; 0x2c
 80a4396:	dc4b      	bgt.n	80a4430 <__kernel_rem_pio2+0x358>
 80a4398:	990d      	ldr	r1, [sp, #52]	; 0x34
 80a439a:	980c      	ldr	r0, [sp, #48]	; 0x30
 80a439c:	1851      	adds	r1, r2, r1
 80a439e:	00db      	lsls	r3, r3, #3
 80a43a0:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80a43a4:	9305      	str	r3, [sp, #20]
 80a43a6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80a43a8:	4405      	add	r5, r0
 80a43aa:	3901      	subs	r1, #1
 80a43ac:	00e8      	lsls	r0, r5, #3
 80a43ae:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
 80a43b2:	ab24      	add	r3, sp, #144	; 0x90
 80a43b4:	00d2      	lsls	r2, r2, #3
 80a43b6:	eb03 0b00 	add.w	fp, r3, r0
 80a43ba:	ab74      	add	r3, sp, #464	; 0x1d0
 80a43bc:	4413      	add	r3, r2
 80a43be:	9301      	str	r3, [sp, #4]
 80a43c0:	f1a2 0308 	sub.w	r3, r2, #8
 80a43c4:	9006      	str	r0, [sp, #24]
 80a43c6:	9307      	str	r3, [sp, #28]
 80a43c8:	f04f 0900 	mov.w	r9, #0
 80a43cc:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 80a43d0:	f000 fd92 	bl	80a4ef8 <__aeabi_i2d>
 80a43d4:	9b02      	ldr	r3, [sp, #8]
 80a43d6:	e8eb 0102 	strd	r0, r1, [fp], #8
 80a43da:	2b00      	cmp	r3, #0
 80a43dc:	f04f 0600 	mov.w	r6, #0
 80a43e0:	f04f 0700 	mov.w	r7, #0
 80a43e4:	db1b      	blt.n	80a441e <__kernel_rem_pio2+0x346>
 80a43e6:	9b06      	ldr	r3, [sp, #24]
 80a43e8:	eb03 0409 	add.w	r4, r3, r9
 80a43ec:	9b07      	ldr	r3, [sp, #28]
 80a43ee:	eb09 0803 	add.w	r8, r9, r3
 80a43f2:	ab24      	add	r3, sp, #144	; 0x90
 80a43f4:	441c      	add	r4, r3
 80a43f6:	4498      	add	r8, r3
 80a43f8:	9b04      	ldr	r3, [sp, #16]
 80a43fa:	f1a3 0508 	sub.w	r5, r3, #8
 80a43fe:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 80a4402:	e874 0102 	ldrd	r0, r1, [r4], #-8
 80a4406:	f000 fddd 	bl	80a4fc4 <__aeabi_dmul>
 80a440a:	4602      	mov	r2, r0
 80a440c:	460b      	mov	r3, r1
 80a440e:	4630      	mov	r0, r6
 80a4410:	4639      	mov	r1, r7
 80a4412:	f000 fc25 	bl	80a4c60 <__adddf3>
 80a4416:	4544      	cmp	r4, r8
 80a4418:	4606      	mov	r6, r0
 80a441a:	460f      	mov	r7, r1
 80a441c:	d1ef      	bne.n	80a43fe <__kernel_rem_pio2+0x326>
 80a441e:	9b01      	ldr	r3, [sp, #4]
 80a4420:	f109 0908 	add.w	r9, r9, #8
 80a4424:	e8e3 6702 	strd	r6, r7, [r3], #8
 80a4428:	9301      	str	r3, [sp, #4]
 80a442a:	9b05      	ldr	r3, [sp, #20]
 80a442c:	4599      	cmp	r9, r3
 80a442e:	d1cd      	bne.n	80a43cc <__kernel_rem_pio2+0x2f4>
 80a4430:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80a4432:	e6cc      	b.n	80a41ce <__kernel_rem_pio2+0xf6>
 80a4434:	4632      	mov	r2, r6
 80a4436:	463b      	mov	r3, r7
 80a4438:	2000      	movs	r0, #0
 80a443a:	49b1      	ldr	r1, [pc, #708]	; (80a4700 <__kernel_rem_pio2+0x628>)
 80a443c:	f000 fc0e 	bl	80a4c5c <__aeabi_dsub>
 80a4440:	4606      	mov	r6, r0
 80a4442:	460f      	mov	r7, r1
 80a4444:	2c00      	cmp	r4, #0
 80a4446:	f43f af74 	beq.w	80a4332 <__kernel_rem_pio2+0x25a>
 80a444a:	9a08      	ldr	r2, [sp, #32]
 80a444c:	2000      	movs	r0, #0
 80a444e:	49ac      	ldr	r1, [pc, #688]	; (80a4700 <__kernel_rem_pio2+0x628>)
 80a4450:	f000 fb86 	bl	80a4b60 <scalbn>
 80a4454:	4602      	mov	r2, r0
 80a4456:	460b      	mov	r3, r1
 80a4458:	4630      	mov	r0, r6
 80a445a:	4639      	mov	r1, r7
 80a445c:	f000 fbfe 	bl	80a4c5c <__aeabi_dsub>
 80a4460:	4606      	mov	r6, r0
 80a4462:	460f      	mov	r7, r1
 80a4464:	e765      	b.n	80a4332 <__kernel_rem_pio2+0x25a>
 80a4466:	d110      	bne.n	80a448a <__kernel_rem_pio2+0x3b2>
 80a4468:	1e6b      	subs	r3, r5, #1
 80a446a:	aa10      	add	r2, sp, #64	; 0x40
 80a446c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80a4470:	ea4f 58e3 	mov.w	r8, r3, asr #23
 80a4474:	e71c      	b.n	80a42b0 <__kernel_rem_pio2+0x1d8>
 80a4476:	1e6a      	subs	r2, r5, #1
 80a4478:	ab10      	add	r3, sp, #64	; 0x40
 80a447a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a447e:	a910      	add	r1, sp, #64	; 0x40
 80a4480:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80a4484:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80a4488:	e74f      	b.n	80a432a <__kernel_rem_pio2+0x252>
 80a448a:	2200      	movs	r2, #0
 80a448c:	4b9d      	ldr	r3, [pc, #628]	; (80a4704 <__kernel_rem_pio2+0x62c>)
 80a448e:	f001 f81f 	bl	80a54d0 <__aeabi_dcmpge>
 80a4492:	b958      	cbnz	r0, 80a44ac <__kernel_rem_pio2+0x3d4>
 80a4494:	4680      	mov	r8, r0
 80a4496:	e74c      	b.n	80a4332 <__kernel_rem_pio2+0x25a>
 80a4498:	2600      	movs	r6, #0
 80a449a:	2700      	movs	r7, #0
 80a449c:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 80a44a0:	45da      	cmp	sl, fp
 80a44a2:	f109 0908 	add.w	r9, r9, #8
 80a44a6:	f47f ae63 	bne.w	80a4170 <__kernel_rem_pio2+0x98>
 80a44aa:	e684      	b.n	80a41b6 <__kernel_rem_pio2+0xde>
 80a44ac:	2d00      	cmp	r5, #0
 80a44ae:	f109 0901 	add.w	r9, r9, #1
 80a44b2:	bfc8      	it	gt
 80a44b4:	f04f 0802 	movgt.w	r8, #2
 80a44b8:	f73f af02 	bgt.w	80a42c0 <__kernel_rem_pio2+0x1e8>
 80a44bc:	4632      	mov	r2, r6
 80a44be:	463b      	mov	r3, r7
 80a44c0:	2000      	movs	r0, #0
 80a44c2:	498f      	ldr	r1, [pc, #572]	; (80a4700 <__kernel_rem_pio2+0x628>)
 80a44c4:	f000 fbca 	bl	80a4c5c <__aeabi_dsub>
 80a44c8:	f04f 0802 	mov.w	r8, #2
 80a44cc:	4606      	mov	r6, r0
 80a44ce:	460f      	mov	r7, r1
 80a44d0:	e72f      	b.n	80a4332 <__kernel_rem_pio2+0x25a>
 80a44d2:	9a08      	ldr	r2, [sp, #32]
 80a44d4:	ab10      	add	r3, sp, #64	; 0x40
 80a44d6:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80a44da:	3a18      	subs	r2, #24
 80a44dc:	f8cd 9014 	str.w	r9, [sp, #20]
 80a44e0:	f8cd 8004 	str.w	r8, [sp, #4]
 80a44e4:	9208      	str	r2, [sp, #32]
 80a44e6:	b96b      	cbnz	r3, 80a4504 <__kernel_rem_pio2+0x42c>
 80a44e8:	f10b 4380 	add.w	r3, fp, #1073741824	; 0x40000000
 80a44ec:	3b01      	subs	r3, #1
 80a44ee:	a910      	add	r1, sp, #64	; 0x40
 80a44f0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80a44f4:	f853 1904 	ldr.w	r1, [r3], #-4
 80a44f8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80a44fc:	3a18      	subs	r2, #24
 80a44fe:	2900      	cmp	r1, #0
 80a4500:	d0f8      	beq.n	80a44f4 <__kernel_rem_pio2+0x41c>
 80a4502:	9208      	str	r2, [sp, #32]
 80a4504:	9a08      	ldr	r2, [sp, #32]
 80a4506:	2000      	movs	r0, #0
 80a4508:	497d      	ldr	r1, [pc, #500]	; (80a4700 <__kernel_rem_pio2+0x628>)
 80a450a:	f000 fb29 	bl	80a4b60 <scalbn>
 80a450e:	f1bb 0f00 	cmp.w	fp, #0
 80a4512:	4604      	mov	r4, r0
 80a4514:	460d      	mov	r5, r1
 80a4516:	f2c0 81b8 	blt.w	80a488a <__kernel_rem_pio2+0x7b2>
 80a451a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80a451e:	f50d 78e8 	add.w	r8, sp, #464	; 0x1d0
 80a4522:	aa10      	add	r2, sp, #64	; 0x40
 80a4524:	eb02 068b 	add.w	r6, r2, fp, lsl #2
 80a4528:	eb08 0903 	add.w	r9, r8, r3
 80a452c:	9304      	str	r3, [sp, #16]
 80a452e:	3604      	adds	r6, #4
 80a4530:	f109 0708 	add.w	r7, r9, #8
 80a4534:	f856 0d04 	ldr.w	r0, [r6, #-4]!
 80a4538:	f000 fcde 	bl	80a4ef8 <__aeabi_i2d>
 80a453c:	4622      	mov	r2, r4
 80a453e:	462b      	mov	r3, r5
 80a4540:	f000 fd40 	bl	80a4fc4 <__aeabi_dmul>
 80a4544:	2200      	movs	r2, #0
 80a4546:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80a454a:	4b6f      	ldr	r3, [pc, #444]	; (80a4708 <__kernel_rem_pio2+0x630>)
 80a454c:	4620      	mov	r0, r4
 80a454e:	4629      	mov	r1, r5
 80a4550:	f000 fd38 	bl	80a4fc4 <__aeabi_dmul>
 80a4554:	45b8      	cmp	r8, r7
 80a4556:	4604      	mov	r4, r0
 80a4558:	460d      	mov	r5, r1
 80a455a:	d1eb      	bne.n	80a4534 <__kernel_rem_pio2+0x45c>
 80a455c:	464b      	mov	r3, r9
 80a455e:	f8cd b018 	str.w	fp, [sp, #24]
 80a4562:	469b      	mov	fp, r3
 80a4564:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
 80a4568:	f8cd a008 	str.w	sl, [sp, #8]
 80a456c:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80a4570:	f04f 0900 	mov.w	r9, #0
 80a4574:	f1ba 0f00 	cmp.w	sl, #0
 80a4578:	f2c0 8128 	blt.w	80a47cc <__kernel_rem_pio2+0x6f4>
 80a457c:	a35e      	add	r3, pc, #376	; (adr r3, 80a46f8 <__kernel_rem_pio2+0x620>)
 80a457e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4582:	f8df 8188 	ldr.w	r8, [pc, #392]	; 80a470c <__kernel_rem_pio2+0x634>
 80a4586:	465d      	mov	r5, fp
 80a4588:	2600      	movs	r6, #0
 80a458a:	2700      	movs	r7, #0
 80a458c:	2400      	movs	r4, #0
 80a458e:	e003      	b.n	80a4598 <__kernel_rem_pio2+0x4c0>
 80a4590:	45a1      	cmp	r9, r4
 80a4592:	db10      	blt.n	80a45b6 <__kernel_rem_pio2+0x4de>
 80a4594:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 80a4598:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80a459c:	f000 fd12 	bl	80a4fc4 <__aeabi_dmul>
 80a45a0:	4602      	mov	r2, r0
 80a45a2:	460b      	mov	r3, r1
 80a45a4:	4630      	mov	r0, r6
 80a45a6:	4639      	mov	r1, r7
 80a45a8:	f000 fb5a 	bl	80a4c60 <__adddf3>
 80a45ac:	3401      	adds	r4, #1
 80a45ae:	45a2      	cmp	sl, r4
 80a45b0:	4606      	mov	r6, r0
 80a45b2:	460f      	mov	r7, r1
 80a45b4:	daec      	bge.n	80a4590 <__kernel_rem_pio2+0x4b8>
 80a45b6:	9b02      	ldr	r3, [sp, #8]
 80a45b8:	f1ab 0b08 	sub.w	fp, fp, #8
 80a45bc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80a45c0:	e9c3 6700 	strd	r6, r7, [r3]
 80a45c4:	ab72      	add	r3, sp, #456	; 0x1c8
 80a45c6:	455b      	cmp	r3, fp
 80a45c8:	f109 0901 	add.w	r9, r9, #1
 80a45cc:	d1d2      	bne.n	80a4574 <__kernel_rem_pio2+0x49c>
 80a45ce:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80a45d0:	f8dd b018 	ldr.w	fp, [sp, #24]
 80a45d4:	f8dd a008 	ldr.w	sl, [sp, #8]
 80a45d8:	2b03      	cmp	r3, #3
 80a45da:	f200 8083 	bhi.w	80a46e4 <__kernel_rem_pio2+0x60c>
 80a45de:	e8df f013 	tbh	[pc, r3, lsl #1]
 80a45e2:	00d3      	.short	0x00d3
 80a45e4:	00970097 	.word	0x00970097
 80a45e8:	0004      	.short	0x0004
 80a45ea:	f1bb 0f00 	cmp.w	fp, #0
 80a45ee:	f340 8156 	ble.w	80a489e <__kernel_rem_pio2+0x7c6>
 80a45f2:	9b04      	ldr	r3, [sp, #16]
 80a45f4:	f8cd b008 	str.w	fp, [sp, #8]
 80a45f8:	4453      	add	r3, sl
 80a45fa:	4698      	mov	r8, r3
 80a45fc:	e9d3 6700 	ldrd	r6, r7, [r3]
 80a4600:	46d3      	mov	fp, sl
 80a4602:	e958 9a02 	ldrd	r9, sl, [r8, #-8]
 80a4606:	4632      	mov	r2, r6
 80a4608:	463b      	mov	r3, r7
 80a460a:	4648      	mov	r0, r9
 80a460c:	4651      	mov	r1, sl
 80a460e:	f000 fb27 	bl	80a4c60 <__adddf3>
 80a4612:	4604      	mov	r4, r0
 80a4614:	460d      	mov	r5, r1
 80a4616:	4602      	mov	r2, r0
 80a4618:	460b      	mov	r3, r1
 80a461a:	4648      	mov	r0, r9
 80a461c:	4651      	mov	r1, sl
 80a461e:	f000 fb1d 	bl	80a4c5c <__aeabi_dsub>
 80a4622:	4632      	mov	r2, r6
 80a4624:	463b      	mov	r3, r7
 80a4626:	f000 fb1b 	bl	80a4c60 <__adddf3>
 80a462a:	e9c8 0100 	strd	r0, r1, [r8]
 80a462e:	e968 4502 	strd	r4, r5, [r8, #-8]!
 80a4632:	45c3      	cmp	fp, r8
 80a4634:	4626      	mov	r6, r4
 80a4636:	462f      	mov	r7, r5
 80a4638:	d1e3      	bne.n	80a4602 <__kernel_rem_pio2+0x52a>
 80a463a:	46da      	mov	sl, fp
 80a463c:	f8dd b008 	ldr.w	fp, [sp, #8]
 80a4640:	f1bb 0f01 	cmp.w	fp, #1
 80a4644:	f340 812b 	ble.w	80a489e <__kernel_rem_pio2+0x7c6>
 80a4648:	9b04      	ldr	r3, [sp, #16]
 80a464a:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 80a464e:	4453      	add	r3, sl
 80a4650:	4698      	mov	r8, r3
 80a4652:	e9d3 6700 	ldrd	r6, r7, [r3]
 80a4656:	4699      	mov	r9, r3
 80a4658:	e959 3402 	ldrd	r3, r4, [r9, #-8]
 80a465c:	4630      	mov	r0, r6
 80a465e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80a4662:	461a      	mov	r2, r3
 80a4664:	4639      	mov	r1, r7
 80a4666:	4623      	mov	r3, r4
 80a4668:	f000 fafa 	bl	80a4c60 <__adddf3>
 80a466c:	4604      	mov	r4, r0
 80a466e:	460d      	mov	r5, r1
 80a4670:	4602      	mov	r2, r0
 80a4672:	460b      	mov	r3, r1
 80a4674:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a4678:	f000 faf0 	bl	80a4c5c <__aeabi_dsub>
 80a467c:	4632      	mov	r2, r6
 80a467e:	463b      	mov	r3, r7
 80a4680:	f000 faee 	bl	80a4c60 <__adddf3>
 80a4684:	e9c9 0100 	strd	r0, r1, [r9]
 80a4688:	e969 4502 	strd	r4, r5, [r9, #-8]!
 80a468c:	45cb      	cmp	fp, r9
 80a468e:	4626      	mov	r6, r4
 80a4690:	462f      	mov	r7, r5
 80a4692:	d1e1      	bne.n	80a4658 <__kernel_rem_pio2+0x580>
 80a4694:	2300      	movs	r3, #0
 80a4696:	461d      	mov	r5, r3
 80a4698:	f108 0808 	add.w	r8, r8, #8
 80a469c:	ac50      	add	r4, sp, #320	; 0x140
 80a469e:	4618      	mov	r0, r3
 80a46a0:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 80a46a4:	4629      	mov	r1, r5
 80a46a6:	f000 fadb 	bl	80a4c60 <__adddf3>
 80a46aa:	4544      	cmp	r4, r8
 80a46ac:	4603      	mov	r3, r0
 80a46ae:	460d      	mov	r5, r1
 80a46b0:	d1f5      	bne.n	80a469e <__kernel_rem_pio2+0x5c6>
 80a46b2:	9a01      	ldr	r2, [sp, #4]
 80a46b4:	2a00      	cmp	r2, #0
 80a46b6:	f000 80da 	beq.w	80a486e <__kernel_rem_pio2+0x796>
 80a46ba:	f8da 4004 	ldr.w	r4, [sl, #4]
 80a46be:	f8da 200c 	ldr.w	r2, [sl, #12]
 80a46c2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80a46c4:	f8da 1000 	ldr.w	r1, [sl]
 80a46c8:	f8da 0008 	ldr.w	r0, [sl, #8]
 80a46cc:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 80a46d0:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 80a46d4:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80a46d8:	617d      	str	r5, [r7, #20]
 80a46da:	613b      	str	r3, [r7, #16]
 80a46dc:	607c      	str	r4, [r7, #4]
 80a46de:	60fa      	str	r2, [r7, #12]
 80a46e0:	6039      	str	r1, [r7, #0]
 80a46e2:	60b8      	str	r0, [r7, #8]
 80a46e4:	9b05      	ldr	r3, [sp, #20]
 80a46e6:	f003 0007 	and.w	r0, r3, #7
 80a46ea:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
 80a46ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a46f2:	bf00      	nop
 80a46f4:	f3af 8000 	nop.w
 80a46f8:	40000000 	.word	0x40000000
 80a46fc:	3ff921fb 	.word	0x3ff921fb
 80a4700:	3ff00000 	.word	0x3ff00000
 80a4704:	3fe00000 	.word	0x3fe00000
 80a4708:	3e700000 	.word	0x3e700000
 80a470c:	080a6240 	.word	0x080a6240
 80a4710:	2400      	movs	r4, #0
 80a4712:	4621      	mov	r1, r4
 80a4714:	9d04      	ldr	r5, [sp, #16]
 80a4716:	3508      	adds	r5, #8
 80a4718:	4455      	add	r5, sl
 80a471a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80a471e:	4620      	mov	r0, r4
 80a4720:	f000 fa9e 	bl	80a4c60 <__adddf3>
 80a4724:	4555      	cmp	r5, sl
 80a4726:	4604      	mov	r4, r0
 80a4728:	d1f7      	bne.n	80a471a <__kernel_rem_pio2+0x642>
 80a472a:	9b01      	ldr	r3, [sp, #4]
 80a472c:	2b00      	cmp	r3, #0
 80a472e:	d050      	beq.n	80a47d2 <__kernel_rem_pio2+0x6fa>
 80a4730:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80a4732:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 80a4736:	460b      	mov	r3, r1
 80a4738:	e9da 0100 	ldrd	r0, r1, [sl]
 80a473c:	e887 0030 	stmia.w	r7, {r4, r5}
 80a4740:	4622      	mov	r2, r4
 80a4742:	f000 fa8b 	bl	80a4c5c <__aeabi_dsub>
 80a4746:	f1bb 0f00 	cmp.w	fp, #0
 80a474a:	4603      	mov	r3, r0
 80a474c:	460d      	mov	r5, r1
 80a474e:	dd0d      	ble.n	80a476c <__kernel_rem_pio2+0x694>
 80a4750:	2401      	movs	r4, #1
 80a4752:	4618      	mov	r0, r3
 80a4754:	e9fa 2302 	ldrd	r2, r3, [sl, #8]!
 80a4758:	4629      	mov	r1, r5
 80a475a:	f000 fa81 	bl	80a4c60 <__adddf3>
 80a475e:	3401      	adds	r4, #1
 80a4760:	45a3      	cmp	fp, r4
 80a4762:	4603      	mov	r3, r0
 80a4764:	460d      	mov	r5, r1
 80a4766:	daf4      	bge.n	80a4752 <__kernel_rem_pio2+0x67a>
 80a4768:	9a01      	ldr	r2, [sp, #4]
 80a476a:	b10a      	cbz	r2, 80a4770 <__kernel_rem_pio2+0x698>
 80a476c:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 80a4770:	4618      	mov	r0, r3
 80a4772:	4629      	mov	r1, r5
 80a4774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a4776:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80a477a:	9b05      	ldr	r3, [sp, #20]
 80a477c:	f003 0007 	and.w	r0, r3, #7
 80a4780:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
 80a4784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4788:	2300      	movs	r3, #0
 80a478a:	461c      	mov	r4, r3
 80a478c:	9a04      	ldr	r2, [sp, #16]
 80a478e:	3208      	adds	r2, #8
 80a4790:	4492      	add	sl, r2
 80a4792:	4618      	mov	r0, r3
 80a4794:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80a4798:	4621      	mov	r1, r4
 80a479a:	f000 fa61 	bl	80a4c60 <__adddf3>
 80a479e:	f10b 3bff 	add.w	fp, fp, #4294967295
 80a47a2:	f1bb 3fff 	cmp.w	fp, #4294967295
 80a47a6:	4603      	mov	r3, r0
 80a47a8:	460c      	mov	r4, r1
 80a47aa:	d1f2      	bne.n	80a4792 <__kernel_rem_pio2+0x6ba>
 80a47ac:	9a01      	ldr	r2, [sp, #4]
 80a47ae:	b10a      	cbz	r2, 80a47b4 <__kernel_rem_pio2+0x6dc>
 80a47b0:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 80a47b4:	4618      	mov	r0, r3
 80a47b6:	4621      	mov	r1, r4
 80a47b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a47ba:	e9c3 0100 	strd	r0, r1, [r3]
 80a47be:	9b05      	ldr	r3, [sp, #20]
 80a47c0:	f003 0007 	and.w	r0, r3, #7
 80a47c4:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
 80a47c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a47cc:	2600      	movs	r6, #0
 80a47ce:	2700      	movs	r7, #0
 80a47d0:	e6f1      	b.n	80a45b6 <__kernel_rem_pio2+0x4de>
 80a47d2:	4626      	mov	r6, r4
 80a47d4:	460f      	mov	r7, r1
 80a47d6:	4622      	mov	r2, r4
 80a47d8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80a47da:	460b      	mov	r3, r1
 80a47dc:	e9da 0100 	ldrd	r0, r1, [sl]
 80a47e0:	e9c4 6700 	strd	r6, r7, [r4]
 80a47e4:	f000 fa3a 	bl	80a4c5c <__aeabi_dsub>
 80a47e8:	f1bb 0f00 	cmp.w	fp, #0
 80a47ec:	4603      	mov	r3, r0
 80a47ee:	460d      	mov	r5, r1
 80a47f0:	dcae      	bgt.n	80a4750 <__kernel_rem_pio2+0x678>
 80a47f2:	4618      	mov	r0, r3
 80a47f4:	4629      	mov	r1, r5
 80a47f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a47f8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80a47fc:	e7bd      	b.n	80a477a <__kernel_rem_pio2+0x6a2>
 80a47fe:	9b08      	ldr	r3, [sp, #32]
 80a4800:	4630      	mov	r0, r6
 80a4802:	425a      	negs	r2, r3
 80a4804:	4639      	mov	r1, r7
 80a4806:	f8cd 9014 	str.w	r9, [sp, #20]
 80a480a:	f8cd 8004 	str.w	r8, [sp, #4]
 80a480e:	f000 f9a7 	bl	80a4b60 <scalbn>
 80a4812:	2200      	movs	r2, #0
 80a4814:	4b2c      	ldr	r3, [pc, #176]	; (80a48c8 <__kernel_rem_pio2+0x7f0>)
 80a4816:	4606      	mov	r6, r0
 80a4818:	460f      	mov	r7, r1
 80a481a:	f000 fe59 	bl	80a54d0 <__aeabi_dcmpge>
 80a481e:	2800      	cmp	r0, #0
 80a4820:	d040      	beq.n	80a48a4 <__kernel_rem_pio2+0x7cc>
 80a4822:	2200      	movs	r2, #0
 80a4824:	4b29      	ldr	r3, [pc, #164]	; (80a48cc <__kernel_rem_pio2+0x7f4>)
 80a4826:	4630      	mov	r0, r6
 80a4828:	4639      	mov	r1, r7
 80a482a:	f000 fbcb 	bl	80a4fc4 <__aeabi_dmul>
 80a482e:	f000 fe79 	bl	80a5524 <__aeabi_d2iz>
 80a4832:	4604      	mov	r4, r0
 80a4834:	f000 fb60 	bl	80a4ef8 <__aeabi_i2d>
 80a4838:	2200      	movs	r2, #0
 80a483a:	4b23      	ldr	r3, [pc, #140]	; (80a48c8 <__kernel_rem_pio2+0x7f0>)
 80a483c:	f000 fbc2 	bl	80a4fc4 <__aeabi_dmul>
 80a4840:	460b      	mov	r3, r1
 80a4842:	4602      	mov	r2, r0
 80a4844:	4639      	mov	r1, r7
 80a4846:	4630      	mov	r0, r6
 80a4848:	f000 fa08 	bl	80a4c5c <__aeabi_dsub>
 80a484c:	f000 fe6a 	bl	80a5524 <__aeabi_d2iz>
 80a4850:	9b08      	ldr	r3, [sp, #32]
 80a4852:	f105 0b01 	add.w	fp, r5, #1
 80a4856:	3318      	adds	r3, #24
 80a4858:	9308      	str	r3, [sp, #32]
 80a485a:	ab10      	add	r3, sp, #64	; 0x40
 80a485c:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80a4860:	f843 402b 	str.w	r4, [r3, fp, lsl #2]
 80a4864:	e64e      	b.n	80a4504 <__kernel_rem_pio2+0x42c>
 80a4866:	2301      	movs	r3, #1
 80a4868:	e591      	b.n	80a438e <__kernel_rem_pio2+0x2b6>
 80a486a:	2400      	movs	r4, #0
 80a486c:	e54c      	b.n	80a4308 <__kernel_rem_pio2+0x230>
 80a486e:	4618      	mov	r0, r3
 80a4870:	e9da 6700 	ldrd	r6, r7, [sl]
 80a4874:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 80a4878:	4629      	mov	r1, r5
 80a487a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80a487c:	e9c5 6700 	strd	r6, r7, [r5]
 80a4880:	e9c5 0104 	strd	r0, r1, [r5, #16]
 80a4884:	e9c5 2302 	strd	r2, r3, [r5, #8]
 80a4888:	e72c      	b.n	80a46e4 <__kernel_rem_pio2+0x60c>
 80a488a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80a488c:	2b03      	cmp	r3, #3
 80a488e:	f63f af29 	bhi.w	80a46e4 <__kernel_rem_pio2+0x60c>
 80a4892:	e8df f003 	tbb	[pc, r3]
 80a4896:	1015      	.short	0x1015
 80a4898:	0210      	.short	0x0210
 80a489a:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
 80a489e:	2300      	movs	r3, #0
 80a48a0:	461d      	mov	r5, r3
 80a48a2:	e706      	b.n	80a46b2 <__kernel_rem_pio2+0x5da>
 80a48a4:	4630      	mov	r0, r6
 80a48a6:	4639      	mov	r1, r7
 80a48a8:	f000 fe3c 	bl	80a5524 <__aeabi_d2iz>
 80a48ac:	ab10      	add	r3, sp, #64	; 0x40
 80a48ae:	46ab      	mov	fp, r5
 80a48b0:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80a48b4:	e626      	b.n	80a4504 <__kernel_rem_pio2+0x42c>
 80a48b6:	2400      	movs	r4, #0
 80a48b8:	4621      	mov	r1, r4
 80a48ba:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
 80a48be:	e734      	b.n	80a472a <__kernel_rem_pio2+0x652>
 80a48c0:	2300      	movs	r3, #0
 80a48c2:	461c      	mov	r4, r3
 80a48c4:	e772      	b.n	80a47ac <__kernel_rem_pio2+0x6d4>
 80a48c6:	bf00      	nop
 80a48c8:	41700000 	.word	0x41700000
 80a48cc:	3e700000 	.word	0x3e700000

080a48d0 <__kernel_sin>:
 80a48d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a48d4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80a48d8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80a48dc:	b085      	sub	sp, #20
 80a48de:	460c      	mov	r4, r1
 80a48e0:	4690      	mov	r8, r2
 80a48e2:	4699      	mov	r9, r3
 80a48e4:	4605      	mov	r5, r0
 80a48e6:	da04      	bge.n	80a48f2 <__kernel_sin+0x22>
 80a48e8:	f000 fe1c 	bl	80a5524 <__aeabi_d2iz>
 80a48ec:	2800      	cmp	r0, #0
 80a48ee:	f000 8085 	beq.w	80a49fc <__kernel_sin+0x12c>
 80a48f2:	462a      	mov	r2, r5
 80a48f4:	4623      	mov	r3, r4
 80a48f6:	4628      	mov	r0, r5
 80a48f8:	4621      	mov	r1, r4
 80a48fa:	f000 fb63 	bl	80a4fc4 <__aeabi_dmul>
 80a48fe:	4606      	mov	r6, r0
 80a4900:	460f      	mov	r7, r1
 80a4902:	4602      	mov	r2, r0
 80a4904:	460b      	mov	r3, r1
 80a4906:	4628      	mov	r0, r5
 80a4908:	4621      	mov	r1, r4
 80a490a:	f000 fb5b 	bl	80a4fc4 <__aeabi_dmul>
 80a490e:	a33e      	add	r3, pc, #248	; (adr r3, 80a4a08 <__kernel_sin+0x138>)
 80a4910:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4914:	4682      	mov	sl, r0
 80a4916:	468b      	mov	fp, r1
 80a4918:	4630      	mov	r0, r6
 80a491a:	4639      	mov	r1, r7
 80a491c:	f000 fb52 	bl	80a4fc4 <__aeabi_dmul>
 80a4920:	a33b      	add	r3, pc, #236	; (adr r3, 80a4a10 <__kernel_sin+0x140>)
 80a4922:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4926:	f000 f999 	bl	80a4c5c <__aeabi_dsub>
 80a492a:	4632      	mov	r2, r6
 80a492c:	463b      	mov	r3, r7
 80a492e:	f000 fb49 	bl	80a4fc4 <__aeabi_dmul>
 80a4932:	a339      	add	r3, pc, #228	; (adr r3, 80a4a18 <__kernel_sin+0x148>)
 80a4934:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4938:	f000 f992 	bl	80a4c60 <__adddf3>
 80a493c:	4632      	mov	r2, r6
 80a493e:	463b      	mov	r3, r7
 80a4940:	f000 fb40 	bl	80a4fc4 <__aeabi_dmul>
 80a4944:	a336      	add	r3, pc, #216	; (adr r3, 80a4a20 <__kernel_sin+0x150>)
 80a4946:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a494a:	f000 f987 	bl	80a4c5c <__aeabi_dsub>
 80a494e:	4632      	mov	r2, r6
 80a4950:	463b      	mov	r3, r7
 80a4952:	f000 fb37 	bl	80a4fc4 <__aeabi_dmul>
 80a4956:	a334      	add	r3, pc, #208	; (adr r3, 80a4a28 <__kernel_sin+0x158>)
 80a4958:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a495c:	f000 f980 	bl	80a4c60 <__adddf3>
 80a4960:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80a4962:	e9cd 0100 	strd	r0, r1, [sp]
 80a4966:	b39b      	cbz	r3, 80a49d0 <__kernel_sin+0x100>
 80a4968:	2200      	movs	r2, #0
 80a496a:	4b33      	ldr	r3, [pc, #204]	; (80a4a38 <__kernel_sin+0x168>)
 80a496c:	4640      	mov	r0, r8
 80a496e:	4649      	mov	r1, r9
 80a4970:	f000 fb28 	bl	80a4fc4 <__aeabi_dmul>
 80a4974:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a4978:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a497c:	4650      	mov	r0, sl
 80a497e:	4659      	mov	r1, fp
 80a4980:	f000 fb20 	bl	80a4fc4 <__aeabi_dmul>
 80a4984:	4602      	mov	r2, r0
 80a4986:	460b      	mov	r3, r1
 80a4988:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a498c:	f000 f966 	bl	80a4c5c <__aeabi_dsub>
 80a4990:	4632      	mov	r2, r6
 80a4992:	463b      	mov	r3, r7
 80a4994:	f000 fb16 	bl	80a4fc4 <__aeabi_dmul>
 80a4998:	4642      	mov	r2, r8
 80a499a:	464b      	mov	r3, r9
 80a499c:	f000 f95e 	bl	80a4c5c <__aeabi_dsub>
 80a49a0:	a323      	add	r3, pc, #140	; (adr r3, 80a4a30 <__kernel_sin+0x160>)
 80a49a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a49a6:	4606      	mov	r6, r0
 80a49a8:	460f      	mov	r7, r1
 80a49aa:	4650      	mov	r0, sl
 80a49ac:	4659      	mov	r1, fp
 80a49ae:	f000 fb09 	bl	80a4fc4 <__aeabi_dmul>
 80a49b2:	4602      	mov	r2, r0
 80a49b4:	460b      	mov	r3, r1
 80a49b6:	4630      	mov	r0, r6
 80a49b8:	4639      	mov	r1, r7
 80a49ba:	f000 f951 	bl	80a4c60 <__adddf3>
 80a49be:	4602      	mov	r2, r0
 80a49c0:	460b      	mov	r3, r1
 80a49c2:	4628      	mov	r0, r5
 80a49c4:	4621      	mov	r1, r4
 80a49c6:	f000 f949 	bl	80a4c5c <__aeabi_dsub>
 80a49ca:	b005      	add	sp, #20
 80a49cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a49d0:	4602      	mov	r2, r0
 80a49d2:	460b      	mov	r3, r1
 80a49d4:	4630      	mov	r0, r6
 80a49d6:	4639      	mov	r1, r7
 80a49d8:	f000 faf4 	bl	80a4fc4 <__aeabi_dmul>
 80a49dc:	a314      	add	r3, pc, #80	; (adr r3, 80a4a30 <__kernel_sin+0x160>)
 80a49de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a49e2:	f000 f93b 	bl	80a4c5c <__aeabi_dsub>
 80a49e6:	4652      	mov	r2, sl
 80a49e8:	465b      	mov	r3, fp
 80a49ea:	f000 faeb 	bl	80a4fc4 <__aeabi_dmul>
 80a49ee:	462a      	mov	r2, r5
 80a49f0:	4623      	mov	r3, r4
 80a49f2:	f000 f935 	bl	80a4c60 <__adddf3>
 80a49f6:	b005      	add	sp, #20
 80a49f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a49fc:	4628      	mov	r0, r5
 80a49fe:	4621      	mov	r1, r4
 80a4a00:	b005      	add	sp, #20
 80a4a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4a06:	bf00      	nop
 80a4a08:	5acfd57c 	.word	0x5acfd57c
 80a4a0c:	3de5d93a 	.word	0x3de5d93a
 80a4a10:	8a2b9ceb 	.word	0x8a2b9ceb
 80a4a14:	3e5ae5e6 	.word	0x3e5ae5e6
 80a4a18:	57b1fe7d 	.word	0x57b1fe7d
 80a4a1c:	3ec71de3 	.word	0x3ec71de3
 80a4a20:	19c161d5 	.word	0x19c161d5
 80a4a24:	3f2a01a0 	.word	0x3f2a01a0
 80a4a28:	1110f8a6 	.word	0x1110f8a6
 80a4a2c:	3f811111 	.word	0x3f811111
 80a4a30:	55555549 	.word	0x55555549
 80a4a34:	3fc55555 	.word	0x3fc55555
 80a4a38:	3fe00000 	.word	0x3fe00000

080a4a3c <fabs>:
 80a4a3c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a4a40:	4770      	bx	lr
 80a4a42:	bf00      	nop
 80a4a44:	0000      	movs	r0, r0
	...

080a4a48 <floor>:
 80a4a48:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80a4a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a4a50:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80a4a54:	2e13      	cmp	r6, #19
 80a4a56:	460b      	mov	r3, r1
 80a4a58:	4604      	mov	r4, r0
 80a4a5a:	460d      	mov	r5, r1
 80a4a5c:	4688      	mov	r8, r1
 80a4a5e:	4607      	mov	r7, r0
 80a4a60:	dc1c      	bgt.n	80a4a9c <floor+0x54>
 80a4a62:	2e00      	cmp	r6, #0
 80a4a64:	db3f      	blt.n	80a4ae6 <floor+0x9e>
 80a4a66:	4a3a      	ldr	r2, [pc, #232]	; (80a4b50 <floor+0x108>)
 80a4a68:	4686      	mov	lr, r0
 80a4a6a:	fa42 f906 	asr.w	r9, r2, r6
 80a4a6e:	ea01 0209 	and.w	r2, r1, r9
 80a4a72:	4302      	orrs	r2, r0
 80a4a74:	d017      	beq.n	80a4aa6 <floor+0x5e>
 80a4a76:	a334      	add	r3, pc, #208	; (adr r3, 80a4b48 <floor+0x100>)
 80a4a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4a7c:	f000 f8f0 	bl	80a4c60 <__adddf3>
 80a4a80:	2200      	movs	r2, #0
 80a4a82:	2300      	movs	r3, #0
 80a4a84:	f000 fd2e 	bl	80a54e4 <__aeabi_dcmpgt>
 80a4a88:	b120      	cbz	r0, 80a4a94 <floor+0x4c>
 80a4a8a:	2d00      	cmp	r5, #0
 80a4a8c:	db40      	blt.n	80a4b10 <floor+0xc8>
 80a4a8e:	ea28 0509 	bic.w	r5, r8, r9
 80a4a92:	2700      	movs	r7, #0
 80a4a94:	4638      	mov	r0, r7
 80a4a96:	4629      	mov	r1, r5
 80a4a98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a4a9c:	2e33      	cmp	r6, #51	; 0x33
 80a4a9e:	dd06      	ble.n	80a4aae <floor+0x66>
 80a4aa0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80a4aa4:	d02f      	beq.n	80a4b06 <floor+0xbe>
 80a4aa6:	4620      	mov	r0, r4
 80a4aa8:	4619      	mov	r1, r3
 80a4aaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a4aae:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80a4ab2:	f04f 39ff 	mov.w	r9, #4294967295
 80a4ab6:	fa29 f902 	lsr.w	r9, r9, r2
 80a4aba:	ea10 0f09 	tst.w	r0, r9
 80a4abe:	d0f2      	beq.n	80a4aa6 <floor+0x5e>
 80a4ac0:	a321      	add	r3, pc, #132	; (adr r3, 80a4b48 <floor+0x100>)
 80a4ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4ac6:	f000 f8cb 	bl	80a4c60 <__adddf3>
 80a4aca:	2200      	movs	r2, #0
 80a4acc:	2300      	movs	r3, #0
 80a4ace:	f000 fd09 	bl	80a54e4 <__aeabi_dcmpgt>
 80a4ad2:	2800      	cmp	r0, #0
 80a4ad4:	d0de      	beq.n	80a4a94 <floor+0x4c>
 80a4ad6:	2d00      	cmp	r5, #0
 80a4ad8:	db20      	blt.n	80a4b1c <floor+0xd4>
 80a4ada:	4645      	mov	r5, r8
 80a4adc:	ea27 0709 	bic.w	r7, r7, r9
 80a4ae0:	4638      	mov	r0, r7
 80a4ae2:	4629      	mov	r1, r5
 80a4ae4:	e7d8      	b.n	80a4a98 <floor+0x50>
 80a4ae6:	a318      	add	r3, pc, #96	; (adr r3, 80a4b48 <floor+0x100>)
 80a4ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4aec:	f000 f8b8 	bl	80a4c60 <__adddf3>
 80a4af0:	2200      	movs	r2, #0
 80a4af2:	2300      	movs	r3, #0
 80a4af4:	f000 fcf6 	bl	80a54e4 <__aeabi_dcmpgt>
 80a4af8:	2800      	cmp	r0, #0
 80a4afa:	d0cb      	beq.n	80a4a94 <floor+0x4c>
 80a4afc:	2d00      	cmp	r5, #0
 80a4afe:	db18      	blt.n	80a4b32 <floor+0xea>
 80a4b00:	2700      	movs	r7, #0
 80a4b02:	463d      	mov	r5, r7
 80a4b04:	e7c6      	b.n	80a4a94 <floor+0x4c>
 80a4b06:	4602      	mov	r2, r0
 80a4b08:	460b      	mov	r3, r1
 80a4b0a:	f000 f8a9 	bl	80a4c60 <__adddf3>
 80a4b0e:	e7cc      	b.n	80a4aaa <floor+0x62>
 80a4b10:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80a4b14:	fa43 f606 	asr.w	r6, r3, r6
 80a4b18:	44b0      	add	r8, r6
 80a4b1a:	e7b8      	b.n	80a4a8e <floor+0x46>
 80a4b1c:	2e14      	cmp	r6, #20
 80a4b1e:	d010      	beq.n	80a4b42 <floor+0xfa>
 80a4b20:	2301      	movs	r3, #1
 80a4b22:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80a4b26:	fa03 f606 	lsl.w	r6, r3, r6
 80a4b2a:	1937      	adds	r7, r6, r4
 80a4b2c:	bf28      	it	cs
 80a4b2e:	4498      	addcs	r8, r3
 80a4b30:	e7d3      	b.n	80a4ada <floor+0x92>
 80a4b32:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80a4b36:	4b07      	ldr	r3, [pc, #28]	; (80a4b54 <floor+0x10c>)
 80a4b38:	4322      	orrs	r2, r4
 80a4b3a:	bf18      	it	ne
 80a4b3c:	461d      	movne	r5, r3
 80a4b3e:	2700      	movs	r7, #0
 80a4b40:	e7a8      	b.n	80a4a94 <floor+0x4c>
 80a4b42:	f105 0801 	add.w	r8, r5, #1
 80a4b46:	e7c8      	b.n	80a4ada <floor+0x92>
 80a4b48:	8800759c 	.word	0x8800759c
 80a4b4c:	7e37e43c 	.word	0x7e37e43c
 80a4b50:	000fffff 	.word	0x000fffff
 80a4b54:	bff00000 	.word	0xbff00000

080a4b58 <matherr>:
 80a4b58:	2000      	movs	r0, #0
 80a4b5a:	4770      	bx	lr
 80a4b5c:	0000      	movs	r0, r0
	...

080a4b60 <scalbn>:
 80a4b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4b62:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80a4b66:	4604      	mov	r4, r0
 80a4b68:	460d      	mov	r5, r1
 80a4b6a:	460b      	mov	r3, r1
 80a4b6c:	4617      	mov	r7, r2
 80a4b6e:	bb06      	cbnz	r6, 80a4bb2 <scalbn+0x52>
 80a4b70:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a4b74:	4303      	orrs	r3, r0
 80a4b76:	d025      	beq.n	80a4bc4 <scalbn+0x64>
 80a4b78:	2200      	movs	r2, #0
 80a4b7a:	4b2f      	ldr	r3, [pc, #188]	; (80a4c38 <scalbn+0xd8>)
 80a4b7c:	f000 fa22 	bl	80a4fc4 <__aeabi_dmul>
 80a4b80:	4a2e      	ldr	r2, [pc, #184]	; (80a4c3c <scalbn+0xdc>)
 80a4b82:	4604      	mov	r4, r0
 80a4b84:	4297      	cmp	r7, r2
 80a4b86:	460d      	mov	r5, r1
 80a4b88:	460b      	mov	r3, r1
 80a4b8a:	db2a      	blt.n	80a4be2 <scalbn+0x82>
 80a4b8c:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80a4b90:	3e36      	subs	r6, #54	; 0x36
 80a4b92:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80a4b96:	443e      	add	r6, r7
 80a4b98:	4296      	cmp	r6, r2
 80a4b9a:	dc28      	bgt.n	80a4bee <scalbn+0x8e>
 80a4b9c:	2e00      	cmp	r6, #0
 80a4b9e:	dd12      	ble.n	80a4bc6 <scalbn+0x66>
 80a4ba0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80a4ba4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80a4ba8:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
 80a4bac:	4620      	mov	r0, r4
 80a4bae:	4629      	mov	r1, r5
 80a4bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4bb2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80a4bb6:	4296      	cmp	r6, r2
 80a4bb8:	d1eb      	bne.n	80a4b92 <scalbn+0x32>
 80a4bba:	4602      	mov	r2, r0
 80a4bbc:	460b      	mov	r3, r1
 80a4bbe:	f000 f84f 	bl	80a4c60 <__adddf3>
 80a4bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4bc6:	f116 0f35 	cmn.w	r6, #53	; 0x35
 80a4bca:	da1d      	bge.n	80a4c08 <scalbn+0xa8>
 80a4bcc:	f24c 3350 	movw	r3, #50000	; 0xc350
 80a4bd0:	429f      	cmp	r7, r3
 80a4bd2:	dc0c      	bgt.n	80a4bee <scalbn+0x8e>
 80a4bd4:	a114      	add	r1, pc, #80	; (adr r1, 80a4c28 <scalbn+0xc8>)
 80a4bd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a4bda:	4622      	mov	r2, r4
 80a4bdc:	462b      	mov	r3, r5
 80a4bde:	f000 f831 	bl	80a4c44 <copysign>
 80a4be2:	a311      	add	r3, pc, #68	; (adr r3, 80a4c28 <scalbn+0xc8>)
 80a4be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4be8:	f000 f9ec 	bl	80a4fc4 <__aeabi_dmul>
 80a4bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4bee:	4622      	mov	r2, r4
 80a4bf0:	a10f      	add	r1, pc, #60	; (adr r1, 80a4c30 <scalbn+0xd0>)
 80a4bf2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a4bf6:	462b      	mov	r3, r5
 80a4bf8:	f000 f824 	bl	80a4c44 <copysign>
 80a4bfc:	a30c      	add	r3, pc, #48	; (adr r3, 80a4c30 <scalbn+0xd0>)
 80a4bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4c02:	f000 f9df 	bl	80a4fc4 <__aeabi_dmul>
 80a4c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4c08:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80a4c0c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80a4c10:	3636      	adds	r6, #54	; 0x36
 80a4c12:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
 80a4c16:	4620      	mov	r0, r4
 80a4c18:	4629      	mov	r1, r5
 80a4c1a:	2200      	movs	r2, #0
 80a4c1c:	4b08      	ldr	r3, [pc, #32]	; (80a4c40 <scalbn+0xe0>)
 80a4c1e:	f000 f9d1 	bl	80a4fc4 <__aeabi_dmul>
 80a4c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4c24:	f3af 8000 	nop.w
 80a4c28:	c2f8f359 	.word	0xc2f8f359
 80a4c2c:	01a56e1f 	.word	0x01a56e1f
 80a4c30:	8800759c 	.word	0x8800759c
 80a4c34:	7e37e43c 	.word	0x7e37e43c
 80a4c38:	43500000 	.word	0x43500000
 80a4c3c:	ffff3cb0 	.word	0xffff3cb0
 80a4c40:	3c900000 	.word	0x3c900000

080a4c44 <copysign>:
 80a4c44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80a4c48:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80a4c4c:	ea42 0103 	orr.w	r1, r2, r3
 80a4c50:	4770      	bx	lr
 80a4c52:	bf00      	nop

080a4c54 <__aeabi_drsub>:
 80a4c54:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a4c58:	e002      	b.n	80a4c60 <__adddf3>
 80a4c5a:	bf00      	nop

080a4c5c <__aeabi_dsub>:
 80a4c5c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a4c60 <__adddf3>:
 80a4c60:	b530      	push	{r4, r5, lr}
 80a4c62:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a4c66:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a4c6a:	ea94 0f05 	teq	r4, r5
 80a4c6e:	bf08      	it	eq
 80a4c70:	ea90 0f02 	teqeq	r0, r2
 80a4c74:	bf1f      	itttt	ne
 80a4c76:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a4c7a:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a4c7e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a4c82:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a4c86:	f000 80e2 	beq.w	80a4e4e <__adddf3+0x1ee>
 80a4c8a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a4c8e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a4c92:	bfb8      	it	lt
 80a4c94:	426d      	neglt	r5, r5
 80a4c96:	dd0c      	ble.n	80a4cb2 <__adddf3+0x52>
 80a4c98:	442c      	add	r4, r5
 80a4c9a:	ea80 0202 	eor.w	r2, r0, r2
 80a4c9e:	ea81 0303 	eor.w	r3, r1, r3
 80a4ca2:	ea82 0000 	eor.w	r0, r2, r0
 80a4ca6:	ea83 0101 	eor.w	r1, r3, r1
 80a4caa:	ea80 0202 	eor.w	r2, r0, r2
 80a4cae:	ea81 0303 	eor.w	r3, r1, r3
 80a4cb2:	2d36      	cmp	r5, #54	; 0x36
 80a4cb4:	bf88      	it	hi
 80a4cb6:	bd30      	pophi	{r4, r5, pc}
 80a4cb8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a4cbc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a4cc0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a4cc4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a4cc8:	d002      	beq.n	80a4cd0 <__adddf3+0x70>
 80a4cca:	4240      	negs	r0, r0
 80a4ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4cd0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a4cd4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a4cd8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a4cdc:	d002      	beq.n	80a4ce4 <__adddf3+0x84>
 80a4cde:	4252      	negs	r2, r2
 80a4ce0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a4ce4:	ea94 0f05 	teq	r4, r5
 80a4ce8:	f000 80a7 	beq.w	80a4e3a <__adddf3+0x1da>
 80a4cec:	f1a4 0401 	sub.w	r4, r4, #1
 80a4cf0:	f1d5 0e20 	rsbs	lr, r5, #32
 80a4cf4:	db0d      	blt.n	80a4d12 <__adddf3+0xb2>
 80a4cf6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a4cfa:	fa22 f205 	lsr.w	r2, r2, r5
 80a4cfe:	1880      	adds	r0, r0, r2
 80a4d00:	f141 0100 	adc.w	r1, r1, #0
 80a4d04:	fa03 f20e 	lsl.w	r2, r3, lr
 80a4d08:	1880      	adds	r0, r0, r2
 80a4d0a:	fa43 f305 	asr.w	r3, r3, r5
 80a4d0e:	4159      	adcs	r1, r3
 80a4d10:	e00e      	b.n	80a4d30 <__adddf3+0xd0>
 80a4d12:	f1a5 0520 	sub.w	r5, r5, #32
 80a4d16:	f10e 0e20 	add.w	lr, lr, #32
 80a4d1a:	2a01      	cmp	r2, #1
 80a4d1c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a4d20:	bf28      	it	cs
 80a4d22:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a4d26:	fa43 f305 	asr.w	r3, r3, r5
 80a4d2a:	18c0      	adds	r0, r0, r3
 80a4d2c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a4d30:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a4d34:	d507      	bpl.n	80a4d46 <__adddf3+0xe6>
 80a4d36:	f04f 0e00 	mov.w	lr, #0
 80a4d3a:	f1dc 0c00 	rsbs	ip, ip, #0
 80a4d3e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a4d42:	eb6e 0101 	sbc.w	r1, lr, r1
 80a4d46:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a4d4a:	d31b      	bcc.n	80a4d84 <__adddf3+0x124>
 80a4d4c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a4d50:	d30c      	bcc.n	80a4d6c <__adddf3+0x10c>
 80a4d52:	0849      	lsrs	r1, r1, #1
 80a4d54:	ea5f 0030 	movs.w	r0, r0, rrx
 80a4d58:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a4d5c:	f104 0401 	add.w	r4, r4, #1
 80a4d60:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a4d64:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a4d68:	f080 809a 	bcs.w	80a4ea0 <__adddf3+0x240>
 80a4d6c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a4d70:	bf08      	it	eq
 80a4d72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a4d76:	f150 0000 	adcs.w	r0, r0, #0
 80a4d7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a4d7e:	ea41 0105 	orr.w	r1, r1, r5
 80a4d82:	bd30      	pop	{r4, r5, pc}
 80a4d84:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a4d88:	4140      	adcs	r0, r0
 80a4d8a:	eb41 0101 	adc.w	r1, r1, r1
 80a4d8e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4d92:	f1a4 0401 	sub.w	r4, r4, #1
 80a4d96:	d1e9      	bne.n	80a4d6c <__adddf3+0x10c>
 80a4d98:	f091 0f00 	teq	r1, #0
 80a4d9c:	bf04      	itt	eq
 80a4d9e:	4601      	moveq	r1, r0
 80a4da0:	2000      	moveq	r0, #0
 80a4da2:	fab1 f381 	clz	r3, r1
 80a4da6:	bf08      	it	eq
 80a4da8:	3320      	addeq	r3, #32
 80a4daa:	f1a3 030b 	sub.w	r3, r3, #11
 80a4dae:	f1b3 0220 	subs.w	r2, r3, #32
 80a4db2:	da0c      	bge.n	80a4dce <__adddf3+0x16e>
 80a4db4:	320c      	adds	r2, #12
 80a4db6:	dd08      	ble.n	80a4dca <__adddf3+0x16a>
 80a4db8:	f102 0c14 	add.w	ip, r2, #20
 80a4dbc:	f1c2 020c 	rsb	r2, r2, #12
 80a4dc0:	fa01 f00c 	lsl.w	r0, r1, ip
 80a4dc4:	fa21 f102 	lsr.w	r1, r1, r2
 80a4dc8:	e00c      	b.n	80a4de4 <__adddf3+0x184>
 80a4dca:	f102 0214 	add.w	r2, r2, #20
 80a4dce:	bfd8      	it	le
 80a4dd0:	f1c2 0c20 	rsble	ip, r2, #32
 80a4dd4:	fa01 f102 	lsl.w	r1, r1, r2
 80a4dd8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a4ddc:	bfdc      	itt	le
 80a4dde:	ea41 010c 	orrle.w	r1, r1, ip
 80a4de2:	4090      	lslle	r0, r2
 80a4de4:	1ae4      	subs	r4, r4, r3
 80a4de6:	bfa2      	ittt	ge
 80a4de8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a4dec:	4329      	orrge	r1, r5
 80a4dee:	bd30      	popge	{r4, r5, pc}
 80a4df0:	ea6f 0404 	mvn.w	r4, r4
 80a4df4:	3c1f      	subs	r4, #31
 80a4df6:	da1c      	bge.n	80a4e32 <__adddf3+0x1d2>
 80a4df8:	340c      	adds	r4, #12
 80a4dfa:	dc0e      	bgt.n	80a4e1a <__adddf3+0x1ba>
 80a4dfc:	f104 0414 	add.w	r4, r4, #20
 80a4e00:	f1c4 0220 	rsb	r2, r4, #32
 80a4e04:	fa20 f004 	lsr.w	r0, r0, r4
 80a4e08:	fa01 f302 	lsl.w	r3, r1, r2
 80a4e0c:	ea40 0003 	orr.w	r0, r0, r3
 80a4e10:	fa21 f304 	lsr.w	r3, r1, r4
 80a4e14:	ea45 0103 	orr.w	r1, r5, r3
 80a4e18:	bd30      	pop	{r4, r5, pc}
 80a4e1a:	f1c4 040c 	rsb	r4, r4, #12
 80a4e1e:	f1c4 0220 	rsb	r2, r4, #32
 80a4e22:	fa20 f002 	lsr.w	r0, r0, r2
 80a4e26:	fa01 f304 	lsl.w	r3, r1, r4
 80a4e2a:	ea40 0003 	orr.w	r0, r0, r3
 80a4e2e:	4629      	mov	r1, r5
 80a4e30:	bd30      	pop	{r4, r5, pc}
 80a4e32:	fa21 f004 	lsr.w	r0, r1, r4
 80a4e36:	4629      	mov	r1, r5
 80a4e38:	bd30      	pop	{r4, r5, pc}
 80a4e3a:	f094 0f00 	teq	r4, #0
 80a4e3e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a4e42:	bf06      	itte	eq
 80a4e44:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a4e48:	3401      	addeq	r4, #1
 80a4e4a:	3d01      	subne	r5, #1
 80a4e4c:	e74e      	b.n	80a4cec <__adddf3+0x8c>
 80a4e4e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a4e52:	bf18      	it	ne
 80a4e54:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a4e58:	d029      	beq.n	80a4eae <__adddf3+0x24e>
 80a4e5a:	ea94 0f05 	teq	r4, r5
 80a4e5e:	bf08      	it	eq
 80a4e60:	ea90 0f02 	teqeq	r0, r2
 80a4e64:	d005      	beq.n	80a4e72 <__adddf3+0x212>
 80a4e66:	ea54 0c00 	orrs.w	ip, r4, r0
 80a4e6a:	bf04      	itt	eq
 80a4e6c:	4619      	moveq	r1, r3
 80a4e6e:	4610      	moveq	r0, r2
 80a4e70:	bd30      	pop	{r4, r5, pc}
 80a4e72:	ea91 0f03 	teq	r1, r3
 80a4e76:	bf1e      	ittt	ne
 80a4e78:	2100      	movne	r1, #0
 80a4e7a:	2000      	movne	r0, #0
 80a4e7c:	bd30      	popne	{r4, r5, pc}
 80a4e7e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a4e82:	d105      	bne.n	80a4e90 <__adddf3+0x230>
 80a4e84:	0040      	lsls	r0, r0, #1
 80a4e86:	4149      	adcs	r1, r1
 80a4e88:	bf28      	it	cs
 80a4e8a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a4e8e:	bd30      	pop	{r4, r5, pc}
 80a4e90:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a4e94:	bf3c      	itt	cc
 80a4e96:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a4e9a:	bd30      	popcc	{r4, r5, pc}
 80a4e9c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a4ea0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a4ea4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a4ea8:	f04f 0000 	mov.w	r0, #0
 80a4eac:	bd30      	pop	{r4, r5, pc}
 80a4eae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a4eb2:	bf1a      	itte	ne
 80a4eb4:	4619      	movne	r1, r3
 80a4eb6:	4610      	movne	r0, r2
 80a4eb8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a4ebc:	bf1c      	itt	ne
 80a4ebe:	460b      	movne	r3, r1
 80a4ec0:	4602      	movne	r2, r0
 80a4ec2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a4ec6:	bf06      	itte	eq
 80a4ec8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a4ecc:	ea91 0f03 	teqeq	r1, r3
 80a4ed0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a4ed4:	bd30      	pop	{r4, r5, pc}
 80a4ed6:	bf00      	nop

080a4ed8 <__aeabi_ui2d>:
 80a4ed8:	f090 0f00 	teq	r0, #0
 80a4edc:	bf04      	itt	eq
 80a4ede:	2100      	moveq	r1, #0
 80a4ee0:	4770      	bxeq	lr
 80a4ee2:	b530      	push	{r4, r5, lr}
 80a4ee4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a4ee8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a4eec:	f04f 0500 	mov.w	r5, #0
 80a4ef0:	f04f 0100 	mov.w	r1, #0
 80a4ef4:	e750      	b.n	80a4d98 <__adddf3+0x138>
 80a4ef6:	bf00      	nop

080a4ef8 <__aeabi_i2d>:
 80a4ef8:	f090 0f00 	teq	r0, #0
 80a4efc:	bf04      	itt	eq
 80a4efe:	2100      	moveq	r1, #0
 80a4f00:	4770      	bxeq	lr
 80a4f02:	b530      	push	{r4, r5, lr}
 80a4f04:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a4f08:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a4f0c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a4f10:	bf48      	it	mi
 80a4f12:	4240      	negmi	r0, r0
 80a4f14:	f04f 0100 	mov.w	r1, #0
 80a4f18:	e73e      	b.n	80a4d98 <__adddf3+0x138>
 80a4f1a:	bf00      	nop

080a4f1c <__aeabi_f2d>:
 80a4f1c:	0042      	lsls	r2, r0, #1
 80a4f1e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a4f22:	ea4f 0131 	mov.w	r1, r1, rrx
 80a4f26:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a4f2a:	bf1f      	itttt	ne
 80a4f2c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a4f30:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a4f34:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a4f38:	4770      	bxne	lr
 80a4f3a:	f092 0f00 	teq	r2, #0
 80a4f3e:	bf14      	ite	ne
 80a4f40:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a4f44:	4770      	bxeq	lr
 80a4f46:	b530      	push	{r4, r5, lr}
 80a4f48:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a4f4c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a4f50:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a4f54:	e720      	b.n	80a4d98 <__adddf3+0x138>
 80a4f56:	bf00      	nop

080a4f58 <__aeabi_ul2d>:
 80a4f58:	ea50 0201 	orrs.w	r2, r0, r1
 80a4f5c:	bf08      	it	eq
 80a4f5e:	4770      	bxeq	lr
 80a4f60:	b530      	push	{r4, r5, lr}
 80a4f62:	f04f 0500 	mov.w	r5, #0
 80a4f66:	e00a      	b.n	80a4f7e <__aeabi_l2d+0x16>

080a4f68 <__aeabi_l2d>:
 80a4f68:	ea50 0201 	orrs.w	r2, r0, r1
 80a4f6c:	bf08      	it	eq
 80a4f6e:	4770      	bxeq	lr
 80a4f70:	b530      	push	{r4, r5, lr}
 80a4f72:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a4f76:	d502      	bpl.n	80a4f7e <__aeabi_l2d+0x16>
 80a4f78:	4240      	negs	r0, r0
 80a4f7a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4f7e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a4f82:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a4f86:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a4f8a:	f43f aedc 	beq.w	80a4d46 <__adddf3+0xe6>
 80a4f8e:	f04f 0203 	mov.w	r2, #3
 80a4f92:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a4f96:	bf18      	it	ne
 80a4f98:	3203      	addne	r2, #3
 80a4f9a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a4f9e:	bf18      	it	ne
 80a4fa0:	3203      	addne	r2, #3
 80a4fa2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a4fa6:	f1c2 0320 	rsb	r3, r2, #32
 80a4faa:	fa00 fc03 	lsl.w	ip, r0, r3
 80a4fae:	fa20 f002 	lsr.w	r0, r0, r2
 80a4fb2:	fa01 fe03 	lsl.w	lr, r1, r3
 80a4fb6:	ea40 000e 	orr.w	r0, r0, lr
 80a4fba:	fa21 f102 	lsr.w	r1, r1, r2
 80a4fbe:	4414      	add	r4, r2
 80a4fc0:	e6c1      	b.n	80a4d46 <__adddf3+0xe6>
 80a4fc2:	bf00      	nop

080a4fc4 <__aeabi_dmul>:
 80a4fc4:	b570      	push	{r4, r5, r6, lr}
 80a4fc6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4fca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a4fce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a4fd2:	bf1d      	ittte	ne
 80a4fd4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a4fd8:	ea94 0f0c 	teqne	r4, ip
 80a4fdc:	ea95 0f0c 	teqne	r5, ip
 80a4fe0:	f000 f8de 	bleq	80a51a0 <__aeabi_dmul+0x1dc>
 80a4fe4:	442c      	add	r4, r5
 80a4fe6:	ea81 0603 	eor.w	r6, r1, r3
 80a4fea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a4fee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a4ff2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a4ff6:	bf18      	it	ne
 80a4ff8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a4ffc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a5000:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a5004:	d038      	beq.n	80a5078 <__aeabi_dmul+0xb4>
 80a5006:	fba0 ce02 	umull	ip, lr, r0, r2
 80a500a:	f04f 0500 	mov.w	r5, #0
 80a500e:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a5012:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a5016:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a501a:	f04f 0600 	mov.w	r6, #0
 80a501e:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a5022:	f09c 0f00 	teq	ip, #0
 80a5026:	bf18      	it	ne
 80a5028:	f04e 0e01 	orrne.w	lr, lr, #1
 80a502c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a5030:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a5034:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a5038:	d204      	bcs.n	80a5044 <__aeabi_dmul+0x80>
 80a503a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a503e:	416d      	adcs	r5, r5
 80a5040:	eb46 0606 	adc.w	r6, r6, r6
 80a5044:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a5048:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a504c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a5050:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a5054:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a5058:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a505c:	bf88      	it	hi
 80a505e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a5062:	d81e      	bhi.n	80a50a2 <__aeabi_dmul+0xde>
 80a5064:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a5068:	bf08      	it	eq
 80a506a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a506e:	f150 0000 	adcs.w	r0, r0, #0
 80a5072:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a5076:	bd70      	pop	{r4, r5, r6, pc}
 80a5078:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a507c:	ea46 0101 	orr.w	r1, r6, r1
 80a5080:	ea40 0002 	orr.w	r0, r0, r2
 80a5084:	ea81 0103 	eor.w	r1, r1, r3
 80a5088:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a508c:	bfc2      	ittt	gt
 80a508e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a5092:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a5096:	bd70      	popgt	{r4, r5, r6, pc}
 80a5098:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a509c:	f04f 0e00 	mov.w	lr, #0
 80a50a0:	3c01      	subs	r4, #1
 80a50a2:	f300 80ab 	bgt.w	80a51fc <__aeabi_dmul+0x238>
 80a50a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a50aa:	bfde      	ittt	le
 80a50ac:	2000      	movle	r0, #0
 80a50ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a50b2:	bd70      	pople	{r4, r5, r6, pc}
 80a50b4:	f1c4 0400 	rsb	r4, r4, #0
 80a50b8:	3c20      	subs	r4, #32
 80a50ba:	da35      	bge.n	80a5128 <__aeabi_dmul+0x164>
 80a50bc:	340c      	adds	r4, #12
 80a50be:	dc1b      	bgt.n	80a50f8 <__aeabi_dmul+0x134>
 80a50c0:	f104 0414 	add.w	r4, r4, #20
 80a50c4:	f1c4 0520 	rsb	r5, r4, #32
 80a50c8:	fa00 f305 	lsl.w	r3, r0, r5
 80a50cc:	fa20 f004 	lsr.w	r0, r0, r4
 80a50d0:	fa01 f205 	lsl.w	r2, r1, r5
 80a50d4:	ea40 0002 	orr.w	r0, r0, r2
 80a50d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a50dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a50e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a50e4:	fa21 f604 	lsr.w	r6, r1, r4
 80a50e8:	eb42 0106 	adc.w	r1, r2, r6
 80a50ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a50f0:	bf08      	it	eq
 80a50f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a50f6:	bd70      	pop	{r4, r5, r6, pc}
 80a50f8:	f1c4 040c 	rsb	r4, r4, #12
 80a50fc:	f1c4 0520 	rsb	r5, r4, #32
 80a5100:	fa00 f304 	lsl.w	r3, r0, r4
 80a5104:	fa20 f005 	lsr.w	r0, r0, r5
 80a5108:	fa01 f204 	lsl.w	r2, r1, r4
 80a510c:	ea40 0002 	orr.w	r0, r0, r2
 80a5110:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5114:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a5118:	f141 0100 	adc.w	r1, r1, #0
 80a511c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a5120:	bf08      	it	eq
 80a5122:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a5126:	bd70      	pop	{r4, r5, r6, pc}
 80a5128:	f1c4 0520 	rsb	r5, r4, #32
 80a512c:	fa00 f205 	lsl.w	r2, r0, r5
 80a5130:	ea4e 0e02 	orr.w	lr, lr, r2
 80a5134:	fa20 f304 	lsr.w	r3, r0, r4
 80a5138:	fa01 f205 	lsl.w	r2, r1, r5
 80a513c:	ea43 0302 	orr.w	r3, r3, r2
 80a5140:	fa21 f004 	lsr.w	r0, r1, r4
 80a5144:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5148:	fa21 f204 	lsr.w	r2, r1, r4
 80a514c:	ea20 0002 	bic.w	r0, r0, r2
 80a5150:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a5154:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a5158:	bf08      	it	eq
 80a515a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a515e:	bd70      	pop	{r4, r5, r6, pc}
 80a5160:	f094 0f00 	teq	r4, #0
 80a5164:	d10f      	bne.n	80a5186 <__aeabi_dmul+0x1c2>
 80a5166:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a516a:	0040      	lsls	r0, r0, #1
 80a516c:	eb41 0101 	adc.w	r1, r1, r1
 80a5170:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a5174:	bf08      	it	eq
 80a5176:	3c01      	subeq	r4, #1
 80a5178:	d0f7      	beq.n	80a516a <__aeabi_dmul+0x1a6>
 80a517a:	ea41 0106 	orr.w	r1, r1, r6
 80a517e:	f095 0f00 	teq	r5, #0
 80a5182:	bf18      	it	ne
 80a5184:	4770      	bxne	lr
 80a5186:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a518a:	0052      	lsls	r2, r2, #1
 80a518c:	eb43 0303 	adc.w	r3, r3, r3
 80a5190:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a5194:	bf08      	it	eq
 80a5196:	3d01      	subeq	r5, #1
 80a5198:	d0f7      	beq.n	80a518a <__aeabi_dmul+0x1c6>
 80a519a:	ea43 0306 	orr.w	r3, r3, r6
 80a519e:	4770      	bx	lr
 80a51a0:	ea94 0f0c 	teq	r4, ip
 80a51a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a51a8:	bf18      	it	ne
 80a51aa:	ea95 0f0c 	teqne	r5, ip
 80a51ae:	d00c      	beq.n	80a51ca <__aeabi_dmul+0x206>
 80a51b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a51b4:	bf18      	it	ne
 80a51b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a51ba:	d1d1      	bne.n	80a5160 <__aeabi_dmul+0x19c>
 80a51bc:	ea81 0103 	eor.w	r1, r1, r3
 80a51c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a51c4:	f04f 0000 	mov.w	r0, #0
 80a51c8:	bd70      	pop	{r4, r5, r6, pc}
 80a51ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a51ce:	bf06      	itte	eq
 80a51d0:	4610      	moveq	r0, r2
 80a51d2:	4619      	moveq	r1, r3
 80a51d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a51d8:	d019      	beq.n	80a520e <__aeabi_dmul+0x24a>
 80a51da:	ea94 0f0c 	teq	r4, ip
 80a51de:	d102      	bne.n	80a51e6 <__aeabi_dmul+0x222>
 80a51e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a51e4:	d113      	bne.n	80a520e <__aeabi_dmul+0x24a>
 80a51e6:	ea95 0f0c 	teq	r5, ip
 80a51ea:	d105      	bne.n	80a51f8 <__aeabi_dmul+0x234>
 80a51ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a51f0:	bf1c      	itt	ne
 80a51f2:	4610      	movne	r0, r2
 80a51f4:	4619      	movne	r1, r3
 80a51f6:	d10a      	bne.n	80a520e <__aeabi_dmul+0x24a>
 80a51f8:	ea81 0103 	eor.w	r1, r1, r3
 80a51fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5200:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a5204:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a5208:	f04f 0000 	mov.w	r0, #0
 80a520c:	bd70      	pop	{r4, r5, r6, pc}
 80a520e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a5212:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a5216:	bd70      	pop	{r4, r5, r6, pc}

080a5218 <__aeabi_ddiv>:
 80a5218:	b570      	push	{r4, r5, r6, lr}
 80a521a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a521e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a5222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a5226:	bf1d      	ittte	ne
 80a5228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a522c:	ea94 0f0c 	teqne	r4, ip
 80a5230:	ea95 0f0c 	teqne	r5, ip
 80a5234:	f000 f8a7 	bleq	80a5386 <__aeabi_ddiv+0x16e>
 80a5238:	eba4 0405 	sub.w	r4, r4, r5
 80a523c:	ea81 0e03 	eor.w	lr, r1, r3
 80a5240:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a5244:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a5248:	f000 8088 	beq.w	80a535c <__aeabi_ddiv+0x144>
 80a524c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a5250:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a5254:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a5258:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a525c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a5260:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a5264:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a5268:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a526c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a5270:	429d      	cmp	r5, r3
 80a5272:	bf08      	it	eq
 80a5274:	4296      	cmpeq	r6, r2
 80a5276:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a527a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a527e:	d202      	bcs.n	80a5286 <__aeabi_ddiv+0x6e>
 80a5280:	085b      	lsrs	r3, r3, #1
 80a5282:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5286:	1ab6      	subs	r6, r6, r2
 80a5288:	eb65 0503 	sbc.w	r5, r5, r3
 80a528c:	085b      	lsrs	r3, r3, #1
 80a528e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5292:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a5296:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a529a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a529e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a52a2:	bf22      	ittt	cs
 80a52a4:	1ab6      	subcs	r6, r6, r2
 80a52a6:	4675      	movcs	r5, lr
 80a52a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80a52ac:	085b      	lsrs	r3, r3, #1
 80a52ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80a52b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a52b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a52ba:	bf22      	ittt	cs
 80a52bc:	1ab6      	subcs	r6, r6, r2
 80a52be:	4675      	movcs	r5, lr
 80a52c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a52c4:	085b      	lsrs	r3, r3, #1
 80a52c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a52ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80a52ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a52d2:	bf22      	ittt	cs
 80a52d4:	1ab6      	subcs	r6, r6, r2
 80a52d6:	4675      	movcs	r5, lr
 80a52d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a52dc:	085b      	lsrs	r3, r3, #1
 80a52de:	ea4f 0232 	mov.w	r2, r2, rrx
 80a52e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a52e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a52ea:	bf22      	ittt	cs
 80a52ec:	1ab6      	subcs	r6, r6, r2
 80a52ee:	4675      	movcs	r5, lr
 80a52f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a52f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80a52f8:	d018      	beq.n	80a532c <__aeabi_ddiv+0x114>
 80a52fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a52fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a5302:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a5306:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a530a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a530e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a5312:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a5316:	d1c0      	bne.n	80a529a <__aeabi_ddiv+0x82>
 80a5318:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a531c:	d10b      	bne.n	80a5336 <__aeabi_ddiv+0x11e>
 80a531e:	ea41 0100 	orr.w	r1, r1, r0
 80a5322:	f04f 0000 	mov.w	r0, #0
 80a5326:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a532a:	e7b6      	b.n	80a529a <__aeabi_ddiv+0x82>
 80a532c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a5330:	bf04      	itt	eq
 80a5332:	4301      	orreq	r1, r0
 80a5334:	2000      	moveq	r0, #0
 80a5336:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a533a:	bf88      	it	hi
 80a533c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a5340:	f63f aeaf 	bhi.w	80a50a2 <__aeabi_dmul+0xde>
 80a5344:	ebb5 0c03 	subs.w	ip, r5, r3
 80a5348:	bf04      	itt	eq
 80a534a:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a534e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a5352:	f150 0000 	adcs.w	r0, r0, #0
 80a5356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a535a:	bd70      	pop	{r4, r5, r6, pc}
 80a535c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a5360:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a5364:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a5368:	bfc2      	ittt	gt
 80a536a:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a536e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a5372:	bd70      	popgt	{r4, r5, r6, pc}
 80a5374:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a5378:	f04f 0e00 	mov.w	lr, #0
 80a537c:	3c01      	subs	r4, #1
 80a537e:	e690      	b.n	80a50a2 <__aeabi_dmul+0xde>
 80a5380:	ea45 0e06 	orr.w	lr, r5, r6
 80a5384:	e68d      	b.n	80a50a2 <__aeabi_dmul+0xde>
 80a5386:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a538a:	ea94 0f0c 	teq	r4, ip
 80a538e:	bf08      	it	eq
 80a5390:	ea95 0f0c 	teqeq	r5, ip
 80a5394:	f43f af3b 	beq.w	80a520e <__aeabi_dmul+0x24a>
 80a5398:	ea94 0f0c 	teq	r4, ip
 80a539c:	d10a      	bne.n	80a53b4 <__aeabi_ddiv+0x19c>
 80a539e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a53a2:	f47f af34 	bne.w	80a520e <__aeabi_dmul+0x24a>
 80a53a6:	ea95 0f0c 	teq	r5, ip
 80a53aa:	f47f af25 	bne.w	80a51f8 <__aeabi_dmul+0x234>
 80a53ae:	4610      	mov	r0, r2
 80a53b0:	4619      	mov	r1, r3
 80a53b2:	e72c      	b.n	80a520e <__aeabi_dmul+0x24a>
 80a53b4:	ea95 0f0c 	teq	r5, ip
 80a53b8:	d106      	bne.n	80a53c8 <__aeabi_ddiv+0x1b0>
 80a53ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a53be:	f43f aefd 	beq.w	80a51bc <__aeabi_dmul+0x1f8>
 80a53c2:	4610      	mov	r0, r2
 80a53c4:	4619      	mov	r1, r3
 80a53c6:	e722      	b.n	80a520e <__aeabi_dmul+0x24a>
 80a53c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a53cc:	bf18      	it	ne
 80a53ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a53d2:	f47f aec5 	bne.w	80a5160 <__aeabi_dmul+0x19c>
 80a53d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a53da:	f47f af0d 	bne.w	80a51f8 <__aeabi_dmul+0x234>
 80a53de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a53e2:	f47f aeeb 	bne.w	80a51bc <__aeabi_dmul+0x1f8>
 80a53e6:	e712      	b.n	80a520e <__aeabi_dmul+0x24a>

080a53e8 <__gedf2>:
 80a53e8:	f04f 3cff 	mov.w	ip, #4294967295
 80a53ec:	e006      	b.n	80a53fc <__cmpdf2+0x4>
 80a53ee:	bf00      	nop

080a53f0 <__ledf2>:
 80a53f0:	f04f 0c01 	mov.w	ip, #1
 80a53f4:	e002      	b.n	80a53fc <__cmpdf2+0x4>
 80a53f6:	bf00      	nop

080a53f8 <__cmpdf2>:
 80a53f8:	f04f 0c01 	mov.w	ip, #1
 80a53fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a5400:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a5404:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5408:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a540c:	bf18      	it	ne
 80a540e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a5412:	d01b      	beq.n	80a544c <__cmpdf2+0x54>
 80a5414:	b001      	add	sp, #4
 80a5416:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a541a:	bf0c      	ite	eq
 80a541c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a5420:	ea91 0f03 	teqne	r1, r3
 80a5424:	bf02      	ittt	eq
 80a5426:	ea90 0f02 	teqeq	r0, r2
 80a542a:	2000      	moveq	r0, #0
 80a542c:	4770      	bxeq	lr
 80a542e:	f110 0f00 	cmn.w	r0, #0
 80a5432:	ea91 0f03 	teq	r1, r3
 80a5436:	bf58      	it	pl
 80a5438:	4299      	cmppl	r1, r3
 80a543a:	bf08      	it	eq
 80a543c:	4290      	cmpeq	r0, r2
 80a543e:	bf2c      	ite	cs
 80a5440:	17d8      	asrcs	r0, r3, #31
 80a5442:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a5446:	f040 0001 	orr.w	r0, r0, #1
 80a544a:	4770      	bx	lr
 80a544c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a5450:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5454:	d102      	bne.n	80a545c <__cmpdf2+0x64>
 80a5456:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a545a:	d107      	bne.n	80a546c <__cmpdf2+0x74>
 80a545c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a5460:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5464:	d1d6      	bne.n	80a5414 <__cmpdf2+0x1c>
 80a5466:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a546a:	d0d3      	beq.n	80a5414 <__cmpdf2+0x1c>
 80a546c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a5470:	4770      	bx	lr
 80a5472:	bf00      	nop

080a5474 <__aeabi_cdrcmple>:
 80a5474:	4684      	mov	ip, r0
 80a5476:	4610      	mov	r0, r2
 80a5478:	4662      	mov	r2, ip
 80a547a:	468c      	mov	ip, r1
 80a547c:	4619      	mov	r1, r3
 80a547e:	4663      	mov	r3, ip
 80a5480:	e000      	b.n	80a5484 <__aeabi_cdcmpeq>
 80a5482:	bf00      	nop

080a5484 <__aeabi_cdcmpeq>:
 80a5484:	b501      	push	{r0, lr}
 80a5486:	f7ff ffb7 	bl	80a53f8 <__cmpdf2>
 80a548a:	2800      	cmp	r0, #0
 80a548c:	bf48      	it	mi
 80a548e:	f110 0f00 	cmnmi.w	r0, #0
 80a5492:	bd01      	pop	{r0, pc}

080a5494 <__aeabi_dcmpeq>:
 80a5494:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5498:	f7ff fff4 	bl	80a5484 <__aeabi_cdcmpeq>
 80a549c:	bf0c      	ite	eq
 80a549e:	2001      	moveq	r0, #1
 80a54a0:	2000      	movne	r0, #0
 80a54a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a54a6:	bf00      	nop

080a54a8 <__aeabi_dcmplt>:
 80a54a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a54ac:	f7ff ffea 	bl	80a5484 <__aeabi_cdcmpeq>
 80a54b0:	bf34      	ite	cc
 80a54b2:	2001      	movcc	r0, #1
 80a54b4:	2000      	movcs	r0, #0
 80a54b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a54ba:	bf00      	nop

080a54bc <__aeabi_dcmple>:
 80a54bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a54c0:	f7ff ffe0 	bl	80a5484 <__aeabi_cdcmpeq>
 80a54c4:	bf94      	ite	ls
 80a54c6:	2001      	movls	r0, #1
 80a54c8:	2000      	movhi	r0, #0
 80a54ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80a54ce:	bf00      	nop

080a54d0 <__aeabi_dcmpge>:
 80a54d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a54d4:	f7ff ffce 	bl	80a5474 <__aeabi_cdrcmple>
 80a54d8:	bf94      	ite	ls
 80a54da:	2001      	movls	r0, #1
 80a54dc:	2000      	movhi	r0, #0
 80a54de:	f85d fb08 	ldr.w	pc, [sp], #8
 80a54e2:	bf00      	nop

080a54e4 <__aeabi_dcmpgt>:
 80a54e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a54e8:	f7ff ffc4 	bl	80a5474 <__aeabi_cdrcmple>
 80a54ec:	bf34      	ite	cc
 80a54ee:	2001      	movcc	r0, #1
 80a54f0:	2000      	movcs	r0, #0
 80a54f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a54f6:	bf00      	nop

080a54f8 <__aeabi_dcmpun>:
 80a54f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a54fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5500:	d102      	bne.n	80a5508 <__aeabi_dcmpun+0x10>
 80a5502:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a5506:	d10a      	bne.n	80a551e <__aeabi_dcmpun+0x26>
 80a5508:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a550c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5510:	d102      	bne.n	80a5518 <__aeabi_dcmpun+0x20>
 80a5512:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a5516:	d102      	bne.n	80a551e <__aeabi_dcmpun+0x26>
 80a5518:	f04f 0000 	mov.w	r0, #0
 80a551c:	4770      	bx	lr
 80a551e:	f04f 0001 	mov.w	r0, #1
 80a5522:	4770      	bx	lr

080a5524 <__aeabi_d2iz>:
 80a5524:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a5528:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a552c:	d215      	bcs.n	80a555a <__aeabi_d2iz+0x36>
 80a552e:	d511      	bpl.n	80a5554 <__aeabi_d2iz+0x30>
 80a5530:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a5534:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a5538:	d912      	bls.n	80a5560 <__aeabi_d2iz+0x3c>
 80a553a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a553e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a5542:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a5546:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a554a:	fa23 f002 	lsr.w	r0, r3, r2
 80a554e:	bf18      	it	ne
 80a5550:	4240      	negne	r0, r0
 80a5552:	4770      	bx	lr
 80a5554:	f04f 0000 	mov.w	r0, #0
 80a5558:	4770      	bx	lr
 80a555a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a555e:	d105      	bne.n	80a556c <__aeabi_d2iz+0x48>
 80a5560:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a5564:	bf08      	it	eq
 80a5566:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a556a:	4770      	bx	lr
 80a556c:	f04f 0000 	mov.w	r0, #0
 80a5570:	4770      	bx	lr
 80a5572:	bf00      	nop

080a5574 <__aeabi_frsub>:
 80a5574:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a5578:	e002      	b.n	80a5580 <__addsf3>
 80a557a:	bf00      	nop

080a557c <__aeabi_fsub>:
 80a557c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a5580 <__addsf3>:
 80a5580:	0042      	lsls	r2, r0, #1
 80a5582:	bf1f      	itttt	ne
 80a5584:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a5588:	ea92 0f03 	teqne	r2, r3
 80a558c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a5590:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a5594:	d06a      	beq.n	80a566c <__addsf3+0xec>
 80a5596:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a559a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a559e:	bfc1      	itttt	gt
 80a55a0:	18d2      	addgt	r2, r2, r3
 80a55a2:	4041      	eorgt	r1, r0
 80a55a4:	4048      	eorgt	r0, r1
 80a55a6:	4041      	eorgt	r1, r0
 80a55a8:	bfb8      	it	lt
 80a55aa:	425b      	neglt	r3, r3
 80a55ac:	2b19      	cmp	r3, #25
 80a55ae:	bf88      	it	hi
 80a55b0:	4770      	bxhi	lr
 80a55b2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a55b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a55ba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a55be:	bf18      	it	ne
 80a55c0:	4240      	negne	r0, r0
 80a55c2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a55c6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a55ca:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a55ce:	bf18      	it	ne
 80a55d0:	4249      	negne	r1, r1
 80a55d2:	ea92 0f03 	teq	r2, r3
 80a55d6:	d03f      	beq.n	80a5658 <__addsf3+0xd8>
 80a55d8:	f1a2 0201 	sub.w	r2, r2, #1
 80a55dc:	fa41 fc03 	asr.w	ip, r1, r3
 80a55e0:	eb10 000c 	adds.w	r0, r0, ip
 80a55e4:	f1c3 0320 	rsb	r3, r3, #32
 80a55e8:	fa01 f103 	lsl.w	r1, r1, r3
 80a55ec:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a55f0:	d502      	bpl.n	80a55f8 <__addsf3+0x78>
 80a55f2:	4249      	negs	r1, r1
 80a55f4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a55f8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a55fc:	d313      	bcc.n	80a5626 <__addsf3+0xa6>
 80a55fe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a5602:	d306      	bcc.n	80a5612 <__addsf3+0x92>
 80a5604:	0840      	lsrs	r0, r0, #1
 80a5606:	ea4f 0131 	mov.w	r1, r1, rrx
 80a560a:	f102 0201 	add.w	r2, r2, #1
 80a560e:	2afe      	cmp	r2, #254	; 0xfe
 80a5610:	d251      	bcs.n	80a56b6 <__addsf3+0x136>
 80a5612:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a5616:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a561a:	bf08      	it	eq
 80a561c:	f020 0001 	biceq.w	r0, r0, #1
 80a5620:	ea40 0003 	orr.w	r0, r0, r3
 80a5624:	4770      	bx	lr
 80a5626:	0049      	lsls	r1, r1, #1
 80a5628:	eb40 0000 	adc.w	r0, r0, r0
 80a562c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a5630:	f1a2 0201 	sub.w	r2, r2, #1
 80a5634:	d1ed      	bne.n	80a5612 <__addsf3+0x92>
 80a5636:	fab0 fc80 	clz	ip, r0
 80a563a:	f1ac 0c08 	sub.w	ip, ip, #8
 80a563e:	ebb2 020c 	subs.w	r2, r2, ip
 80a5642:	fa00 f00c 	lsl.w	r0, r0, ip
 80a5646:	bfaa      	itet	ge
 80a5648:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a564c:	4252      	neglt	r2, r2
 80a564e:	4318      	orrge	r0, r3
 80a5650:	bfbc      	itt	lt
 80a5652:	40d0      	lsrlt	r0, r2
 80a5654:	4318      	orrlt	r0, r3
 80a5656:	4770      	bx	lr
 80a5658:	f092 0f00 	teq	r2, #0
 80a565c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a5660:	bf06      	itte	eq
 80a5662:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a5666:	3201      	addeq	r2, #1
 80a5668:	3b01      	subne	r3, #1
 80a566a:	e7b5      	b.n	80a55d8 <__addsf3+0x58>
 80a566c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a5670:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a5674:	bf18      	it	ne
 80a5676:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a567a:	d021      	beq.n	80a56c0 <__addsf3+0x140>
 80a567c:	ea92 0f03 	teq	r2, r3
 80a5680:	d004      	beq.n	80a568c <__addsf3+0x10c>
 80a5682:	f092 0f00 	teq	r2, #0
 80a5686:	bf08      	it	eq
 80a5688:	4608      	moveq	r0, r1
 80a568a:	4770      	bx	lr
 80a568c:	ea90 0f01 	teq	r0, r1
 80a5690:	bf1c      	itt	ne
 80a5692:	2000      	movne	r0, #0
 80a5694:	4770      	bxne	lr
 80a5696:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a569a:	d104      	bne.n	80a56a6 <__addsf3+0x126>
 80a569c:	0040      	lsls	r0, r0, #1
 80a569e:	bf28      	it	cs
 80a56a0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a56a4:	4770      	bx	lr
 80a56a6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a56aa:	bf3c      	itt	cc
 80a56ac:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a56b0:	4770      	bxcc	lr
 80a56b2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a56b6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a56ba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a56be:	4770      	bx	lr
 80a56c0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a56c4:	bf16      	itet	ne
 80a56c6:	4608      	movne	r0, r1
 80a56c8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a56cc:	4601      	movne	r1, r0
 80a56ce:	0242      	lsls	r2, r0, #9
 80a56d0:	bf06      	itte	eq
 80a56d2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a56d6:	ea90 0f01 	teqeq	r0, r1
 80a56da:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a56de:	4770      	bx	lr

080a56e0 <__aeabi_ui2f>:
 80a56e0:	f04f 0300 	mov.w	r3, #0
 80a56e4:	e004      	b.n	80a56f0 <__aeabi_i2f+0x8>
 80a56e6:	bf00      	nop

080a56e8 <__aeabi_i2f>:
 80a56e8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a56ec:	bf48      	it	mi
 80a56ee:	4240      	negmi	r0, r0
 80a56f0:	ea5f 0c00 	movs.w	ip, r0
 80a56f4:	bf08      	it	eq
 80a56f6:	4770      	bxeq	lr
 80a56f8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a56fc:	4601      	mov	r1, r0
 80a56fe:	f04f 0000 	mov.w	r0, #0
 80a5702:	e01c      	b.n	80a573e <__aeabi_l2f+0x2a>

080a5704 <__aeabi_ul2f>:
 80a5704:	ea50 0201 	orrs.w	r2, r0, r1
 80a5708:	bf08      	it	eq
 80a570a:	4770      	bxeq	lr
 80a570c:	f04f 0300 	mov.w	r3, #0
 80a5710:	e00a      	b.n	80a5728 <__aeabi_l2f+0x14>
 80a5712:	bf00      	nop

080a5714 <__aeabi_l2f>:
 80a5714:	ea50 0201 	orrs.w	r2, r0, r1
 80a5718:	bf08      	it	eq
 80a571a:	4770      	bxeq	lr
 80a571c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a5720:	d502      	bpl.n	80a5728 <__aeabi_l2f+0x14>
 80a5722:	4240      	negs	r0, r0
 80a5724:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a5728:	ea5f 0c01 	movs.w	ip, r1
 80a572c:	bf02      	ittt	eq
 80a572e:	4684      	moveq	ip, r0
 80a5730:	4601      	moveq	r1, r0
 80a5732:	2000      	moveq	r0, #0
 80a5734:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a5738:	bf08      	it	eq
 80a573a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a573e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a5742:	fabc f28c 	clz	r2, ip
 80a5746:	3a08      	subs	r2, #8
 80a5748:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a574c:	db10      	blt.n	80a5770 <__aeabi_l2f+0x5c>
 80a574e:	fa01 fc02 	lsl.w	ip, r1, r2
 80a5752:	4463      	add	r3, ip
 80a5754:	fa00 fc02 	lsl.w	ip, r0, r2
 80a5758:	f1c2 0220 	rsb	r2, r2, #32
 80a575c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a5760:	fa20 f202 	lsr.w	r2, r0, r2
 80a5764:	eb43 0002 	adc.w	r0, r3, r2
 80a5768:	bf08      	it	eq
 80a576a:	f020 0001 	biceq.w	r0, r0, #1
 80a576e:	4770      	bx	lr
 80a5770:	f102 0220 	add.w	r2, r2, #32
 80a5774:	fa01 fc02 	lsl.w	ip, r1, r2
 80a5778:	f1c2 0220 	rsb	r2, r2, #32
 80a577c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a5780:	fa21 f202 	lsr.w	r2, r1, r2
 80a5784:	eb43 0002 	adc.w	r0, r3, r2
 80a5788:	bf08      	it	eq
 80a578a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a578e:	4770      	bx	lr

080a5790 <__aeabi_fmul>:
 80a5790:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a5794:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a5798:	bf1e      	ittt	ne
 80a579a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a579e:	ea92 0f0c 	teqne	r2, ip
 80a57a2:	ea93 0f0c 	teqne	r3, ip
 80a57a6:	d06f      	beq.n	80a5888 <__aeabi_fmul+0xf8>
 80a57a8:	441a      	add	r2, r3
 80a57aa:	ea80 0c01 	eor.w	ip, r0, r1
 80a57ae:	0240      	lsls	r0, r0, #9
 80a57b0:	bf18      	it	ne
 80a57b2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a57b6:	d01e      	beq.n	80a57f6 <__aeabi_fmul+0x66>
 80a57b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a57bc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a57c0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a57c4:	fba0 3101 	umull	r3, r1, r0, r1
 80a57c8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a57cc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a57d0:	bf3e      	ittt	cc
 80a57d2:	0049      	lslcc	r1, r1, #1
 80a57d4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a57d8:	005b      	lslcc	r3, r3, #1
 80a57da:	ea40 0001 	orr.w	r0, r0, r1
 80a57de:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a57e2:	2afd      	cmp	r2, #253	; 0xfd
 80a57e4:	d81d      	bhi.n	80a5822 <__aeabi_fmul+0x92>
 80a57e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a57ea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a57ee:	bf08      	it	eq
 80a57f0:	f020 0001 	biceq.w	r0, r0, #1
 80a57f4:	4770      	bx	lr
 80a57f6:	f090 0f00 	teq	r0, #0
 80a57fa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a57fe:	bf08      	it	eq
 80a5800:	0249      	lsleq	r1, r1, #9
 80a5802:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a5806:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a580a:	3a7f      	subs	r2, #127	; 0x7f
 80a580c:	bfc2      	ittt	gt
 80a580e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a5812:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a5816:	4770      	bxgt	lr
 80a5818:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a581c:	f04f 0300 	mov.w	r3, #0
 80a5820:	3a01      	subs	r2, #1
 80a5822:	dc5d      	bgt.n	80a58e0 <__aeabi_fmul+0x150>
 80a5824:	f112 0f19 	cmn.w	r2, #25
 80a5828:	bfdc      	itt	le
 80a582a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a582e:	4770      	bxle	lr
 80a5830:	f1c2 0200 	rsb	r2, r2, #0
 80a5834:	0041      	lsls	r1, r0, #1
 80a5836:	fa21 f102 	lsr.w	r1, r1, r2
 80a583a:	f1c2 0220 	rsb	r2, r2, #32
 80a583e:	fa00 fc02 	lsl.w	ip, r0, r2
 80a5842:	ea5f 0031 	movs.w	r0, r1, rrx
 80a5846:	f140 0000 	adc.w	r0, r0, #0
 80a584a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a584e:	bf08      	it	eq
 80a5850:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a5854:	4770      	bx	lr
 80a5856:	f092 0f00 	teq	r2, #0
 80a585a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a585e:	bf02      	ittt	eq
 80a5860:	0040      	lsleq	r0, r0, #1
 80a5862:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a5866:	3a01      	subeq	r2, #1
 80a5868:	d0f9      	beq.n	80a585e <__aeabi_fmul+0xce>
 80a586a:	ea40 000c 	orr.w	r0, r0, ip
 80a586e:	f093 0f00 	teq	r3, #0
 80a5872:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a5876:	bf02      	ittt	eq
 80a5878:	0049      	lsleq	r1, r1, #1
 80a587a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a587e:	3b01      	subeq	r3, #1
 80a5880:	d0f9      	beq.n	80a5876 <__aeabi_fmul+0xe6>
 80a5882:	ea41 010c 	orr.w	r1, r1, ip
 80a5886:	e78f      	b.n	80a57a8 <__aeabi_fmul+0x18>
 80a5888:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a588c:	ea92 0f0c 	teq	r2, ip
 80a5890:	bf18      	it	ne
 80a5892:	ea93 0f0c 	teqne	r3, ip
 80a5896:	d00a      	beq.n	80a58ae <__aeabi_fmul+0x11e>
 80a5898:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a589c:	bf18      	it	ne
 80a589e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a58a2:	d1d8      	bne.n	80a5856 <__aeabi_fmul+0xc6>
 80a58a4:	ea80 0001 	eor.w	r0, r0, r1
 80a58a8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a58ac:	4770      	bx	lr
 80a58ae:	f090 0f00 	teq	r0, #0
 80a58b2:	bf17      	itett	ne
 80a58b4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a58b8:	4608      	moveq	r0, r1
 80a58ba:	f091 0f00 	teqne	r1, #0
 80a58be:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a58c2:	d014      	beq.n	80a58ee <__aeabi_fmul+0x15e>
 80a58c4:	ea92 0f0c 	teq	r2, ip
 80a58c8:	d101      	bne.n	80a58ce <__aeabi_fmul+0x13e>
 80a58ca:	0242      	lsls	r2, r0, #9
 80a58cc:	d10f      	bne.n	80a58ee <__aeabi_fmul+0x15e>
 80a58ce:	ea93 0f0c 	teq	r3, ip
 80a58d2:	d103      	bne.n	80a58dc <__aeabi_fmul+0x14c>
 80a58d4:	024b      	lsls	r3, r1, #9
 80a58d6:	bf18      	it	ne
 80a58d8:	4608      	movne	r0, r1
 80a58da:	d108      	bne.n	80a58ee <__aeabi_fmul+0x15e>
 80a58dc:	ea80 0001 	eor.w	r0, r0, r1
 80a58e0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a58e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a58e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a58ec:	4770      	bx	lr
 80a58ee:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a58f2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a58f6:	4770      	bx	lr

080a58f8 <__aeabi_fdiv>:
 80a58f8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a58fc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a5900:	bf1e      	ittt	ne
 80a5902:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a5906:	ea92 0f0c 	teqne	r2, ip
 80a590a:	ea93 0f0c 	teqne	r3, ip
 80a590e:	d069      	beq.n	80a59e4 <__aeabi_fdiv+0xec>
 80a5910:	eba2 0203 	sub.w	r2, r2, r3
 80a5914:	ea80 0c01 	eor.w	ip, r0, r1
 80a5918:	0249      	lsls	r1, r1, #9
 80a591a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a591e:	d037      	beq.n	80a5990 <__aeabi_fdiv+0x98>
 80a5920:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a5924:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a5928:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a592c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a5930:	428b      	cmp	r3, r1
 80a5932:	bf38      	it	cc
 80a5934:	005b      	lslcc	r3, r3, #1
 80a5936:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a593a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a593e:	428b      	cmp	r3, r1
 80a5940:	bf24      	itt	cs
 80a5942:	1a5b      	subcs	r3, r3, r1
 80a5944:	ea40 000c 	orrcs.w	r0, r0, ip
 80a5948:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a594c:	bf24      	itt	cs
 80a594e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a5952:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a5956:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a595a:	bf24      	itt	cs
 80a595c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a5960:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a5964:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a5968:	bf24      	itt	cs
 80a596a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a596e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a5972:	011b      	lsls	r3, r3, #4
 80a5974:	bf18      	it	ne
 80a5976:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a597a:	d1e0      	bne.n	80a593e <__aeabi_fdiv+0x46>
 80a597c:	2afd      	cmp	r2, #253	; 0xfd
 80a597e:	f63f af50 	bhi.w	80a5822 <__aeabi_fmul+0x92>
 80a5982:	428b      	cmp	r3, r1
 80a5984:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a5988:	bf08      	it	eq
 80a598a:	f020 0001 	biceq.w	r0, r0, #1
 80a598e:	4770      	bx	lr
 80a5990:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a5994:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a5998:	327f      	adds	r2, #127	; 0x7f
 80a599a:	bfc2      	ittt	gt
 80a599c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a59a0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a59a4:	4770      	bxgt	lr
 80a59a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a59aa:	f04f 0300 	mov.w	r3, #0
 80a59ae:	3a01      	subs	r2, #1
 80a59b0:	e737      	b.n	80a5822 <__aeabi_fmul+0x92>
 80a59b2:	f092 0f00 	teq	r2, #0
 80a59b6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a59ba:	bf02      	ittt	eq
 80a59bc:	0040      	lsleq	r0, r0, #1
 80a59be:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a59c2:	3a01      	subeq	r2, #1
 80a59c4:	d0f9      	beq.n	80a59ba <__aeabi_fdiv+0xc2>
 80a59c6:	ea40 000c 	orr.w	r0, r0, ip
 80a59ca:	f093 0f00 	teq	r3, #0
 80a59ce:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a59d2:	bf02      	ittt	eq
 80a59d4:	0049      	lsleq	r1, r1, #1
 80a59d6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a59da:	3b01      	subeq	r3, #1
 80a59dc:	d0f9      	beq.n	80a59d2 <__aeabi_fdiv+0xda>
 80a59de:	ea41 010c 	orr.w	r1, r1, ip
 80a59e2:	e795      	b.n	80a5910 <__aeabi_fdiv+0x18>
 80a59e4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a59e8:	ea92 0f0c 	teq	r2, ip
 80a59ec:	d108      	bne.n	80a5a00 <__aeabi_fdiv+0x108>
 80a59ee:	0242      	lsls	r2, r0, #9
 80a59f0:	f47f af7d 	bne.w	80a58ee <__aeabi_fmul+0x15e>
 80a59f4:	ea93 0f0c 	teq	r3, ip
 80a59f8:	f47f af70 	bne.w	80a58dc <__aeabi_fmul+0x14c>
 80a59fc:	4608      	mov	r0, r1
 80a59fe:	e776      	b.n	80a58ee <__aeabi_fmul+0x15e>
 80a5a00:	ea93 0f0c 	teq	r3, ip
 80a5a04:	d104      	bne.n	80a5a10 <__aeabi_fdiv+0x118>
 80a5a06:	024b      	lsls	r3, r1, #9
 80a5a08:	f43f af4c 	beq.w	80a58a4 <__aeabi_fmul+0x114>
 80a5a0c:	4608      	mov	r0, r1
 80a5a0e:	e76e      	b.n	80a58ee <__aeabi_fmul+0x15e>
 80a5a10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a5a14:	bf18      	it	ne
 80a5a16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a5a1a:	d1ca      	bne.n	80a59b2 <__aeabi_fdiv+0xba>
 80a5a1c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a5a20:	f47f af5c 	bne.w	80a58dc <__aeabi_fmul+0x14c>
 80a5a24:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a5a28:	f47f af3c 	bne.w	80a58a4 <__aeabi_fmul+0x114>
 80a5a2c:	e75f      	b.n	80a58ee <__aeabi_fmul+0x15e>
 80a5a2e:	bf00      	nop

080a5a30 <__cxa_atexit>:
 80a5a30:	b510      	push	{r4, lr}
 80a5a32:	4c05      	ldr	r4, [pc, #20]	; (80a5a48 <__cxa_atexit+0x18>)
 80a5a34:	4613      	mov	r3, r2
 80a5a36:	b12c      	cbz	r4, 80a5a44 <__cxa_atexit+0x14>
 80a5a38:	460a      	mov	r2, r1
 80a5a3a:	4601      	mov	r1, r0
 80a5a3c:	2002      	movs	r0, #2
 80a5a3e:	f3af 8000 	nop.w
 80a5a42:	bd10      	pop	{r4, pc}
 80a5a44:	4620      	mov	r0, r4
 80a5a46:	bd10      	pop	{r4, pc}
 80a5a48:	00000000 	.word	0x00000000

080a5a4c <memcpy>:
 80a5a4c:	b510      	push	{r4, lr}
 80a5a4e:	1e43      	subs	r3, r0, #1
 80a5a50:	440a      	add	r2, r1
 80a5a52:	4291      	cmp	r1, r2
 80a5a54:	d004      	beq.n	80a5a60 <memcpy+0x14>
 80a5a56:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a5a5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a5a5e:	e7f8      	b.n	80a5a52 <memcpy+0x6>
 80a5a60:	bd10      	pop	{r4, pc}

080a5a62 <memset>:
 80a5a62:	4603      	mov	r3, r0
 80a5a64:	4402      	add	r2, r0
 80a5a66:	4293      	cmp	r3, r2
 80a5a68:	d002      	beq.n	80a5a70 <memset+0xe>
 80a5a6a:	f803 1b01 	strb.w	r1, [r3], #1
 80a5a6e:	e7fa      	b.n	80a5a66 <memset+0x4>
 80a5a70:	4770      	bx	lr
	...

080a5a74 <srand>:
 80a5a74:	b538      	push	{r3, r4, r5, lr}
 80a5a76:	4b12      	ldr	r3, [pc, #72]	; (80a5ac0 <srand+0x4c>)
 80a5a78:	4605      	mov	r5, r0
 80a5a7a:	681c      	ldr	r4, [r3, #0]
 80a5a7c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a5a7e:	b9d3      	cbnz	r3, 80a5ab6 <srand+0x42>
 80a5a80:	2018      	movs	r0, #24
 80a5a82:	f7fc ffd9 	bl	80a2a38 <malloc>
 80a5a86:	f243 330e 	movw	r3, #13070	; 0x330e
 80a5a8a:	63a0      	str	r0, [r4, #56]	; 0x38
 80a5a8c:	8003      	strh	r3, [r0, #0]
 80a5a8e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a5a92:	8043      	strh	r3, [r0, #2]
 80a5a94:	f241 2334 	movw	r3, #4660	; 0x1234
 80a5a98:	8083      	strh	r3, [r0, #4]
 80a5a9a:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a5a9e:	80c3      	strh	r3, [r0, #6]
 80a5aa0:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a5aa4:	8103      	strh	r3, [r0, #8]
 80a5aa6:	2305      	movs	r3, #5
 80a5aa8:	8143      	strh	r3, [r0, #10]
 80a5aaa:	230b      	movs	r3, #11
 80a5aac:	8183      	strh	r3, [r0, #12]
 80a5aae:	2201      	movs	r2, #1
 80a5ab0:	2300      	movs	r3, #0
 80a5ab2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a5ab6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a5ab8:	2200      	movs	r2, #0
 80a5aba:	611d      	str	r5, [r3, #16]
 80a5abc:	615a      	str	r2, [r3, #20]
 80a5abe:	bd38      	pop	{r3, r4, r5, pc}
 80a5ac0:	20000070 	.word	0x20000070

080a5ac4 <strlen>:
 80a5ac4:	4603      	mov	r3, r0
 80a5ac6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a5aca:	2a00      	cmp	r2, #0
 80a5acc:	d1fb      	bne.n	80a5ac6 <strlen+0x2>
 80a5ace:	1a18      	subs	r0, r3, r0
 80a5ad0:	3801      	subs	r0, #1
 80a5ad2:	4770      	bx	lr

080a5ad4 <dynalib_user>:
 80a5ad4:	0021 080a 0061 080a 008d 080a 0091 080a     !...a...........
 80a5ae4:	0000 0000                                   ....

080a5ae8 <table_character_6_8>:
	...
 80a5af0:	005f 0000 0700 0700 0000 7f14 7f14 0014     _...............
 80a5b00:	2a24 2a7f 0012 1323 6408 0062 4936 2056     $*.*..#..db.6IV 
 80a5b10:	0050 0800 0307 0000 1c00 4122 0000 4100     P........."A...A
 80a5b20:	1c22 0000 1824 187e 0024 0808 083e 0008     "...$.~.$...>...
 80a5b30:	8000 3070 0000 0808 0808 0008 0000 6060     ..p0..........``
 80a5b40:	0000 1020 0408 0002 413e 4149 003e 4200     .. .....>AIA>..B
 80a5b50:	407f 0000 4972 4949 0046 4121 4d49 0032     .@..rIIIF.!AIM2.
 80a5b60:	1418 7f12 0010 4527 4545 0038 4a3c 4949     ......'EEE8.<JII
 80a5b70:	0031 2141 0911 0007 4936 4949 0036 4946     1.A!....6III6.FI
 80a5b80:	2949 0016 0000 0014 0000 4000 0034 0000     I).........@4...
 80a5b90:	0800 2214 0041 1414 1414 0014 4100 1422     ..."A........A".
 80a5ba0:	0008 0102 0959 0006 413e 595d 004e 127c     ....Y...>A]YN.|.
 80a5bb0:	1211 007c 497f 4949 0036 413e 4141 0022     ..|..III6.>AAA".
 80a5bc0:	417f 4141 003e 497f 4949 0041 097f 0909     .AAA>..IIIA.....
 80a5bd0:	0001 413e 5141 0073 087f 0808 007f 4100     ..>AAQs........A
 80a5be0:	417f 0000 4020 3f41 0001 087f 2214 0041     .A.. @A?....."A.
 80a5bf0:	407f 4040 0040 027f 021c 007f 047f 1008     .@@@@...........
 80a5c00:	007f 413e 4141 003e 097f 0909 0006 413e     ..>AAA>.......>A
 80a5c10:	2151 005e 097f 2919 0046 4926 4949 0032     Q!^....)F.&III2.
 80a5c20:	0103 017f 0003 403f 4040 003f 201f 2040     ......?@@@?.. @ 
 80a5c30:	001f 403f 4038 003f 1463 1408 0063 0403     ..?@8@?.c...c...
 80a5c40:	0478 0003 5961 4d49 0043 7f00 4141 0041     x...aYIMC...AAA.
 80a5c50:	0402 1008 0020 4100 4141 007f 0204 0201     .... ..AAA......
 80a5c60:	0004 4040 4040 0046 0300 0807 0000 5420     ..@@@@F....... T
 80a5c70:	7854 0040 287f 4444 0038 4438 4444 0028     Tx@..(DD8.8DDD(.
 80a5c80:	4438 2844 007f 5438 5454 0018 0800 097e     8DD(..8TTT....~.
 80a5c90:	0002 a438 9ca4 0078 087f 0404 0078 4400     ..8...x.....x..D
 80a5ca0:	407d 0000 4020 3d40 0000 107f 4428 0000     }@.. @@=....(D..
 80a5cb0:	4100 407f 0000 047c 0478 0078 087c 0404     .A.@..|.x.x.|...
 80a5cc0:	0078 4438 4444 0038 18fc 2424 0018 2418     x.8DDD8...$$...$
 80a5cd0:	1824 00fc 087c 0404 0008 5448 5454 0024     $...|.....HTTT$.
 80a5ce0:	0404 443f 0024 403c 2040 007c 201c 2040     ..?D$.<@@ |.. @ 
 80a5cf0:	001c 403c 4020 003c 2844 2810 0044 904c     ..<@ @<.D(.(D.L.
 80a5d00:	9090 007c 6444 4c54 0044 0800 4136 0000     ..|.DdTLD...6A..
 80a5d10:	0000 0077 0000 4100 0836 0000 0102 0402     ..w....A6.......
 80a5d20:	0002 0000 0000 0000                         ........

080a5d28 <_ZTV15DFRobot_ST7687S>:
	...
 80a5d38:	1eff 080a 1f19 080a 00a5 080a 01bd 080a     ................
 80a5d48:	01ed 080a 0279 080a 1421 080a 149d 080a     ....y...!.......
 80a5d58:	1b3d 080a 14e5 080a 161d 080a 1703 080a     =...............
 80a5d68:	175d 080a 20ab 080a 247b 080a 19d1 080a     ].... ..{$......
 80a5d78:	19fd 080a 19fb 080a 00a5 080a 00a5 080a     ................
 80a5d88:	00a5 080a 00a5 080a 00a5 080a 7264 7761     ............draw
 80a5d98:	4c48 6e69 2065 7265 6f72 2072 000a          HLine error ..

080a5da6 <_ZL9monthDays>:
 80a5da6:	1c1f 1e1f 1e1f 1f1f 1f1e 1f1e 0000          ..............

080a5db4 <_ZTV21DFRobot_ST7687S_Latch>:
	...
 80a5dbc:	0315 080a 03cd 080a 1eff 080a 1f19 080a     ................
 80a5dcc:	0acf 080a 01bd 080a 01ed 080a 0279 080a     ............y...
 80a5ddc:	1421 080a 149d 080a 1b3d 080a 14e5 080a     !.......=.......
 80a5dec:	161d 080a 1703 080a 175d 080a 20ab 080a     ........].... ..
 80a5dfc:	247b 080a 19d1 080a 19fd 080a 19fb 080a     {$..............
 80a5e0c:	07a7 080a 0b25 080a 0b81 080a 0bdd 080a     ....%...........
 80a5e1c:	0757 080a                                   W...

080a5e20 <_ZTV15DFRobot_Display>:
	...
 80a5e30:	1eff 080a 1f19 080a 00a5 080a 00a5 080a     ................
 80a5e40:	1a9f 080a 1a51 080a 1421 080a 149d 080a     ....Q...!.......
 80a5e50:	1b3d 080a 14e5 080a 161d 080a 1703 080a     =...............
 80a5e60:	175d 080a 20ab 080a 247b 080a 19d1 080a     ].... ..{$......
 80a5e70:	19fd 080a 19fb 080a                         ........

080a5e78 <_ZTV8SPIClass>:
	...
 80a5e80:	2a69 080a 2a81 080a 6162 6475 5300 7265     i*...*..baud.Ser
 80a5e90:	6169 006c 5355 5342 7265 6169 316c 7400     ial.USBSerial1.t
 80a5ea0:	7079 0065 6170 6172 006d 6d63 0064 6469     ype.param.cmd.id
 80a5eb0:	6800 646e 7300 7274 006d 6966 746c 6c00     .hnd.strm.filt.l
 80a5ec0:	6c76 6100 6464 6148 646e 656c 0072 6572     vl.addHandler.re
 80a5ed0:	6f6d 6576 6148 646e 656c 0072 6e65 6d75     moveHandler.enum
 80a5ee0:	6148 646e 656c 7372 4a00 4f53 534e 7274     Handlers.JSONStr
 80a5ef0:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
 80a5f00:	0070 3025 3031 2075 5d00 0020 6425 2c00     p.%010u .] .%d.,
 80a5f10:	0020 2928 203a 2000 005b 6f63 6564 3d20      .(): . [.code =
 80a5f20:	0020 6925 6400 7465 6961 736c 3d20 0020      .%i.details = .
 80a5f30:	0a0d 6600 6c00 006e 6e66 6300 646f 0065     ...f.ln.fn.code.
 80a5f40:	6564 6174 6c69 6e00 6e6f 0065 7274 6361     detail.none.trac
 80a5f50:	0065 6e69 6f66 7700 7261 006e 7265 6f72     e.info.warn.erro
 80a5f60:	0072 6170 696e 0063 6c61 006c 005a 2b25     r.panic.all.Z.%+
 80a5f70:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
 80a5f80:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
 80a5f90:	6974 656d 0000 0000                         time....

080a5f98 <_ZTV9IPAddress>:
	...
 80a5fa0:	2dd1 080a 2dc1 080a 2dc3 080a               .-...-...-..

080a5fac <_ZTV9USBSerial>:
	...
 80a5fb4:	2e8d 080a 2edd 080a 2eeb 080a 2b81 080a     .............+..
 80a5fc4:	2ec9 080a 2e8f 080a 2ea5 080a 2ed7 080a     ................
 80a5fd4:	2ebb 080a 2e89 080a                         ........

080a5fdc <_ZTV11USARTSerial>:
	...
 80a5fe4:	302d 080a 307d 080a 308b 080a 2b81 080a     -0..}0...0...+..
 80a5ff4:	3041 080a 3063 080a 304f 080a 3077 080a     A0..c0..O0..w0..
 80a6004:	302f 080a 3033 080a                         /0..30..

080a600c <_ZTV7TwoWire>:
	...
 80a6014:	3131 080a 317b 080a 3153 080a 3133 080a     11..{1..S1..31..
 80a6024:	315b 080a 3163 080a 316b 080a 3173 080a     [1..c1..k1..s1..

080a6034 <_ZTVN5spark9WiFiClassE>:
	...
 80a603c:	324b 080a 3241 080a 3237 080a 31b5 080a     K2..A2..72...1..
 80a604c:	2c19 080a 322b 080a 321f 080a 3217 080a     .,..+2...2...2..
 80a605c:	320d 080a 3203 080a 31bf 080a               .2...2...1..

080a6068 <_ZTVN5spark12NetworkClassE>:
	...
 80a6070:	3269 080a 3273 080a 327d 080a 3287 080a     i2..s2..}2...2..
 80a6080:	3291 080a 329d 080a 32a9 080a 32b5 080a     .2...2...2...2..
 80a6090:	32bd 080a 32c7 080a 32d1 080a               .2...2...2..

080a609c <_ZSt7nothrow>:
 80a609c:	0000 0000 7173 7472 0000 0000               ....sqrt....

080a60a8 <npio2_hw>:
 80a60a8:	21fb 3ff9 21fb 4009 d97c 4012 21fb 4019     .!.?.!.@|..@.!.@
 80a60b8:	6a7a 401f d97c 4022 fdbb 4025 21fb 4029     zj.@|."@..%@.!)@
 80a60c8:	463a 402c 6a7a 402f 475c 4031 d97c 4032     :F,@zj/@\G1@|.2@
 80a60d8:	6b9c 4034 fdbb 4035 8fdb 4037 21fb 4039     .k4@..5@..7@.!9@
 80a60e8:	b41b 403a 463a 403c d85a 403d 6a7a 403f     ..:@:F<@Z.=@zj?@
 80a60f8:	7e4c 4040 475c 4041 106c 4042 d97c 4042     L~@@\GA@l.B@|.B@
 80a6108:	a28c 4043 6b9c 4044 34ac 4045 fdbb 4045     ..C@.kD@.4E@..E@
 80a6118:	c6cb 4046 8fdb 4047 58eb 4048 21fb 4049     ..F@..G@.XH@.!I@

080a6128 <two_over_pi>:
 80a6128:	f983 00a2 4e44 006e 29fc 0015 57d1 0027     ....DNn..)...W'.
 80a6138:	34dd 00f5 db62 00c0 993c 0095 9041 0043     .4..b...<...A.C.
 80a6148:	5163 00fe debb 00ab 61b7 00c5 6e3a 0024     cQ.......a..:n$.
 80a6158:	4dd2 0042 0649 00e0 ea09 002e 921c 00d1     .MB.I...........
 80a6168:	1deb 00fe b129 001c 3ee8 00a7 35f5 0082     ....)....>...5..
 80a6178:	bb44 002e e99c 0084 26b4 0070 7e41 005f     D........&p.A~_.
 80a6188:	91d6 0039 8353 0039 f49c 0039 5f8b 0084     ..9.S.9...9.._..
 80a6198:	f928 00bd 1ff8 003b ffde 0097 980f 0005     (.....;.........
 80a61a8:	2f11 00ef 5a0a 008b 1f6d 006d 7ecf 0036     ./...Z..m.m..~6.
 80a61b8:	cb09 0027 4f46 00b7 669e 003f ea2d 005f     ..'.FO...f?.-._.
 80a61c8:	27ba 0075 ebe5 00c7 7b3d 00f1 39f7 0007     .'u.....={...9..
 80a61d8:	5292 008a 6bfb 00ea b11f 005f 5d08 008d     .R...k...._..]..
 80a61e8:	0330 0056 fc7b 0046 abf0 006b bc20 00cf     0.V.{.F...k. ...
 80a61f8:	f436 009a a9e3 001d 615e 0091 1b08 00e6     6.......^a......
 80a6208:	9985 0065 14a0 005f 408d 0068 d880 00ff     ..e..._..@h.....
 80a6218:	7327 004d 0606 0031 56ca 0015 a8c9 0073     'sM...1..V....s.
 80a6228:	e27b 0060 8c6b 00c0                         {.`.k...

080a6230 <init_jk>:
 80a6230:	0002 0000 0003 0000 0004 0000 0006 0000     ................

080a6240 <PIo2>:
 80a6240:	0000 4000 21fb 3ff9 0000 0000 442d 3e74     ...@.!.?....-Dt>
 80a6250:	0000 8000 4698 3cf8 0000 6000 cc51 3b78     .....F.<...`Q.x;
 80a6260:	0000 8000 1b83 39f0 0000 4000 2520 387a     .......9...@ %z8
 80a6270:	0000 8000 8222 36e3 0000 0000 f31d 3569     ...."..6......i5

080a6280 <__sf_fake_stdin>:
	...

080a62a0 <__sf_fake_stdout>:
	...

080a62c0 <__sf_fake_stderr>:
	...
 80a62e0:	0043                                        C.

080a62e2 <link_const_variable_data_end>:
	...

080a62e4 <link_constructors_location>:
 80a62e4:	080a0311 	.word	0x080a0311
 80a62e8:	080a03dd 	.word	0x080a03dd
 80a62ec:	080a0435 	.word	0x080a0435
 80a62f0:	080a0751 	.word	0x080a0751
 80a62f4:	080a0cf1 	.word	0x080a0cf1
 80a62f8:	080a141d 	.word	0x080a141d
 80a62fc:	080a26b7 	.word	0x080a26b7
 80a6300:	080a2b4d 	.word	0x080a2b4d
 80a6304:	080a2c25 	.word	0x080a2c25
 80a6308:	080a2c35 	.word	0x080a2c35
 80a630c:	080a2c6d 	.word	0x080a2c6d
 80a6310:	080a3255 	.word	0x080a3255
 80a6314:	080a3321 	.word	0x080a3321
 80a6318:	080a340d 	.word	0x080a340d
 80a631c:	080a3501 	.word	0x080a3501
 80a6320:	080a3585 	.word	0x080a3585
 80a6324:	080a3649 	.word	0x080a3649
 80a6328:	080a370d 	.word	0x080a370d

080a632c <link_constructors_end>:
 80a632c:	00000000 	.word	0x00000000
